using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Tmds.DBus.Protocol;

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace Tmds.DBus.SourceGenerator
{
    internal abstract class OrgKdeStatusNotifierItem2 : IMethodHandler
    {
        private SynchronizationContext? _synchronizationContext;
        public OrgKdeStatusNotifierItem2(bool emitOnCapturedContext = true)
        {
            if (emitOnCapturedContext)
                _synchronizationContext = SynchronizationContext.Current;
        }

        protected abstract Connection Connection { get; }
        public abstract string Path { get; }

        protected abstract ValueTask OnContextMenuAsync(int @x, int @y);
        protected abstract ValueTask OnActivateAsync(int @x, int @y);
        protected abstract ValueTask OnSecondaryActivateAsync(int @x, int @y);
        protected abstract ValueTask OnScrollAsync(int @delta, string @orientation);
        protected void EmitNewTitle()
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "org.kde.StatusNotifierItem", "NewTitle");
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        protected void EmitNewIcon()
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "org.kde.StatusNotifierItem", "NewIcon");
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        protected void EmitNewAttentionIcon()
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "org.kde.StatusNotifierItem", "NewAttentionIcon");
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        protected void EmitNewOverlayIcon()
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "org.kde.StatusNotifierItem", "NewOverlayIcon");
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        protected void EmitNewToolTip()
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "org.kde.StatusNotifierItem", "NewToolTip");
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        protected void EmitNewStatus(string @status)
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "org.kde.StatusNotifierItem", "NewStatus", "s");
            writer.WriteString(status);
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        public class Properties
        {
            public string Category { get; set; }
            public string Id { get; set; }
            public string Title { get; set; }
            public string Status { get; set; }
            public int WindowId { get; set; }
            public string IconThemePath { get; set; }
            public ObjectPath Menu { get; set; }
            public bool ItemIsMenu { get; set; }
            public string IconName { get; set; }
            public (int, int, byte[])[] IconPixmap { get; set; }
            public string OverlayIconName { get; set; }
            public (int, int, byte[])[] OverlayIconPixmap { get; set; }
            public string AttentionIconName { get; set; }
            public (int, int, byte[])[] AttentionIconPixmap { get; set; }
            public string AttentionMovieName { get; set; }
            public (string, (int, int, byte[])[], string, string) ToolTip { get; set; }
        }

        public Properties BackingProperties { get; } = new Properties();

        public bool RunMethodHandlerSynchronously(Message message) => true;
        public async ValueTask HandleMethodAsync(MethodContext context)
        {
            switch (context.Request.InterfaceAsString)
            {
                case "org.freedesktop.DBus.Peer":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("Ping", "" or null):
                        {
                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter(null); 
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }
                    }
                    break;
                case "org.kde.StatusNotifierItem":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("ContextMenu", "ii"):
                        {
                            int @x;
                            int @y;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @x = reader.ReadInt32();
                                @y = reader.ReadInt32();
                            }

                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<bool> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        await OnContextMenuAsync(@x, @y);
                                        tsc.SetResult(true);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                await tsc.Task;
                            }
                            else
                            {
                                await OnContextMenuAsync(@x, @y);
                            }

                            if (!context.NoReplyExpected)
                                Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter(null !);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("Activate", "ii"):
                        {
                            int @x;
                            int @y;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @x = reader.ReadInt32();
                                @y = reader.ReadInt32();
                            }

                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<bool> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        await OnActivateAsync(@x, @y);
                                        tsc.SetResult(true);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                await tsc.Task;
                            }
                            else
                            {
                                await OnActivateAsync(@x, @y);
                            }

                            if (!context.NoReplyExpected)
                                Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter(null !);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("SecondaryActivate", "ii"):
                        {
                            int @x;
                            int @y;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @x = reader.ReadInt32();
                                @y = reader.ReadInt32();
                            }

                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<bool> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        await OnSecondaryActivateAsync(@x, @y);
                                        tsc.SetResult(true);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                await tsc.Task;
                            }
                            else
                            {
                                await OnSecondaryActivateAsync(@x, @y);
                            }

                            if (!context.NoReplyExpected)
                                Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter(null !);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("Scroll", "is"):
                        {
                            int @delta;
                            string @orientation;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @delta = reader.ReadInt32();
                                @orientation = reader.ReadString();
                            }

                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<bool> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        await OnScrollAsync(@delta, @orientation);
                                        tsc.SetResult(true);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                await tsc.Task;
                            }
                            else
                            {
                                await OnScrollAsync(@delta, @orientation);
                            }

                            if (!context.NoReplyExpected)
                                Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter(null !);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }
                    }

                    break;
                case "org.freedesktop.DBus.Properties":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("Get", "ss"):
                        {
                            Reply();
                            void Reply()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                reader.ReadString();
                                string member = reader.ReadString();
                                switch (member)
                                {
                                    case "Category":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.Category)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "Id":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.Id)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "Title":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.Title)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "Status":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.Status)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "WindowId":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("i", new DBusInt32Item(BackingProperties.WindowId)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "IconThemePath":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.IconThemePath)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "Menu":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("o", new DBusObjectPathItem(BackingProperties.Menu)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "ItemIsMenu":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("b", new DBusBoolItem(BackingProperties.ItemIsMenu)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "IconName":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.IconName)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "IconPixmap":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("a(iiay)", new DBusArrayItem(DBusType.Struct, BackingProperties.IconPixmap.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray())));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "OverlayIconName":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.OverlayIconName)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "OverlayIconPixmap":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("a(iiay)", new DBusArrayItem(DBusType.Struct, BackingProperties.OverlayIconPixmap.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray())));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "AttentionIconName":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.AttentionIconName)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "AttentionIconPixmap":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("a(iiay)", new DBusArrayItem(DBusType.Struct, BackingProperties.AttentionIconPixmap.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray())));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "AttentionMovieName":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.AttentionMovieName)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "ToolTip":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("(sa(iiay)ss)", new DBusStructItem(new DBusItem[] { new DBusStringItem(BackingProperties.ToolTip.Item1), new DBusArrayItem(DBusType.Struct, BackingProperties.ToolTip.Item2.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray()), new DBusStringItem(BackingProperties.ToolTip.Item3), new DBusStringItem(BackingProperties.ToolTip.Item4) })));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }
                                }
                            }

                            break;
                        }

                        case ("GetAll", "s"):
                        {
                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("a{sv}");
                                Dictionary<string, DBusVariantItem> dict = new Dictionary<string, DBusVariantItem>
                                {
                                    {
                                        "Category",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.Category))
                                    },
                                    {
                                        "Id",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.Id))
                                    },
                                    {
                                        "Title",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.Title))
                                    },
                                    {
                                        "Status",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.Status))
                                    },
                                    {
                                        "WindowId",
                                        new DBusVariantItem("i", new DBusInt32Item(BackingProperties.WindowId))
                                    },
                                    {
                                        "IconThemePath",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.IconThemePath))
                                    },
                                    {
                                        "Menu",
                                        new DBusVariantItem("o", new DBusObjectPathItem(BackingProperties.Menu))
                                    },
                                    {
                                        "ItemIsMenu",
                                        new DBusVariantItem("b", new DBusBoolItem(BackingProperties.ItemIsMenu))
                                    },
                                    {
                                        "IconName",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.IconName))
                                    },
                                    {
                                        "IconPixmap",
                                        new DBusVariantItem("a(iiay)", new DBusArrayItem(DBusType.Struct, BackingProperties.IconPixmap.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray()))
                                    },
                                    {
                                        "OverlayIconName",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.OverlayIconName))
                                    },
                                    {
                                        "OverlayIconPixmap",
                                        new DBusVariantItem("a(iiay)", new DBusArrayItem(DBusType.Struct, BackingProperties.OverlayIconPixmap.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray()))
                                    },
                                    {
                                        "AttentionIconName",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.AttentionIconName))
                                    },
                                    {
                                        "AttentionIconPixmap",
                                        new DBusVariantItem("a(iiay)", new DBusArrayItem(DBusType.Struct, BackingProperties.AttentionIconPixmap.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray()))
                                    },
                                    {
                                        "AttentionMovieName",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.AttentionMovieName))
                                    },
                                    {
                                        "ToolTip",
                                        new DBusVariantItem("(sa(iiay)ss)", new DBusStructItem(new DBusItem[] { new DBusStringItem(BackingProperties.ToolTip.Item1), new DBusArrayItem(DBusType.Struct, BackingProperties.ToolTip.Item2.Select(x => new DBusStructItem(new DBusItem[] { new DBusInt32Item(x.Item1), new DBusInt32Item(x.Item2), new DBusArrayItem(DBusType.Byte, x.Item3.Select(x => new DBusByteItem(x)).ToArray()) })).ToArray()), new DBusStringItem(BackingProperties.ToolTip.Item3), new DBusStringItem(BackingProperties.ToolTip.Item4) }))
                                    }
                                };
                                writer.WriteDictionary_aesv(dict);
                                context.Reply(writer.CreateMessage());
                            }

                            break;
                        }
                    }

                    break;
                case "org.freedesktop.DBus.Introspectable":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("Introspect", "" or null):
                        {
                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("s");
                                writer.WriteString("<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\"><node xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <interface name=\"org.kde.StatusNotifierItem\">\n    <method name=\"ContextMenu\">\n      <arg name=\"x\" type=\"i\" direction=\"in\" />\n      <arg name=\"y\" type=\"i\" direction=\"in\" />\n    </method>\n    <method name=\"Activate\">\n      <arg name=\"x\" type=\"i\" direction=\"in\" />\n      <arg name=\"y\" type=\"i\" direction=\"in\" />\n    </method>\n    <method name=\"SecondaryActivate\">\n      <arg name=\"x\" type=\"i\" direction=\"in\" />\n      <arg name=\"y\" type=\"i\" direction=\"in\" />\n    </method>\n    <method name=\"Scroll\">\n      <arg name=\"delta\" type=\"i\" direction=\"in\" />\n      <arg name=\"orientation\" type=\"s\" direction=\"in\" />\n    </method>\n    <signal name=\"NewTitle\" />\n    <signal name=\"NewIcon\" />\n    <signal name=\"NewAttentionIcon\" />\n    <signal name=\"NewOverlayIcon\" />\n    <signal name=\"NewToolTip\" />\n    <signal name=\"NewStatus\">\n      <arg name=\"status\" type=\"s\" />\n    </signal>\n    <property name=\"Category\" type=\"s\" access=\"read\" />\n    <property name=\"Id\" type=\"s\" access=\"read\" />\n    <property name=\"Title\" type=\"s\" access=\"read\" />\n    <property name=\"Status\" type=\"s\" access=\"read\" />\n    <property name=\"WindowId\" type=\"i\" access=\"read\" />\n    <property name=\"IconThemePath\" type=\"s\" access=\"read\" />\n    <property name=\"Menu\" type=\"o\" access=\"read\" />\n    <property name=\"ItemIsMenu\" type=\"b\" access=\"read\" />\n    <property name=\"IconName\" type=\"s\" access=\"read\" />\n    <property name=\"IconPixmap\" type=\"a(iiay)\" access=\"read\" />\n    <property name=\"OverlayIconName\" type=\"s\" access=\"read\" />\n    <property name=\"OverlayIconPixmap\" type=\"a(iiay)\" access=\"read\" />\n    <property name=\"AttentionIconName\" type=\"s\" access=\"read\" />\n    <property name=\"AttentionIconPixmap\" type=\"a(iiay)\" access=\"read\" />\n    <property name=\"AttentionMovieName\" type=\"s\" access=\"read\" />\n    <property name=\"ToolTip\" type=\"(sa(iiay)ss)\" access=\"read\" />\n  </interface>\n</node>");
                                context.Reply(writer.CreateMessage());
                            }

                            break;
                        }
                    }

                    break;
            }
        }
    }
}
