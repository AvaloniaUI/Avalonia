using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Tmds.DBus.Protocol;

// <auto-generated/>
#pragma warning disable
#nullable enable
namespace Tmds.DBus.SourceGenerator
{
    internal abstract class ComCanonicalDbusmenu2 : IMethodHandler
    {
        private SynchronizationContext? _synchronizationContext;
        public ComCanonicalDbusmenu2(bool emitOnCapturedContext = true)
        {
            if (emitOnCapturedContext)
                _synchronizationContext = SynchronizationContext.Current;
        }

        protected abstract Connection Connection { get; }
        public abstract string Path { get; }

        protected abstract ValueTask<(uint @revision, (int, Dictionary<string, DBusVariantItem>, DBusVariantItem[]) @layout)> OnGetLayoutAsync(int @parentId, int @recursionDepth, string[] @propertyNames);
        protected abstract ValueTask<(int, Dictionary<string, DBusVariantItem>)[]> OnGetGroupPropertiesAsync(int[] @ids, string[] @propertyNames);
        protected abstract ValueTask<DBusVariantItem> OnGetPropertyAsync(int @id, string @name);
        protected abstract ValueTask OnEventAsync(int @id, string @eventId, DBusVariantItem @data, uint @timestamp);
        protected abstract ValueTask<int[]> OnEventGroupAsync((int, string, DBusVariantItem, uint)[] @events);
        protected abstract ValueTask<bool> OnAboutToShowAsync(int @id);
        protected abstract ValueTask<(int[] @updatesNeeded, int[] @idErrors)> OnAboutToShowGroupAsync(int[] @ids);
        protected void EmitItemsPropertiesUpdated((int, Dictionary<string, DBusVariantItem>)[] @updatedProps, (int, string[])[] @removedProps)
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "com.canonical.dbusmenu", "ItemsPropertiesUpdated", "a(ia{sv})a(ias)");
            writer.WriteArray_ariaesvz(updatedProps);
            writer.WriteArray_ariasz(removedProps);
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        protected void EmitLayoutUpdated(uint @revision, int @parent)
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "com.canonical.dbusmenu", "LayoutUpdated", "ui");
            writer.WriteUInt32(revision);
            writer.WriteInt32(parent);
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        protected void EmitItemActivationRequested(int @id, uint @timestamp)
        {
            MessageWriter writer = Connection.GetMessageWriter();
            writer.WriteSignalHeader(null, Path, "com.canonical.dbusmenu", "ItemActivationRequested", "iu");
            writer.WriteInt32(id);
            writer.WriteUInt32(timestamp);
            Connection.TrySendMessage(writer.CreateMessage());
            writer.Dispose();
        }

        public class Properties
        {
            public uint Version { get; set; }
            public string TextDirection { get; set; }
            public string Status { get; set; }
            public string[] IconThemePath { get; set; }
        }

        public Properties BackingProperties { get; } = new Properties();

        public bool RunMethodHandlerSynchronously(Message message) => true;
        public async ValueTask HandleMethodAsync(MethodContext context)
        {
            switch (context.Request.InterfaceAsString)
            {
                case "org.freedesktop.DBus.Peer":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("Ping", "" or null):
                        {
                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter(null); 
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }
                    }
                    break;
                case "com.canonical.dbusmenu":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("GetLayout", "iias"):
                        {
                            int @parentId;
                            int @recursionDepth;
                            string[] @propertyNames;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @parentId = reader.ReadInt32();
                                @recursionDepth = reader.ReadInt32();
                                @propertyNames = reader.ReadArray_as();
                            }

                            (uint @revision, (int, Dictionary<string, DBusVariantItem>, DBusVariantItem[]) @layout) ret;
                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<(uint @revision, (int, Dictionary<string, DBusVariantItem>, DBusVariantItem[]) @layout)> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        (uint @revision, (int, Dictionary<string, DBusVariantItem>, DBusVariantItem[]) @layout) ret1 = await OnGetLayoutAsync(@parentId, @recursionDepth, @propertyNames);
                                        tsc.SetResult(ret1);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                ret = await tsc.Task;
                            }
                            else
                            {
                                ret = await OnGetLayoutAsync(@parentId, @recursionDepth, @propertyNames);
                            }

                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("u(ia{sv}av)");
                                writer.WriteUInt32(ret.@revision);
                                writer.WriteStruct_riaesvavz(ret.@layout);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("GetGroupProperties", "aias"):
                        {
                            int[] @ids;
                            string[] @propertyNames;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @ids = reader.ReadArray_ai();
                                @propertyNames = reader.ReadArray_as();
                            }

                            (int, Dictionary<string, DBusVariantItem>)[] ret;
                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<(int, Dictionary<string, DBusVariantItem>)[]> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        (int, Dictionary<string, DBusVariantItem>)[] ret1 = await OnGetGroupPropertiesAsync(@ids, @propertyNames);
                                        tsc.SetResult(ret1);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                ret = await tsc.Task;
                            }
                            else
                            {
                                ret = await OnGetGroupPropertiesAsync(@ids, @propertyNames);
                            }

                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("a(ia{sv})");
                                writer.WriteArray_ariaesvz(ret);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("GetProperty", "is"):
                        {
                            int @id;
                            string @name;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @id = reader.ReadInt32();
                                @name = reader.ReadString();
                            }

                            DBusVariantItem ret;
                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<DBusVariantItem> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        DBusVariantItem ret1 = await OnGetPropertyAsync(@id, @name);
                                        tsc.SetResult(ret1);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                ret = await tsc.Task;
                            }
                            else
                            {
                                ret = await OnGetPropertyAsync(@id, @name);
                            }

                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("v");
                                writer.WriteDBusVariant(ret);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("Event", "isvu"):
                        {
                            int @id;
                            string @eventId;
                            DBusVariantItem @data;
                            uint @timestamp;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @id = reader.ReadInt32();
                                @eventId = reader.ReadString();
                                @data = reader.ReadDBusVariant();
                                @timestamp = reader.ReadUInt32();
                            }

                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<bool> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        await OnEventAsync(@id, @eventId, @data, @timestamp);
                                        tsc.SetResult(true);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                await tsc.Task;
                            }
                            else
                            {
                                await OnEventAsync(@id, @eventId, @data, @timestamp);
                            }

                            if (!context.NoReplyExpected)
                                Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter(null !);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("EventGroup", "a(isvu)"):
                        {
                            (int, string, DBusVariantItem, uint)[] @events;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @events = reader.ReadArray_arisvuz();
                            }

                            int[] ret;
                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<int[]> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        int[] ret1 = await OnEventGroupAsync(@events);
                                        tsc.SetResult(ret1);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                ret = await tsc.Task;
                            }
                            else
                            {
                                ret = await OnEventGroupAsync(@events);
                            }

                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("ai");
                                writer.WriteArray_ai(ret);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("AboutToShow", "i"):
                        {
                            int @id;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @id = reader.ReadInt32();
                            }

                            bool ret;
                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<bool> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        bool ret1 = await OnAboutToShowAsync(@id);
                                        tsc.SetResult(ret1);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                ret = await tsc.Task;
                            }
                            else
                            {
                                ret = await OnAboutToShowAsync(@id);
                            }

                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("b");
                                writer.WriteBool(ret);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }

                        case ("AboutToShowGroup", "ai"):
                        {
                            int[] @ids;
                            ReadParameters();
                            void ReadParameters()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                @ids = reader.ReadArray_ai();
                            }

                            (int[] @updatesNeeded, int[] @idErrors) ret;
                            if (_synchronizationContext is not null)
                            {
                                TaskCompletionSource<(int[] @updatesNeeded, int[] @idErrors)> tsc = new();
                                _synchronizationContext.Post(async _ =>
                                {
                                    try
                                    {
                                        (int[] @updatesNeeded, int[] @idErrors) ret1 = await OnAboutToShowGroupAsync(@ids);
                                        tsc.SetResult(ret1);
                                    }
                                    catch (Exception e)
                                    {
                                        tsc.SetException(e);
                                    }
                                }, null);
                                ret = await tsc.Task;
                            }
                            else
                            {
                                ret = await OnAboutToShowGroupAsync(@ids);
                            }

                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("aiai");
                                writer.WriteArray_ai(ret.@updatesNeeded);
                                writer.WriteArray_ai(ret.@idErrors);
                                context.Reply(writer.CreateMessage());
                                writer.Dispose();
                            }

                            break;
                        }
                    }

                    break;
                case "org.freedesktop.DBus.Properties":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("Get", "ss"):
                        {
                            Reply();
                            void Reply()
                            {
                                Reader reader = context.Request.GetBodyReader();
                                reader.ReadString();
                                string member = reader.ReadString();
                                switch (member)
                                {
                                    case "Version":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("u", new DBusUInt32Item(BackingProperties.Version)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "TextDirection":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.TextDirection)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "Status":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("s", new DBusStringItem(BackingProperties.Status)));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }

                                    case "IconThemePath":
                                    {
                                        MessageWriter writer = context.CreateReplyWriter("v");
                                        writer.WriteDBusVariant(new DBusVariantItem("as", new DBusArrayItem(DBusType.String, BackingProperties.IconThemePath.Select(x => new DBusStringItem(x)).ToArray())));
                                        context.Reply(writer.CreateMessage());
                                        writer.Dispose();
                                        break;
                                    }
                                }
                            }

                            break;
                        }

                        case ("GetAll", "s"):
                        {
                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("a{sv}");
                                Dictionary<string, DBusVariantItem> dict = new Dictionary<string, DBusVariantItem>
                                {
                                    {
                                        "Version",
                                        new DBusVariantItem("u", new DBusUInt32Item(BackingProperties.Version))
                                    },
                                    {
                                        "TextDirection",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.TextDirection))
                                    },
                                    {
                                        "Status",
                                        new DBusVariantItem("s", new DBusStringItem(BackingProperties.Status))
                                    },
                                    {
                                        "IconThemePath",
                                        new DBusVariantItem("as", new DBusArrayItem(DBusType.String, BackingProperties.IconThemePath.Select(x => new DBusStringItem(x)).ToArray()))
                                    }
                                };
                                writer.WriteDictionary_aesv(dict);
                                context.Reply(writer.CreateMessage());
                            }

                            break;
                        }
                    }

                    break;
                case "org.freedesktop.DBus.Introspectable":
                    switch (context.Request.MemberAsString, context.Request.SignatureAsString)
                    {
                        case ("Introspect", "" or null):
                        {
                            Reply();
                            void Reply()
                            {
                                MessageWriter writer = context.CreateReplyWriter("s");
                                writer.WriteString("<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\"\n\"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\"><node xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n  <interface name=\"com.canonical.dbusmenu\">\n    <method name=\"GetLayout\">\n      <arg name=\"parentId\" type=\"i\" direction=\"in\" />\n      <arg name=\"recursionDepth\" type=\"i\" direction=\"in\" />\n      <arg name=\"propertyNames\" type=\"as\" direction=\"in\" />\n      <arg name=\"revision\" type=\"u\" direction=\"out\" />\n      <arg name=\"layout\" type=\"(ia{sv}av)\" direction=\"out\" />\n    </method>\n    <method name=\"GetGroupProperties\">\n      <arg name=\"ids\" type=\"ai\" direction=\"in\" />\n      <arg name=\"propertyNames\" type=\"as\" direction=\"in\" />\n      <arg name=\"properties\" type=\"a(ia{sv})\" direction=\"out\" />\n    </method>\n    <method name=\"GetProperty\">\n      <arg name=\"id\" type=\"i\" direction=\"in\" />\n      <arg name=\"name\" type=\"s\" direction=\"in\" />\n      <arg name=\"value\" type=\"v\" direction=\"out\" />\n    </method>\n    <method name=\"Event\">\n      <arg name=\"id\" type=\"i\" direction=\"in\" />\n      <arg name=\"eventId\" type=\"s\" direction=\"in\" />\n      <arg name=\"data\" type=\"v\" direction=\"in\" />\n      <arg name=\"timestamp\" type=\"u\" direction=\"in\" />\n    </method>\n    <method name=\"EventGroup\">\n      <arg name=\"events\" type=\"a(isvu)\" direction=\"in\" />\n      <arg name=\"idErrors\" type=\"ai\" direction=\"out\" />\n    </method>\n    <method name=\"AboutToShow\">\n      <arg name=\"id\" type=\"i\" direction=\"in\" />\n      <arg name=\"needUpdate\" type=\"b\" direction=\"out\" />\n    </method>\n    <method name=\"AboutToShowGroup\">\n      <arg name=\"ids\" type=\"ai\" direction=\"in\" />\n      <arg name=\"updatesNeeded\" type=\"ai\" direction=\"out\" />\n      <arg name=\"idErrors\" type=\"ai\" direction=\"out\" />\n    </method>\n    <signal name=\"ItemsPropertiesUpdated\">\n      <arg name=\"updatedProps\" type=\"a(ia{sv})\" direction=\"out\" />\n      <arg name=\"removedProps\" type=\"a(ias)\" direction=\"out\" />\n    </signal>\n    <signal name=\"LayoutUpdated\">\n      <arg name=\"revision\" type=\"u\" direction=\"out\" />\n      <arg name=\"parent\" type=\"i\" direction=\"out\" />\n    </signal>\n    <signal name=\"ItemActivationRequested\">\n      <arg name=\"id\" type=\"i\" direction=\"out\" />\n      <arg name=\"timestamp\" type=\"u\" direction=\"out\" />\n    </signal>\n    <property name=\"Version\" type=\"u\" access=\"read\" />\n    <property name=\"TextDirection\" type=\"s\" access=\"read\" />\n    <property name=\"Status\" type=\"s\" access=\"read\" />\n    <property name=\"IconThemePath\" type=\"as\" access=\"read\" />\n  </interface>\n</node>");
                                context.Reply(writer.CreateMessage());
                            }

                            break;
                        }
                    }

                    break;
            }
        }
    }
}
