diff a/src/Headless/Avalonia.Headless/HeadlessWindowExtensions.cs b/src/Headless/Avalonia.Headless/HeadlessWindowExtensions.cs	(rejected hunks)
@@ -37,71 +37,70 @@ public static class HeadlessWindowExtensions
                 "To capture a rendered frame, make sure that headless application was initialized with '.UseSkia()' and disabled 'UseHeadlessDrawing' in the 'AvaloniaHeadlessPlatformOptions'.");
         }
 
-        return GetImpl(topLevel).GetLastRenderedFrame();
+        return GetImpl(topLevel)?.GetLastRenderedFrame();
     }
 
     /// <summary>
     /// Simulates keyboard press on the headless window/toplevel.
     /// </summary>
     public static void KeyPress(this TopLevel topLevel, Key key, RawInputModifiers modifiers) =>
-        RunJobsAndGetImpl(topLevel).KeyPress(key, modifiers);
+        RunJobsAndGetImpl(topLevel)?.KeyPress(key, modifiers);
 
     /// <summary>
     /// Simulates keyboard release on the headless window/toplevel.
     /// </summary>
     public static void KeyRelease(this TopLevel topLevel, Key key, RawInputModifiers modifiers) =>
-        RunJobsAndGetImpl(topLevel).KeyRelease(key, modifiers);
+        RunJobsAndGetImpl(topLevel)?.KeyRelease(key, modifiers);
 
     /// <summary>
     /// Simulates a text input event on the headless window/toplevel
     /// </summary>
     public static void KeyTextInput(this TopLevel topLevel, string text) =>
-        RunJobsAndGetImpl(topLevel).TextInput(text);
+        RunJobsAndGetImpl(topLevel)?.TextInput(text);
 
     /// <summary>
     /// Simulates mouse down on the headless window/toplevel.
     /// </summary>
     public static void MouseDown(this TopLevel topLevel, Point point, MouseButton button,
         RawInputModifiers modifiers = RawInputModifiers.None) =>
-        RunJobsAndGetImpl(topLevel).MouseDown(point, button, modifiers);
+        RunJobsAndGetImpl(topLevel)?.MouseDown(point, button, modifiers);
 
     /// <summary>
     /// Simulates mouse move on the headless window/toplevel.
     /// </summary>
     public static void MouseMove(this TopLevel topLevel, Point point,
         RawInputModifiers modifiers = RawInputModifiers.None) =>
-        RunJobsAndGetImpl(topLevel).MouseMove(point, modifiers);
+        RunJobsAndGetImpl(topLevel)?.MouseMove(point, modifiers);
 
     /// <summary>
     /// Simulates mouse up on the headless window/toplevel.
     /// </summary>
     public static void MouseUp(this TopLevel topLevel, Point point, MouseButton button,
         RawInputModifiers modifiers = RawInputModifiers.None) =>
-        RunJobsAndGetImpl(topLevel).MouseUp(point, button, modifiers);
+        RunJobsAndGetImpl(topLevel)?.MouseUp(point, button, modifiers);
 
     /// <summary>
     /// Simulates mouse wheel on the headless window/toplevel.
     /// </summary>
     public static void MouseWheel(this TopLevel topLevel, Point point, Vector delta,
         RawInputModifiers modifiers = RawInputModifiers.None) =>
-        RunJobsAndGetImpl(topLevel).MouseWheel(point, delta, modifiers);
+        RunJobsAndGetImpl(topLevel)?.MouseWheel(point, delta, modifiers);
 
     /// <summary>
     /// Simulates drag'n'drop target on the headless window/toplevel.
     /// </summary>
     public static void DragDrop(this TopLevel topLevel, Point point, RawDragEventType type, IDataObject data,
         DragDropEffects effects, RawInputModifiers modifiers = RawInputModifiers.None) =>
-        RunJobsAndGetImpl(topLevel).DragDrop(point, type, data, effects, modifiers);
+        RunJobsAndGetImpl(topLevel)?.DragDrop(point, type, data, effects, modifiers);
 
-    private static IHeadlessWindow RunJobsAndGetImpl(this TopLevel topLevel)
+    private static IHeadlessWindow? RunJobsAndGetImpl(this TopLevel topLevel)
     {
         Dispatcher.UIThread.RunJobs();
         return GetImpl(topLevel);
     }
 
-    private static IHeadlessWindow GetImpl(this TopLevel topLevel)
+    private static IHeadlessWindow? GetImpl(this TopLevel topLevel)
     {
-        return topLevel.PlatformImpl as IHeadlessWindow ??
-               throw new InvalidOperationException("TopLevel must be a headless window.");
+        return topLevel.PlatformImpl as IHeadlessWindow;
     }
 }
