variables:
- group: BuildCrossCheck

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: CmdLine@2
    displayName: 'Install CastXML'
    inputs:
      script: |
        sudo apt-get update
        sudo apt-get install castxml

  - template: build/managed-build-and-test.yml
      inputs:
        target: CiAzureLinux
     
- job: macOS
  pool:
    vmImage: 'xcode9-macos10.13'
  steps:
  - task: Xcode@5
    inputs:
      actions: 'build'
      scheme: ''
      sdk: 'macosx10.13'
      configuration: 'Release'
      xcWorkspacePath: '**/*.xcodeproj/project.xcworkspace'
      xcodeVersion: 'default' # Options: 8, 9, default, specifyPath
      args: '-derivedDataPath ./'

  - task: CmdLine@2
    displayName: 'Install CastXML'
    inputs:
      script: brew install castxml

  - template: build/managed-build-and-test.yml
      inputs:
        target: CiAzureOSX
  
  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.SourcesDirectory)/Build/Products/Release/'
      artifactName: 'Avalonia.Native.OSX'
    condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
    
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/artifacts/nuget'
      artifactName: 'NuGetOSX'
    condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  steps:
  
  - template: build/managed-build-and-test.yml
      inputs:
        target: CiAzureWindows
  - task: gep13.chocolatey-azuredevops.chocolatey-azuredevops.ChocolateyCommand@0
    displayName: 'Install BuildCrossCheck'
    inputs:
      command: install
      installPackageId: 'BCC-MSBuildLog BCC-Submission'
      installInstallArgs: '--no-progress '

  - task: CmdLine@2
    displayName: 'Upload MSBuild Log to BuildCrossCheck'
    inputs:
      env: 
        SOURCE_FOLDER: $(Build.SourcesDirectory)
        REPO_NAME: 'AvaloniaUI/Avalonia'
        COMMIT_ID: $(Build.SourceVersion)
        BCC_TOKEN: $(BCC-Key-Avalonia)
      script: |
        BCCMSBuildLog --input avalonia.binlog --output artifacts/checkrun.json --cloneRoot "%SOURCE_FOLDER%" --ownerRepo %REPO_NAME% --hash %COMMIT_ID%
        BCCSubmission -i artifacts/checkrun.json -h %COMMIT_ID% -t %BCC_TOKEN%

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.SourcesDirectory)/artifacts/nuget'
      artifactName: 'NuGet'
    condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(Build.SourcesDirectory)/artifacts/zip'
      artifactName: 'Samples'
    condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
