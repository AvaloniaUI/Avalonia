//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia.DesignerSupport
{
    public partial class DesignWindowLoader
    {
        public DesignWindowLoader() { }
        public static Avalonia.Controls.Window LoadDesignerWindow(string xaml, string assemblyPath, string xamlFileProjectPath) { throw null; }
    }
}
namespace Avalonia.DesignerSupport.Remote
{
    public partial class RemoteDesignerEntryPoint
    {
        public RemoteDesignerEntryPoint() { }
        public static void Main(string[] cmdline) { }
    }
}
namespace Avalonia.DesignerSupport.Remote.HtmlTransport
{
    public partial class HtmlWebSocketTransport : Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection, System.IDisposable
    {
        public HtmlWebSocketTransport(Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection signalTransport, System.Uri listenUri) { }
        public event System.Action<Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection, System.Exception> OnException { add { } remove { } }
        public event System.Action<Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection, object> OnMessage { add { } remove { } }
        public void Dispose() { }
        public System.Threading.Tasks.Task Send(object data) { throw null; }
        public void Start() { }
    }
    public partial class SimpleWebSocket : System.IDisposable
    {
        internal SimpleWebSocket() { }
        public void Dispose() { }
        public System.Threading.Tasks.Task<Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketMessage> ReceiveMessage() { throw null; }
        public System.Threading.Tasks.Task SendMessage(bool isText, byte[] data) { throw null; }
        public System.Threading.Tasks.Task SendMessage(bool isText, byte[] data, int offset, int length) { throw null; }
        public System.Threading.Tasks.Task SendMessage(string text) { throw null; }
    }
    public partial class SimpleWebSocketHttpRequest : System.IDisposable
    {
        public SimpleWebSocketHttpRequest(System.Net.Sockets.NetworkStream stream, string path, System.Collections.Generic.Dictionary<string, string> headers) { }
        public System.Collections.Generic.Dictionary<string, string> Headers { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool IsWebsocketRequest { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string Path { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<string> WebSocketProtocols { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Threading.Tasks.Task<Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocket> AcceptWebSocket(string protocol = null) { throw null; }
        public void Dispose() { }
        public System.Threading.Tasks.Task RespondAsync(int code, byte[] data, string contentType) { throw null; }
    }
    public partial class SimpleWebSocketHttpServer : System.IDisposable
    {
        public SimpleWebSocketHttpServer(System.Net.IPAddress address, int port) { }
        public System.Threading.Tasks.Task<Avalonia.DesignerSupport.Remote.HtmlTransport.SimpleWebSocketHttpRequest> AcceptAsync() { throw null; }
        public void Dispose() { }
        public void Listen() { }
    }
    public partial class SimpleWebSocketMessage
    {
        public SimpleWebSocketMessage() { }
        public byte[] Data { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool IsText { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string AsString() { throw null; }
    }
}
