//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia.Controls
{
    public enum AlphaComponentPosition
    {
        Leading = 0,
        Trailing = 1,
    }
    public partial class ColorChangedEventArgs : System.EventArgs
    {
        public ColorChangedEventArgs(Avalonia.Media.Color oldColor, Avalonia.Media.Color newColor) { }
        public Avalonia.Media.Color NewColor { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Media.Color OldColor { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum ColorComponent
    {
        Alpha = 0,
        Component1 = 1,
        Component2 = 2,
        Component3 = 3,
    }
    public enum ColorModel
    {
        Hsva = 0,
        Rgba = 1,
    }
    public partial class ColorPicker : Avalonia.Controls.ColorView
    {
        public ColorPicker() { }
    }
    public enum ColorSpectrumComponents
    {
        HueValue = 0,
        ValueHue = 1,
        HueSaturation = 2,
        SaturationHue = 3,
        SaturationValue = 4,
        ValueSaturation = 5,
    }
    public enum ColorSpectrumShape
    {
        Box = 0,
        Ring = 1,
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HexTextBox", typeof(Avalonia.Controls.TextBox))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TabControl", typeof(Avalonia.Controls.TabControl))]
    public partial class ColorView : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ColorModel> ColorModelProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Color> ColorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ColorSpectrumComponents> ColorSpectrumComponentsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ColorSpectrumShape> ColorSpectrumShapeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.AlphaComponentPosition> HexInputAlphaPositionProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.HsvColor> HsvColorProperty;
        public static readonly Avalonia.StyledProperty<bool> IsAccentColorsVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsAlphaEnabledProperty;
        public static readonly Avalonia.StyledProperty<bool> IsAlphaVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsColorComponentsVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsColorModelVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsColorPaletteVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsColorPreviewVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsColorSpectrumSliderVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsColorSpectrumVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsComponentSliderVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsComponentTextInputVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsHexInputVisibleProperty;
        public static readonly Avalonia.StyledProperty<int> MaxHueProperty;
        public static readonly Avalonia.StyledProperty<int> MaxSaturationProperty;
        public static readonly Avalonia.StyledProperty<int> MaxValueProperty;
        public static readonly Avalonia.StyledProperty<int> MinHueProperty;
        public static readonly Avalonia.StyledProperty<int> MinSaturationProperty;
        public static readonly Avalonia.StyledProperty<int> MinValueProperty;
        public static readonly Avalonia.StyledProperty<System.Collections.Generic.IEnumerable<Avalonia.Media.Color>?> PaletteColorsProperty;
        public static readonly Avalonia.StyledProperty<int> PaletteColumnCountProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.IColorPalette?> PaletteProperty;
        public static readonly Avalonia.StyledProperty<int> SelectedIndexProperty;
        protected bool _ignorePropertyChanged;
        public ColorView() { }
        public Avalonia.Media.Color Color { get { throw null; } set { } }
        public Avalonia.Controls.ColorModel ColorModel { get { throw null; } set { } }
        public Avalonia.Controls.ColorSpectrumComponents ColorSpectrumComponents { get { throw null; } set { } }
        public Avalonia.Controls.ColorSpectrumShape ColorSpectrumShape { get { throw null; } set { } }
        public Avalonia.Controls.AlphaComponentPosition HexInputAlphaPosition { get { throw null; } set { } }
        public Avalonia.Media.HsvColor HsvColor { get { throw null; } set { } }
        public bool IsAccentColorsVisible { get { throw null; } set { } }
        public bool IsAlphaEnabled { get { throw null; } set { } }
        public bool IsAlphaVisible { get { throw null; } set { } }
        public bool IsColorComponentsVisible { get { throw null; } set { } }
        public bool IsColorModelVisible { get { throw null; } set { } }
        public bool IsColorPaletteVisible { get { throw null; } set { } }
        public bool IsColorPreviewVisible { get { throw null; } set { } }
        public bool IsColorSpectrumSliderVisible { get { throw null; } set { } }
        public bool IsColorSpectrumVisible { get { throw null; } set { } }
        public bool IsComponentSliderVisible { get { throw null; } set { } }
        public bool IsComponentTextInputVisible { get { throw null; } set { } }
        public bool IsHexInputVisible { get { throw null; } set { } }
        public int MaxHue { get { throw null; } set { } }
        public int MaxSaturation { get { throw null; } set { } }
        public int MaxValue { get { throw null; } set { } }
        public int MinHue { get { throw null; } set { } }
        public int MinSaturation { get { throw null; } set { } }
        public int MinValue { get { throw null; } set { } }
        public Avalonia.Controls.IColorPalette? Palette { get { throw null; } set { } }
        public System.Collections.Generic.IEnumerable<Avalonia.Media.Color>? PaletteColors { get { throw null; } set { } }
        public int PaletteColumnCount { get { throw null; } set { } }
        public int SelectedIndex { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.ColorChangedEventArgs>? ColorChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected virtual Avalonia.Media.Color OnCoerceColor(Avalonia.Media.Color value) { throw null; }
        protected virtual Avalonia.Media.HsvColor OnCoerceHsvColor(Avalonia.Media.HsvColor value) { throw null; }
        protected virtual void OnColorChanged(Avalonia.Controls.ColorChangedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected virtual void ValidateSelection() { }
    }
    public enum ColorViewTab
    {
        Spectrum = 0,
        Palette = 1,
        Components = 2,
    }
    public partial class FlatColorPalette : Avalonia.Controls.IColorPalette
    {
        public FlatColorPalette() { }
        public int ColorCount { get { throw null; } }
        public int ShadeCount { get { throw null; } }
        public Avalonia.Media.Color GetColor(int colorIndex, int shadeIndex) { throw null; }
        protected void InitColorChart() { }
        public enum FlatColor : uint
        {
            GreenSea10 = (uint)4278932293,
            Turquoise10 = (uint)4279132753,
            GreenSea9 = (uint)4279133781,
            Turquoise9 = (uint)4279335012,
            GreenSea8 = (uint)4279335525,
            GreenSea7 = (uint)4279471477,
            Nephritis10 = (uint)4279523890,
            Turquoise8 = (uint)4279537527,
            BelizeHole10 = (uint)4279583584,
            GreenSea6 = (uint)4279672965,
            MidnightBlue10 = (uint)4279705642,
            Turquoise7 = (uint)4279739785,
            Emerald10 = (uint)4279790139,
            Nephritis9 = (uint)4279856957,
            BelizeHole9 = (uint)4279915126,
            Turquoise6 = (uint)4279942300,
            WetAsphalt10 = (uint)4279969329,
            PeterRiver10 = (uint)4279979890,
            MidnightBlue9 = (uint)4280035379,
            Emerald9 = (uint)4280124232,
            Nephritis8 = (uint)4280190025,
            BelizeHole8 = (uint)4280246669,
            WetAsphalt9 = (uint)4280364860,
            MidnightBlue8 = (uint)4280364861,
            PeterRiver9 = (uint)4280377740,
            Nephritis7 = (uint)4280457556,
            Emerald8 = (uint)4280523606,
            BelizeHole7 = (uint)4280578467,
            MidnightBlue7 = (uint)4280760134,
            Nephritis6 = (uint)4280790624,
            WetAsphalt8 = (uint)4280825671,
            PeterRiver8 = (uint)4280841382,
            Emerald7 = (uint)4280857699,
            BelizeHole6 = (uint)4280910009,
            MidnightBlue6 = (uint)4281089616,
            WetAsphalt7 = (uint)4281221203,
            PeterRiver7 = (uint)4281239233,
            Emerald6 = (uint)4281257073,
            WetAsphalt6 = (uint)4281616734,
            PeterRiver6 = (uint)4281637083,
            Asbestos10 = (uint)4282534217,
            GreenSea5 = (uint)4282758045,
            Turquoise5 = (uint)4282960304,
            Wisteria10 = (uint)4283048794,
            Concrete10 = (uint)4283258454,
            Amethyst10 = (uint)4283510367,
            Asbestos9 = (uint)4283521626,
            Nephritis5 = (uint)4283612800,
            BelizeHole5 = (uint)4283734471,
            MidnightBlue5 = (uint)4283852147,
            Emerald5 = (uint)4284012173,
            Wisteria9 = (uint)4284165231,
            WetAsphalt5 = (uint)4284312958,
            PeterRiver5 = (uint)4284329442,
            Concrete9 = (uint)4284443242,
            Asbestos8 = (uint)4284574315,
            Silver10 = (uint)4284638567,
            Amethyst9 = (uint)4284692852,
            Pomegranate10 = (uint)4284751382,
            Wisteria8 = (uint)4285281411,
            Pumpkin10 = (uint)4285410304,
            Asbestos7 = (uint)4285561724,
            Concrete8 = (uint)4285627774,
            GreenSea4 = (uint)4285777590,
            Amethyst8 = (uint)4285940874,
            Turquoise4 = (uint)4285978564,
            Alizarin10 = (uint)4286064671,
            Carrot10 = (uint)4286071314,
            Silver9 = (uint)4286152063,
            Pomegranate9 = (uint)4286260252,
            Clouds10 = (uint)4286283133,
            Wisteria7 = (uint)4286397592,
            Sunflower10 = (uint)4286408200,
            Nephritis4 = (uint)4286434976,
            Orange10 = (uint)4286468361,
            Asbestos6 = (uint)4286549133,
            BelizeHole4 = (uint)4286559189,
            MidnightBlue4 = (uint)4286614422,
            Emerald4 = (uint)4286767274,
            Concrete7 = (uint)4286812562,
            WetAsphalt4 = (uint)4286943902,
            PeterRiver4 = (uint)4286956009,
            Pumpkin9 = (uint)4287051264,
            Amethyst7 = (uint)4287123104,
            Wisteria6 = (uint)4287513773,
            Silver8 = (uint)4287665303,
            Pomegranate8 = (uint)4287769377,
            Carrot9 = (uint)4287844630,
            Alizarin9 = (uint)4287901990,
            Concrete6 = (uint)4287997350,
            Clouds9 = (uint)4288125594,
            Asbestos5 = (uint)4288258980,
            Sunflower9 = (uint)4288314634,
            Amethyst6 = (uint)4288371126,
            Orange9 = (uint)4288439308,
            Pumpkin8 = (uint)4288692224,
            GreenSea = (uint)4288862670,
            GreenSea3 = (uint)4288862670,
            Turquoise = (uint)4288931031,
            Turquoise3 = (uint)4288931031,
            Wisteria5 = (uint)4289030589,
            Silver7 = (uint)4289113263,
            Pomegranate7 = (uint)4289278502,
            BelizeHole = (uint)4289318115,
            BelizeHole3 = (uint)4289318115,
            Nephritis = (uint)4289322943,
            Nephritis3 = (uint)4289322943,
            Concrete5 = (uint)4289378232,
            MidnightBlue = (uint)4289442489,
            MidnightBlue3 = (uint)4289442489,
            Emerald = (uint)4289457094,
            Emerald3 = (uint)4289457094,
            WetAsphalt = (uint)4289640127,
            WetAsphalt3 = (uint)4289640127,
            PeterRiver = (uint)4289648369,
            PeterRiver3 = (uint)4289648369,
            Carrot8 = (uint)4289683482,
            Amethyst5 = (uint)4289690309,
            Alizarin8 = (uint)4289739310,
            Asbestos4 = (uint)4289903291,
            Clouds8 = (uint)4289967799,
            Sunflower8 = (uint)4290221323,
            Orange8 = (uint)4290344718,
            Pumpkin7 = (uint)4290398720,
            Wisteria4 = (uint)4290482126,
            Silver6 = (uint)4290626503,
            Concrete4 = (uint)4290759114,
            Pomegranate6 = (uint)4290787627,
            Amethyst4 = (uint)4291009491,
            Carrot7 = (uint)4291456798,
            Silver5 = (uint)4291481554,
            Alizarin7 = (uint)4291511093,
            Asbestos = (uint)4291613137,
            Asbestos3 = (uint)4291613137,
            Pomegranate5 = (uint)4291649877,
            Clouds7 = (uint)4291875796,
            GreenSea2 = (uint)4291882215,
            Turquoise2 = (uint)4291949291,
            Wisteria = (uint)4291998942,
            Wisteria3 = (uint)4291998942,
            Pumpkin6 = (uint)4292039680,
            Sunflower7 = (uint)4292127757,
            BelizeHole2 = (uint)4292142833,
            Nephritis2 = (uint)4292145119,
            MidnightBlue2 = (uint)4292204764,
            Concrete = (uint)4292205531,
            Concrete3 = (uint)4292205531,
            Emerald2 = (uint)4292212195,
            Orange7 = (uint)4292249872,
            WetAsphalt2 = (uint)4292271071,
            PeterRiver2 = (uint)4292274936,
            Amethyst = (uint)4292328930,
            Amethyst3 = (uint)4292328930,
            Silver4 = (uint)4292336605,
            Pomegranate4 = (uint)4292446336,
            Pumpkin5 = (uint)4292638259,
            Pumpkin4 = (uint)4293236838,
            Silver = (uint)4293257193,
            Silver3 = (uint)4293257193,
            Asbestos2 = (uint)4293257448,
            Carrot6 = (uint)4293295650,
            Pomegranate = (uint)4293308586,
            Pomegranate3 = (uint)4293308586,
            Alizarin6 = (uint)4293348412,
            Wisteria2 = (uint)4293450479,
            GreenSea1 = (uint)4293457651,
            Turquoise1 = (uint)4293458165,
            Nephritis1 = (uint)4293523439,
            MidnightBlue1 = (uint)4293586158,
            Concrete2 = (uint)4293586413,
            BelizeHole1 = (uint)4293587704,
            Emerald1 = (uint)4293589745,
            Carrot5 = (uint)4293630030,
            Amethyst2 = (uint)4293648112,
            WetAsphalt1 = (uint)4293651951,
            PeterRiver1 = (uint)4293654011,
            Alizarin5 = (uint)4293685347,
            Clouds6 = (uint)4293718257,
            Pumpkin = (uint)4293770137,
            Pumpkin3 = (uint)4293770137,
            Carrot4 = (uint)4293964410,
            Clouds5 = (uint)4293981172,
            Alizarin4 = (uint)4294022282,
            Sunflower6 = (uint)4294034447,
            Pomegranate2 = (uint)4294105045,
            Silver2 = (uint)4294112244,
            Asbestos1 = (uint)4294112500,
            Orange6 = (uint)4294155282,
            Sunflower5 = (uint)4294234175,
            Wisteria1 = (uint)4294241527,
            Concrete1 = (uint)4294244086,
            Clouds4 = (uint)4294244087,
            Orange5 = (uint)4294291521,
            Alizarin = (uint)4294293425,
            Alizarin3 = (uint)4294293425,
            Carrot = (uint)4294298535,
            Carrot3 = (uint)4294298535,
            Amethyst1 = (uint)4294307576,
            Pumpkin2 = (uint)4294368716,
            Sunflower4 = (uint)4294433903,
            Clouds = (uint)4294441465,
            Clouds3 = (uint)4294441465,
            Orange4 = (uint)4294493297,
            Silver1 = (uint)4294507001,
            Sunflower = (uint)4294567839,
            Sunflower3 = (uint)4294567839,
            Pomegranate1 = (uint)4294568938,
            Orange = (uint)4294629280,
            Orange3 = (uint)4294629280,
            Alizarin2 = (uint)4294630360,
            Carrot2 = (uint)4294632915,
            Pumpkin1 = (uint)4294700774,
            Clouds2 = (uint)4294704380,
            Sunflower2 = (uint)4294767567,
            Orange2 = (uint)4294831056,
            Alizarin1 = (uint)4294831596,
            Carrot1 = (uint)4294832873,
            Clouds1 = (uint)4294835966,
            Orange1 = (uint)4294899175,
            Sunflower1 = (uint)4294900199,
        }
    }
    public partial class FlatHalfColorPalette : Avalonia.Controls.IColorPalette
    {
        public FlatHalfColorPalette() { }
        public int ColorCount { get { throw null; } }
        public int ShadeCount { get { throw null; } }
        public Avalonia.Media.Color GetColor(int colorIndex, int shadeIndex) { throw null; }
        protected void InitColorChart() { }
    }
    public partial class FluentColorPalette : Avalonia.Controls.IColorPalette
    {
        public FluentColorPalette() { }
        public int ColorCount { get { throw null; } }
        public int ShadeCount { get { throw null; } }
        public Avalonia.Media.Color GetColor(int colorIndex, int shadeIndex) { throw null; }
    }
    public enum HsvComponent
    {
        Alpha = 0,
        Hue = 1,
        Saturation = 2,
        Value = 3,
    }
    public partial interface IColorPalette
    {
        int ColorCount { get; }
        int ShadeCount { get; }
        Avalonia.Media.Color GetColor(int colorIndex, int shadeIndex);
    }
    public partial class MaterialColorPalette : Avalonia.Controls.IColorPalette
    {
        public MaterialColorPalette() { }
        public int ColorCount { get { throw null; } }
        public int ShadeCount { get { throw null; } }
        public Avalonia.Media.Color GetColor(int colorIndex, int shadeIndex) { throw null; }
        protected void InitColorChart() { }
        public enum MaterialColor : uint
        {
            Black = (uint)4278190080,
            Teal900 = (uint)4278209856,
            Cyan900 = (uint)4278214756,
            Teal800 = (uint)4278217052,
            Teal700 = (uint)4278221163,
            Cyan800 = (uint)4278223759,
            Teal600 = (uint)4278225275,
            LightBlueA700 = (uint)4278227434,
            Teal500 = (uint)4278228616,
            Cyan700 = (uint)4278228903,
            Cyan600 = (uint)4278234305,
            LightBlueA400 = (uint)4278235391,
            CyanA700 = (uint)4278237396,
            Cyan500 = (uint)4278238420,
            TealA700 = (uint)4278239141,
            GreenA700 = (uint)4278241363,
            CyanA400 = (uint)4278248959,
            GreenA400 = (uint)4278249078,
            LightBlue900 = (uint)4278278043,
            LightBlue800 = (uint)4278351805,
            LightBlue700 = (uint)4278356177,
            LightBlue600 = (uint)4278426597,
            LightBlue500 = (uint)4278430196,
            Blue900 = (uint)4279060385,
            Blue800 = (uint)4279592384,
            CyanA200 = (uint)4279828479,
            Blue700 = (uint)4279858898,
            Indigo900 = (uint)4279903102,
            Green900 = (uint)4279983648,
            TealA400 = (uint)4280150454,
            Blue600 = (uint)4280191205,
            Gray900 = (uint)4280361249,
            Blue500 = (uint)4280391411,
            BlueGray900 = (uint)4280693304,
            Teal400 = (uint)4280723098,
            Cyan400 = (uint)4280731354,
            Indigo800 = (uint)4280825235,
            BlueA700 = (uint)4280902399,
            BlueA400 = (uint)4280908287,
            LightBlue400 = (uint)4280923894,
            Green800 = (uint)4281236786,
            Indigo700 = (uint)4281352095,
            IndigoA700 = (uint)4281356286,
            DeepPurple900 = (uint)4281408402,
            LightGreen900 = (uint)4281559326,
            BlueGray800 = (uint)4281812815,
            Green700 = (uint)4281896508,
            Indigo600 = (uint)4281944491,
            IndigoA400 = (uint)4282211070,
            Brown900 = (uint)4282263331,
            Indigo500 = (uint)4282339765,
            LightBlueA200 = (uint)4282434815,
            Gray800 = (uint)4282532418,
            Blue400 = (uint)4282557941,
            Green600 = (uint)4282622023,
            BlueA200 = (uint)4282682111,
            DeepPurple800 = (uint)4282722208,
            BlueGray700 = (uint)4282735204,
            Purple900 = (uint)4283045004,
            Green500 = (uint)4283215696,
            Teal300 = (uint)4283283116,
            Cyan300 = (uint)4283289825,
            Brown800 = (uint)4283315246,
            LightBlue300 = (uint)4283417591,
            DeepPurple700 = (uint)4283510184,
            IndigoA200 = (uint)4283657726,
            BlueGray600 = (uint)4283723386,
            LightGreen800 = (uint)4283796271,
            Indigo400 = (uint)4284246976,
            Brown700 = (uint)4284301367,
            DeepPurple600 = (uint)4284364209,
            BlueGray500 = (uint)4284513675,
            Gray700 = (uint)4284572001,
            DeepPurpleA700 = (uint)4284612842,
            Blue300 = (uint)4284790262,
            LightGreenA700 = (uint)4284800279,
            TealA200 = (uint)4284809178,
            DeepPurpleA400 = (uint)4284817407,
            Green400 = (uint)4284922730,
            DeepPurple500 = (uint)4284955319,
            LightGreen700 = (uint)4285046584,
            GreenA200 = (uint)4285132974,
            Purple800 = (uint)4285143962,
            Brown600 = (uint)4285353025,
            Gray600 = (uint)4285887861,
            LightGreenA400 = (uint)4285988611,
            BlueGray400 = (uint)4286091420,
            Brown500 = (uint)4286141768,
            Indigo300 = (uint)4286154443,
            Purple700 = (uint)4286259106,
            DeepPurpleA200 = (uint)4286336511,
            LightGreen600 = (uint)4286362434,
            DeepPurple400 = (uint)4286470082,
            Teal200 = (uint)4286630852,
            LightBlueA100 = (uint)4286634239,
            Cyan200 = (uint)4286635754,
            Green300 = (uint)4286695300,
            LightBlue200 = (uint)4286698746,
            Lime900 = (uint)4286740247,
            BlueA100 = (uint)4286755327,
            CyanA100 = (uint)4286906367,
            Pink900 = (uint)4287106639,
            LightGreen500 = (uint)4287349578,
            IndigoA100 = (uint)4287405823,
            Brown400 = (uint)4287458915,
            Purple600 = (uint)4287505578,
            BlueGray300 = (uint)4287669422,
            Blue200 = (uint)4287679225,
            DeepPurple300 = (uint)4287985101,
            Purple500 = (uint)4288423856,
            LightGreen400 = (uint)4288466021,
            Lime800 = (uint)4288584996,
            Gray500 = (uint)4288585374,
            Indigo200 = (uint)4288653530,
            Brown300 = (uint)4288776319,
            Green200 = (uint)4289058471,
            TealA100 = (uint)4289200107,
            PurpleA700 = (uint)4289331455,
            Purple400 = (uint)4289415100,
            Pink800 = (uint)4289533015,
            LightGreen300 = (uint)4289648001,
            LimeA700 = (uint)4289653248,
            Lime700 = (uint)4289705003,
            BlueGray200 = (uint)4289773253,
            Teal100 = (uint)4289912795,
            Cyan100 = (uint)4289915890,
            LightGreenA200 = (uint)4289920857,
            DeepPurpleA100 = (uint)4289956095,
            DeepPurple200 = (uint)4289961435,
            LightBlue100 = (uint)4289979900,
            Red900 = (uint)4290190364,
            GreenA100 = (uint)4290377418,
            Purple300 = (uint)4290406600,
            Blue100 = (uint)4290502395,
            Brown200 = (uint)4290554532,
            Gray400 = (uint)4290624957,
            DeepOrange900 = (uint)4290721292,
            Lime600 = (uint)4290824755,
            Pink700 = (uint)4290910299,
            PinkA700 = (uint)4291105122,
            Indigo100 = (uint)4291152617,
            LightGreen200 = (uint)4291158437,
            Red800 = (uint)4291176488,
            LimeA400 = (uint)4291231488,
            Green100 = (uint)4291356361,
            LightGreenA100 = (uint)4291624848,
            Lime500 = (uint)4291681337,
            Purple200 = (uint)4291728344,
            BlueGray100 = (uint)4291811548,
            DeepPurple100 = (uint)4291937513,
            Red700 = (uint)4292030255,
            Lime400 = (uint)4292141399,
            RedA700 = (uint)4292149248,
            PurpleA400 = (uint)4292149497,
            Brown100 = (uint)4292332744,
            Pink600 = (uint)4292352864,
            DeepOrange800 = (uint)4292363029,
            Lime300 = (uint)4292667253,
            LightGreen100 = (uint)4292668872,
            DeepOrangeA700 = (uint)4292684800,
            PurpleA200 = (uint)4292886779,
            Gray300 = (uint)4292927712,
            Teal50 = (uint)4292932337,
            Cyan50 = (uint)4292933626,
            Purple100 = (uint)4292984551,
            LightBlue50 = (uint)4292998654,
            Blue50 = (uint)4293128957,
            Red600 = (uint)4293212469,
            Red300 = (uint)4293227379,
            DeepOrange700 = (uint)4293282329,
            Orange900 = (uint)4293284096,
            Lime200 = (uint)4293324444,
            Indigo50 = (uint)4293454582,
            Green50 = (uint)4293457385,
            Pink500 = (uint)4293467747,
            PurpleA100 = (uint)4293558524,
            Pink400 = (uint)4293673082,
            BlueGray50 = (uint)4293718001,
            DeepPurple50 = (uint)4293781494,
            Gray200 = (uint)4293848814,
            LimeA200 = (uint)4293852993,
            Red400 = (uint)4293874512,
            Orange800 = (uint)4293880832,
            Red200 = (uint)4293892762,
            Brown50 = (uint)4293913577,
            Pink300 = (uint)4293943954,
            Lime100 = (uint)4293981379,
            LightGreen50 = (uint)4294047977,
            Purple50 = (uint)4294174197,
            Red500 = (uint)4294198070,
            DeepOrange600 = (uint)4294201630,
            Pink200 = (uint)4294217649,
            LimeA100 = (uint)4294246273,
            PinkA400 = (uint)4294246487,
            Orange700 = (uint)4294278144,
            Yellow900 = (uint)4294278935,
            Gray100 = (uint)4294309365,
            Pink100 = (uint)4294491088,
            Yellow800 = (uint)4294551589,
            Lime50 = (uint)4294573031,
            Gray50 = (uint)4294638330,
            Orange600 = (uint)4294675456,
            Yellow700 = (uint)4294688813,
            DeepOrange50 = (uint)4294699495,
            Pink50 = (uint)4294763756,
            Yellow600 = (uint)4294826037,
            RedA400 = (uint)4294907716,
            DeepOrangeA400 = (uint)4294917376,
            PinkA200 = (uint)4294918273,
            RedA200 = (uint)4294922834,
            DeepOrange500 = (uint)4294924066,
            OrangeA700 = (uint)4294929664,
            DeepOrangeA200 = (uint)4294929984,
            Amber900 = (uint)4294930176,
            DeepOrange400 = (uint)4294930499,
            PinkA100 = (uint)4294934699,
            DeepOrange300 = (uint)4294937189,
            RedA100 = (uint)4294937216,
            Amber800 = (uint)4294938368,
            OrangeA400 = (uint)4294938880,
            Orange500 = (uint)4294940672,
            DeepOrangeA100 = (uint)4294942336,
            Amber700 = (uint)4294942720,
            Orange400 = (uint)4294944550,
            AmberA700 = (uint)4294945536,
            OrangeA200 = (uint)4294945600,
            DeepOrange200 = (uint)4294945681,
            Amber600 = (uint)4294947584,
            Orange300 = (uint)4294948685,
            Amber500 = (uint)4294951175,
            AmberA400 = (uint)4294951936,
            Amber400 = (uint)4294953512,
            Orange200 = (uint)4294954112,
            DeepOrange100 = (uint)4294954172,
            Red100 = (uint)4294954450,
            OrangeA100 = (uint)4294955392,
            Amber300 = (uint)4294956367,
            YellowA700 = (uint)4294956544,
            AmberA200 = (uint)4294956864,
            Amber200 = (uint)4294959234,
            Orange100 = (uint)4294959282,
            AmberA100 = (uint)4294960511,
            YellowA400 = (uint)4294961664,
            Yellow500 = (uint)4294961979,
            Red50 = (uint)4294962158,
            Amber100 = (uint)4294962355,
            Yellow400 = (uint)4294962776,
            Yellow300 = (uint)4294963574,
            Orange50 = (uint)4294964192,
            Yellow200 = (uint)4294964637,
            Amber50 = (uint)4294965473,
            Yellow100 = (uint)4294965700,
            Yellow50 = (uint)4294966759,
            YellowA200 = (uint)4294967040,
            YellowA100 = (uint)4294967181,
            White = (uint)4294967295,
        }
    }
    public partial class MaterialHalfColorPalette : Avalonia.Controls.IColorPalette
    {
        public MaterialHalfColorPalette() { }
        public int ColorCount { get { throw null; } }
        public int ShadeCount { get { throw null; } }
        public Avalonia.Media.Color GetColor(int colorIndex, int shadeIndex) { throw null; }
        protected void InitColorChart() { }
    }
    public enum RgbComponent
    {
        Alpha = 0,
        Red = 1,
        Green = 2,
        Blue = 3,
    }
    public partial class SixteenColorPalette : Avalonia.Controls.IColorPalette
    {
        public SixteenColorPalette() { }
        public int ColorCount { get { throw null; } }
        public int ShadeCount { get { throw null; } }
        public Avalonia.Media.Color GetColor(int colorIndex, int shadeIndex) { throw null; }
    }
}
namespace Avalonia.Controls.Converters
{
    public partial class ColorToDisplayNameConverter : Avalonia.Data.Converters.IValueConverter
    {
        public ColorToDisplayNameConverter() { }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class ColorToHexConverter : Avalonia.Data.Converters.IValueConverter
    {
        public ColorToHexConverter() { }
        public Avalonia.Controls.AlphaComponentPosition AlphaPosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool IsAlphaVisible { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public static Avalonia.Media.Color? ParseHexString(string hexColor, Avalonia.Controls.AlphaComponentPosition alphaPosition) { throw null; }
        public static string ToHexString(Avalonia.Media.Color color, Avalonia.Controls.AlphaComponentPosition alphaPosition, bool includeAlpha = true, bool includeSymbol = false) { throw null; }
    }
    public partial class DoNothingForNullConverter : Avalonia.Data.Converters.IValueConverter
    {
        public DoNothingForNullConverter() { }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class ToBrushConverter : Avalonia.Data.Converters.IValueConverter
    {
        public ToBrushConverter() { }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class ToColorConverter : Avalonia.Data.Converters.IValueConverter
    {
        public ToColorConverter() { }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
}
namespace Avalonia.Controls.Primitives
{
    public static partial class ColorHelper
    {
        public static bool ToDisplayNameExists { get { throw null; } }
        public static double GetRelativeLuminance(Avalonia.Media.Color color) { throw null; }
        public static string ToDisplayName(Avalonia.Media.Color color) { throw null; }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_AccentDecrement1Border", typeof(Avalonia.Controls.Border))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_AccentDecrement2Border", typeof(Avalonia.Controls.Border))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_AccentIncrement1Border", typeof(Avalonia.Controls.Border))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_AccentIncrement2Border", typeof(Avalonia.Controls.Border))]
    public partial class ColorPreviewer : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.HsvColor> HsvColorProperty;
        public static readonly Avalonia.StyledProperty<bool> IsAccentColorsVisibleProperty;
        public ColorPreviewer() { }
        public Avalonia.Media.HsvColor HsvColor { get { throw null; } set { } }
        public bool IsAccentColorsVisible { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.ColorChangedEventArgs>? ColorChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected virtual void OnColorChanged(Avalonia.Controls.ColorChangedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":dark-selector", ":light-selector"})]
    public partial class ColorSlider : Avalonia.Controls.Slider
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ColorComponent> ColorComponentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ColorModel> ColorModelProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Color> ColorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.HsvColor> HsvColorProperty;
        protected bool ignorePropertyChanged;
        public static readonly Avalonia.StyledProperty<bool> IsAlphaMaxForcedProperty;
        public static readonly Avalonia.StyledProperty<bool> IsRoundingEnabledProperty;
        public static readonly Avalonia.StyledProperty<bool> IsSaturationValueMaxForcedProperty;
        protected const string pcDarkSelector = ":dark-selector";
        protected const string pcLightSelector = ":light-selector";
        public ColorSlider() { }
        public Avalonia.Media.Color Color { get { throw null; } set { } }
        public Avalonia.Controls.ColorComponent ColorComponent { get { throw null; } set { } }
        public Avalonia.Controls.ColorModel ColorModel { get { throw null; } set { } }
        public Avalonia.Media.HsvColor HsvColor { get { throw null; } set { } }
        public bool IsAlphaMaxForced { get { throw null; } set { } }
        public bool IsRoundingEnabled { get { throw null; } set { } }
        public bool IsSaturationValueMaxForced { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.ColorChangedEventArgs>? ColorChanged { add { } remove { } }
        protected virtual void OnColorChanged(Avalonia.Controls.ColorChangedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":pressed", ":large-selector", ":dark-selector", ":light-selector"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_InputTarget", typeof(Avalonia.Controls.Canvas))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_LayoutRoot", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SelectionEllipsePanel", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SizingPanel", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SpectrumEllipse", typeof(Avalonia.Controls.Shapes.Ellipse))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SpectrumOverlayEllipse", typeof(Avalonia.Controls.Shapes.Ellipse))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SpectrumOverlayRectangle", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SpectrumRectangle", typeof(Avalonia.Controls.Shapes.Rectangle))]
    public partial class ColorSpectrum : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Color> ColorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ColorSpectrumComponents> ComponentsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.HsvColor> HsvColorProperty;
        public static readonly Avalonia.StyledProperty<int> MaxHueProperty;
        public static readonly Avalonia.StyledProperty<int> MaxSaturationProperty;
        public static readonly Avalonia.StyledProperty<int> MaxValueProperty;
        public static readonly Avalonia.StyledProperty<int> MinHueProperty;
        public static readonly Avalonia.StyledProperty<int> MinSaturationProperty;
        public static readonly Avalonia.StyledProperty<int> MinValueProperty;
        protected const string pcDarkSelector = ":dark-selector";
        protected const string pcLargeSelector = ":large-selector";
        protected const string pcLightSelector = ":light-selector";
        protected const string pcPressed = ":pressed";
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ColorSpectrumShape> ShapeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.ColorSpectrum, Avalonia.Controls.ColorComponent> ThirdComponentProperty;
        public ColorSpectrum() { }
        public Avalonia.Media.Color Color { get { throw null; } set { } }
        public Avalonia.Controls.ColorSpectrumComponents Components { get { throw null; } set { } }
        public Avalonia.Media.HsvColor HsvColor { get { throw null; } set { } }
        public int MaxHue { get { throw null; } set { } }
        public int MaxSaturation { get { throw null; } set { } }
        public int MaxValue { get { throw null; } set { } }
        public int MinHue { get { throw null; } set { } }
        public int MinSaturation { get { throw null; } set { } }
        public int MinValue { get { throw null; } set { } }
        public Avalonia.Controls.ColorSpectrumShape Shape { get { throw null; } set { } }
        public Avalonia.Controls.ColorComponent ThirdComponent { get { throw null; } }
        public event System.EventHandler<Avalonia.Controls.ColorChangedEventArgs>? ColorChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerExited(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public void RaiseColorChanged() { }
    }
}
namespace Avalonia.Controls.Primitives.Converters
{
    public partial class AccentColorConverter : Avalonia.Data.Converters.IValueConverter
    {
        public const double ValueDelta = 0.1;
        public AccentColorConverter() { }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public static Avalonia.Media.HsvColor GetAccent(Avalonia.Media.HsvColor hsvColor, int accentStep) { throw null; }
    }
    public partial class ContrastBrushConverter : Avalonia.Data.Converters.IValueConverter
    {
        public ContrastBrushConverter() { }
        public byte AlphaThreshold { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
}
namespace CompiledAvaloniaXaml
{
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class !AvaloniaResources
    {
        internal !AvaloniaResources() { }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Fluent/ColorPicker.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Fluent/ColorPreviewer.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Fluent/ColorSlider.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Fluent/ColorSpectrum.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Fluent/ColorView.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Styling.Styles Build:/Themes/Fluent/Fluent.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Simple/ColorPicker.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Simple/ColorPreviewer.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Simple/ColorSlider.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Simple/ColorSpectrum.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Controls.ResourceDictionary Build:/Themes/Simple/ColorView.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Styling.Styles Build:/Themes/Simple/Simple.xaml(System.IServiceProvider ) { throw null; }
        public static void Populate:/Themes/Fluent/ColorPicker.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Fluent/ColorPreviewer.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Fluent/ColorSlider.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Fluent/ColorSpectrum.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Fluent/ColorView.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Fluent/Fluent.xaml(System.IServiceProvider , Avalonia.Styling.Styles ) { }
        public static void Populate:/Themes/Simple/ColorPicker.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Simple/ColorPreviewer.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Simple/ColorSlider.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Simple/ColorSpectrum.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Simple/ColorView.xaml(System.IServiceProvider , Avalonia.Controls.ResourceDictionary ) { }
        public static void Populate:/Themes/Simple/Simple.xaml(System.IServiceProvider , Avalonia.Styling.Styles ) { }
        public partial class NamespaceInfo:/Themes/Fluent/ColorPicker.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Fluent/ColorPicker.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Fluent/ColorPreviewer.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Fluent/ColorPreviewer.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Fluent/ColorSlider.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Fluent/ColorSlider.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Fluent/ColorSpectrum.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Fluent/ColorSpectrum.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Fluent/ColorView.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Fluent/ColorView.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Fluent/Fluent.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Fluent/Fluent.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Simple/ColorPicker.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Simple/ColorPicker.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Simple/ColorPreviewer.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Simple/ColorPreviewer.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Simple/ColorSlider.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Simple/ColorSlider.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Simple/ColorSpectrum.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Simple/ColorSpectrum.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Simple/ColorView.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Simple/ColorView.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Simple/Simple.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Simple/Simple.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class !XamlLoader
    {
        internal !XamlLoader() { }
        public static object TryLoad(System.IServiceProvider , string ) { throw null; }
        public static object TryLoad(string ) { throw null; }
    }
}
