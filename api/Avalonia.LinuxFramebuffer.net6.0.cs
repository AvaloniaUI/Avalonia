//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static partial class LinuxFramebufferPlatformExtensions
{
    public static int StartLinuxDirect(this Avalonia.AppBuilder builder, string[] args, Avalonia.LinuxFramebuffer.Output.IOutputBackend outputBackend, Avalonia.LinuxFramebuffer.Input.IInputBackend? inputBackend = null) { throw null; }
    public static int StartLinuxDrm(this Avalonia.AppBuilder builder, string[] args, string? card = null, bool connectorsForceProbe = false, Avalonia.LinuxFramebuffer.DrmOutputOptions? options = null, Avalonia.LinuxFramebuffer.Input.IInputBackend? inputBackend = null) { throw null; }
    public static int StartLinuxDrm(this Avalonia.AppBuilder builder, string[] args, string? card = null, double scaling = 1, Avalonia.LinuxFramebuffer.Input.IInputBackend? inputBackend = null) { throw null; }
    public static int StartLinuxFbDev(this Avalonia.AppBuilder builder, string[] args, string? fbdev = null, double scaling = 1, Avalonia.LinuxFramebuffer.Input.IInputBackend? inputBackend = null) { throw null; }
    public static int StartLinuxFbDev(this Avalonia.AppBuilder builder, string[] args, string fbdev, Avalonia.Platform.PixelFormat? format, double scaling, Avalonia.LinuxFramebuffer.Input.IInputBackend? inputBackend = null) { throw null; }
}
namespace Avalonia.LinuxFramebuffer
{
    public partial class DrmOutputOptions
    {
        public DrmOutputOptions() { }
        public bool EnableInitialBufferSwapping { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Media.Color InitialBufferSwappingColor { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double Scaling { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.PixelSize? VideoMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public sealed partial class FbdevOutput : Avalonia.Controls.Platform.Surfaces.IFramebufferPlatformSurface, Avalonia.LinuxFramebuffer.Output.IOutputBackend, System.IDisposable
    {
        public FbdevOutput(string fileName = null) { }
        public FbdevOutput(string fileName, Avalonia.Platform.PixelFormat? format) { }
        public string Id { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.PixelSize PixelSize { get { throw null; } }
        public double Scaling { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public void Dispose() { }
        ~FbdevOutput() { }
        public Avalonia.Platform.ILockedFramebuffer Lock() { throw null; }
    }
    public partial class LinuxFramebufferPlatformOptions
    {
        public LinuxFramebufferPlatformOptions() { }
        public int Fps { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
}
namespace Avalonia.LinuxFramebuffer.Input
{
    public partial interface IInputBackend
    {
        void Initialize(Avalonia.LinuxFramebuffer.Input.IScreenInfoProvider info, System.Action<Avalonia.Input.Raw.RawInputEventArgs> onInput);
        void SetInputRoot(Avalonia.Input.IInputRoot root);
    }
    public partial interface IScreenInfoProvider
    {
        Avalonia.Size ScaledSize { get; }
    }
}
namespace Avalonia.LinuxFramebuffer.Input.EvDev
{
    public partial class EvDevBackend : Avalonia.LinuxFramebuffer.Input.IInputBackend
    {
        public EvDevBackend(Avalonia.LinuxFramebuffer.Input.EvDev.EvDevDeviceDescription[] devices) { }
        public static Avalonia.LinuxFramebuffer.Input.EvDev.EvDevBackend CreateFromEnvironment() { throw null; }
        public void Initialize(Avalonia.LinuxFramebuffer.Input.IScreenInfoProvider info, System.Action<Avalonia.Input.Raw.RawInputEventArgs> onInput) { }
        public void SetInputRoot(Avalonia.Input.IInputRoot root) { }
    }
    public abstract partial class EvDevDeviceDescription
    {
        protected internal EvDevDeviceDescription() { }
        public string Path { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public sealed partial class EvDevTouchScreenDeviceDescription : Avalonia.LinuxFramebuffer.Input.EvDev.EvDevDeviceDescription
    {
        public EvDevTouchScreenDeviceDescription() { }
        public Avalonia.Matrix CalibrationMatrix { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
}
namespace Avalonia.LinuxFramebuffer.Input.LibInput
{
    public partial class LibInputBackend : Avalonia.LinuxFramebuffer.Input.IInputBackend
    {
        public LibInputBackend() { }
        public void Initialize(Avalonia.LinuxFramebuffer.Input.IScreenInfoProvider screen, System.Action<Avalonia.Input.Raw.RawInputEventArgs> onInput) { }
        public void SetInputRoot(Avalonia.Input.IInputRoot root) { }
    }
}
namespace Avalonia.LinuxFramebuffer.Input.NullInput
{
    public partial class NullInputBackend : Avalonia.LinuxFramebuffer.Input.IInputBackend
    {
        public NullInputBackend() { }
        public void Initialize(Avalonia.LinuxFramebuffer.Input.IScreenInfoProvider screen, System.Action<Avalonia.Input.Raw.RawInputEventArgs> onInput) { }
        public void SetInputRoot(Avalonia.Input.IInputRoot root) { }
    }
}
namespace Avalonia.LinuxFramebuffer.Output
{
    public partial class DrmCard : System.IDisposable
    {
        public DrmCard(string path = null) { }
        public int Fd { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public void Dispose() { }
        public Avalonia.LinuxFramebuffer.Output.DrmResources GetResources(bool connectorsForceProbe = false) { throw null; }
    }
    public partial class DrmConnector
    {
        internal DrmConnector() { }
        public Avalonia.LinuxFramebuffer.Output.DrmModeConnection Connection { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public uint Id { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Collections.Generic.List<Avalonia.LinuxFramebuffer.Output.DrmModeInfo> Modes { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Size SizeMm { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.LinuxFramebuffer.Output.DrmModeSubPixel SubPixel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum DrmModeConnection
    {
        DRM_MODE_CONNECTED = 1,
        DRM_MODE_DISCONNECTED = 2,
        DRM_MODE_UNKNOWNCONNECTION = 3,
    }
    public partial class DrmModeInfo
    {
        internal DrmModeInfo() { }
        public bool IsPreferred { get { throw null; } }
        public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.PixelSize Resolution { get { throw null; } }
    }
    public enum DrmModeSubPixel
    {
        DRM_MODE_SUBPIXEL_UNKNOWN = 1,
        DRM_MODE_SUBPIXEL_HORIZONTAL_RGB = 2,
        DRM_MODE_SUBPIXEL_HORIZONTAL_BGR = 3,
        DRM_MODE_SUBPIXEL_VERTICAL_RGB = 4,
        DRM_MODE_SUBPIXEL_VERTICAL_BGR = 5,
        DRM_MODE_SUBPIXEL_NONE = 6,
    }
    public partial class DrmOutput : Avalonia.LinuxFramebuffer.Output.IGlOutputBackend, Avalonia.LinuxFramebuffer.Output.IOutputBackend, Avalonia.OpenGL.Surfaces.IGlPlatformSurface
    {
        public DrmOutput(Avalonia.LinuxFramebuffer.Output.DrmCard card, Avalonia.LinuxFramebuffer.Output.DrmResources resources, Avalonia.LinuxFramebuffer.Output.DrmConnector connector, Avalonia.LinuxFramebuffer.Output.DrmModeInfo modeInfo) { }
        public DrmOutput(Avalonia.LinuxFramebuffer.Output.DrmCard card, Avalonia.LinuxFramebuffer.Output.DrmResources resources, Avalonia.LinuxFramebuffer.Output.DrmConnector connector, Avalonia.LinuxFramebuffer.Output.DrmModeInfo modeInfo, Avalonia.LinuxFramebuffer.DrmOutputOptions options = null) { }
        public DrmOutput(string path = null, bool connectorsForceProbe = false, Avalonia.LinuxFramebuffer.DrmOutputOptions options = null) { }
        public Avalonia.PixelSize PixelSize { get { throw null; } }
        public Avalonia.Platform.IPlatformGraphics PlatformGraphics { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public double Scaling { get { throw null; } set { } }
        public Avalonia.OpenGL.IGlContext CreateContext() { throw null; }
        public Avalonia.OpenGL.Surfaces.IGlPlatformSurfaceRenderTarget CreateGlRenderTarget() { throw null; }
        public Avalonia.OpenGL.Surfaces.IGlPlatformSurfaceRenderTarget CreateGlRenderTarget(Avalonia.OpenGL.IGlContext context) { throw null; }
    }
    public partial class DrmResources
    {
        public DrmResources(int fd, bool connectorsForceProbe = false) { }
        public System.Collections.Generic.List<Avalonia.LinuxFramebuffer.Output.DrmConnector> Connectors { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public void Dump() { }
    }
    public partial interface IGlOutputBackend : Avalonia.LinuxFramebuffer.Output.IOutputBackend
    {
        Avalonia.Platform.IPlatformGraphics PlatformGraphics { get; }
    }
    public partial interface IOutputBackend
    {
        Avalonia.PixelSize PixelSize { get; }
        double Scaling { get; set; }
    }
}
