//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia.Controls
{
    public abstract partial class ElementFactory : Avalonia.Controls.IElementFactory, Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>
    {
        protected ElementFactory() { }
        public Avalonia.Controls.Control Build(object? data) { throw null; }
        public Avalonia.Controls.Control GetElement(Avalonia.Controls.ElementFactoryGetArgs args) { throw null; }
        protected abstract Avalonia.Controls.Control GetElementCore(Avalonia.Controls.ElementFactoryGetArgs args);
        public bool Match(object? data) { throw null; }
        public void RecycleElement(Avalonia.Controls.ElementFactoryRecycleArgs args) { }
        protected abstract void RecycleElementCore(Avalonia.Controls.ElementFactoryRecycleArgs args);
    }
    public partial class ElementFactoryGetArgs
    {
        public ElementFactoryGetArgs() { }
        public object? Data { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public int Index { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Control? Parent { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial class ElementFactoryRecycleArgs
    {
        public ElementFactoryRecycleArgs() { }
        public Avalonia.Controls.Control? Element { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Control? Parent { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial interface IElementFactory : Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>
    {
        Avalonia.Controls.Control GetElement(Avalonia.Controls.ElementFactoryGetArgs args);
        void RecycleElement(Avalonia.Controls.ElementFactoryRecycleArgs args);
    }
    public partial class ItemsRepeater : Avalonia.Controls.Panel, Avalonia.LogicalTree.IChildIndexProvider
    {
        public static readonly Avalonia.StyledProperty<double> HorizontalCacheLengthProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ItemsRepeater, System.Collections.IEnumerable?> ItemsSourceProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> ItemTemplateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.AttachedLayout?> LayoutProperty;
        public static readonly Avalonia.StyledProperty<double> VerticalCacheLengthProperty;
        public ItemsRepeater() { }
        public double HorizontalCacheLength { get { throw null; } set { } }
        public System.Collections.IEnumerable? ItemsSource { get { throw null; } set { } }
        public Avalonia.Controls.ItemsSourceView? ItemsSourceView { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        [Avalonia.Metadata.InheritDataTypeFromItemsAttribute("ItemsSource")]
        public Avalonia.Controls.Templates.IDataTemplate? ItemTemplate { get { throw null; } set { } }
        public Avalonia.Layout.AttachedLayout? Layout { get { throw null; } set { } }
        public double VerticalCacheLength { get { throw null; } set { } }
        event System.EventHandler<Avalonia.LogicalTree.ChildIndexChangedEventArgs>? Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ItemsRepeaterElementClearingEventArgs>? ElementClearing { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ItemsRepeaterElementIndexChangedEventArgs>? ElementIndexChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ItemsRepeaterElementPreparedEventArgs>? ElementPrepared { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(Avalonia.LogicalTree.ILogical child) { throw null; }
        bool Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(out int count) { throw null; }
        public int GetElementIndex(Avalonia.Controls.Control element) { throw null; }
        public Avalonia.Controls.Control GetOrCreateElement(int index) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public Avalonia.Controls.Control? TryGetElement(int index) { throw null; }
    }
    public partial class ItemsRepeaterElementClearingEventArgs : System.EventArgs
    {
        internal ItemsRepeaterElementClearingEventArgs() { }
        public Avalonia.Controls.Control Element { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class ItemsRepeaterElementIndexChangedEventArgs : System.EventArgs
    {
        internal ItemsRepeaterElementIndexChangedEventArgs() { }
        public Avalonia.Controls.Control Element { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int NewIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int OldIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class ItemsRepeaterElementPreparedEventArgs
    {
        internal ItemsRepeaterElementPreparedEventArgs() { }
        public Avalonia.Controls.Control Element { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int Index { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class RecyclePool
    {
        public RecyclePool() { }
        public static Avalonia.Controls.RecyclePool? GetPoolInstance(Avalonia.Controls.Templates.IDataTemplate dataTemplate) { throw null; }
        public void PutElement(Avalonia.Controls.Control element, string key, Avalonia.Controls.Control? owner) { }
        public static void SetPoolInstance(Avalonia.Controls.Templates.IDataTemplate dataTemplate, Avalonia.Controls.RecyclePool value) { }
        public Avalonia.Controls.Control? TryGetElement(string key, Avalonia.Controls.Control? owner) { throw null; }
    }
    public partial class RecyclingElementFactory : Avalonia.Controls.ElementFactory
    {
        public RecyclingElementFactory() { }
        public Avalonia.Controls.RecyclePool RecyclePool { get { throw null; } set { } }
        public System.Collections.Generic.IDictionary<string, Avalonia.Controls.Templates.IDataTemplate> Templates { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.SelectTemplateEventArgs>? SelectTemplateKey { add { } remove { } }
        protected override Avalonia.Controls.Control GetElementCore(Avalonia.Controls.ElementFactoryGetArgs args) { throw null; }
        protected virtual string OnSelectTemplateKeyCore(object? dataContext, Avalonia.Controls.Control? owner) { throw null; }
        protected override void RecycleElementCore(Avalonia.Controls.ElementFactoryRecycleArgs args) { }
    }
    public partial class SelectTemplateEventArgs : System.EventArgs
    {
        public SelectTemplateEventArgs() { }
        public object? DataContext { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Control? Owner { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string? TemplateKey { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
}
namespace Avalonia.Layout
{
    public abstract partial class AttachedLayout : Avalonia.AvaloniaObject
    {
        public static readonly Avalonia.Utilities.WeakEvent<Avalonia.Layout.AttachedLayout, System.EventArgs> ArrangeInvalidatedWeakEvent;
        public static readonly Avalonia.Utilities.WeakEvent<Avalonia.Layout.AttachedLayout, System.EventArgs> MeasureInvalidatedWeakEvent;
        protected AttachedLayout() { }
        public string? LayoutId { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public event System.EventHandler? ArrangeInvalidated { add { } remove { } }
        public event System.EventHandler? MeasureInvalidated { add { } remove { } }
        public Avalonia.Size Arrange(Avalonia.Layout.LayoutContext context, Avalonia.Size finalSize) { throw null; }
        public void InitializeForContext(Avalonia.Layout.LayoutContext context) { }
        protected void InvalidateArrange() { }
        protected void InvalidateMeasure() { }
        public Avalonia.Size Measure(Avalonia.Layout.LayoutContext context, Avalonia.Size availableSize) { throw null; }
        public void UninitializeForContext(Avalonia.Layout.LayoutContext context) { }
    }
    [System.FlagsAttribute]
    public enum ElementRealizationOptions
    {
        None = 0,
        ForceCreate = 1,
        SuppressAutoRecycle = 2,
    }
    public partial class LayoutContext : Avalonia.AvaloniaObject
    {
        public LayoutContext() { }
        public object? LayoutState { get { throw null; } set { } }
        protected virtual object? LayoutStateCore { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public abstract partial class NonVirtualizingLayout : Avalonia.Layout.AttachedLayout
    {
        protected NonVirtualizingLayout() { }
        protected internal virtual Avalonia.Size ArrangeOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal virtual void InitializeForContextCore(Avalonia.Layout.LayoutContext context) { }
        protected internal abstract Avalonia.Size MeasureOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size availableSize);
        protected internal virtual void UninitializeForContextCore(Avalonia.Layout.LayoutContext context) { }
    }
    public abstract partial class NonVirtualizingLayoutContext : Avalonia.Layout.LayoutContext
    {
        protected NonVirtualizingLayoutContext() { }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Layout.Layoutable> Children { get { throw null; } }
        protected abstract System.Collections.Generic.IReadOnlyList<Avalonia.Layout.Layoutable> ChildrenCore { get; }
    }
    public partial class NonVirtualizingStackLayout : Avalonia.Layout.NonVirtualizingLayout
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> SpacingProperty;
        public NonVirtualizingStackLayout() { }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public double Spacing { get { throw null; } set { } }
        protected internal override Avalonia.Size ArrangeOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal override Avalonia.Size MeasureOverride(Avalonia.Layout.NonVirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
    }
    public partial class StackLayout : Avalonia.Layout.VirtualizingLayout
    {
        public static readonly Avalonia.StyledProperty<bool> DisableVirtualizationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> SpacingProperty;
        public StackLayout() { }
        public bool DisableVirtualization { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public double Spacing { get { throw null; } set { } }
        protected internal override Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal override void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
        protected internal override Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
        protected internal override void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected internal override void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
    }
    public partial class StackLayoutState
    {
        public StackLayoutState() { }
    }
    public partial class UniformGridLayout : Avalonia.Layout.VirtualizingLayout
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.UniformGridLayoutItemsJustification> ItemsJustificationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.UniformGridLayoutItemsStretch> ItemsStretchProperty;
        public static readonly Avalonia.StyledProperty<int> MaximumRowsOrColumnsProperty;
        public static readonly Avalonia.StyledProperty<double> MinColumnSpacingProperty;
        public static readonly Avalonia.StyledProperty<double> MinItemHeightProperty;
        public static readonly Avalonia.StyledProperty<double> MinItemWidthProperty;
        public static readonly Avalonia.StyledProperty<double> MinRowSpacingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public UniformGridLayout() { }
        public Avalonia.Layout.UniformGridLayoutItemsJustification ItemsJustification { get { throw null; } set { } }
        public Avalonia.Layout.UniformGridLayoutItemsStretch ItemsStretch { get { throw null; } set { } }
        public int MaximumRowsOrColumns { get { throw null; } set { } }
        public double MinColumnSpacing { get { throw null; } set { } }
        public double MinItemHeight { get { throw null; } set { } }
        public double MinItemWidth { get { throw null; } set { } }
        public double MinRowSpacing { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        protected internal override Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal override void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
        protected internal override Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
        protected internal override void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected internal override void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
    }
    public enum UniformGridLayoutItemsJustification
    {
        Start = 0,
        Center = 1,
        End = 2,
        SpaceAround = 3,
        SpaceBetween = 4,
        SpaceEvenly = 5,
    }
    public enum UniformGridLayoutItemsStretch
    {
        None = 0,
        Fill = 1,
        Uniform = 2,
    }
    public partial class UniformGridLayoutState
    {
        public UniformGridLayoutState() { }
    }
    public abstract partial class VirtualizingLayout : Avalonia.Layout.AttachedLayout
    {
        protected VirtualizingLayout() { }
        protected internal virtual Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal virtual void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
        protected internal abstract Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize);
        public void OnItemsChanged(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { }
        protected internal virtual void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { }
        protected internal virtual void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
    }
    public abstract partial class VirtualizingLayoutContext : Avalonia.Layout.LayoutContext
    {
        protected VirtualizingLayoutContext() { }
        public int ItemCount { get { throw null; } }
        public Avalonia.Point LayoutOrigin { get { throw null; } set { } }
        protected abstract Avalonia.Point LayoutOriginCore { get; set; }
        public Avalonia.Rect RealizationRect { get { throw null; } }
        public int RecommendedAnchorIndex { get { throw null; } }
        protected virtual int RecommendedAnchorIndexCore { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public object GetItemAt(int index) { throw null; }
        protected abstract object GetItemAtCore(int index);
        public Avalonia.Layout.Layoutable GetOrCreateElementAt(int index) { throw null; }
        public Avalonia.Layout.Layoutable GetOrCreateElementAt(int index, Avalonia.Layout.ElementRealizationOptions options) { throw null; }
        protected abstract Avalonia.Layout.Layoutable GetOrCreateElementAtCore(int index, Avalonia.Layout.ElementRealizationOptions options);
        protected abstract int ItemCountCore();
        protected abstract Avalonia.Rect RealizationRectCore();
        public void RecycleElement(Avalonia.Layout.Layoutable element) { }
        protected abstract void RecycleElementCore(Avalonia.Layout.Layoutable element);
    }
    public partial class VirtualLayoutContextAdapter : Avalonia.Layout.NonVirtualizingLayoutContext
    {
        public VirtualLayoutContextAdapter(Avalonia.Layout.VirtualizingLayoutContext virtualizingContext) { }
        protected override System.Collections.Generic.IReadOnlyList<Avalonia.Layout.Layoutable> ChildrenCore { get { throw null; } }
        protected override object? LayoutStateCore { get { throw null; } set { } }
    }
    public partial class WrapLayout : Avalonia.Layout.VirtualizingLayout
    {
        public static readonly Avalonia.StyledProperty<double> HorizontalSpacingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> VerticalSpacingProperty;
        public WrapLayout() { }
        public double HorizontalSpacing { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public double VerticalSpacing { get { throw null; } set { } }
        protected internal override Avalonia.Size ArrangeOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size finalSize) { throw null; }
        protected internal override void InitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
        protected internal override Avalonia.Size MeasureOverride(Avalonia.Layout.VirtualizingLayoutContext context, Avalonia.Size availableSize) { throw null; }
        protected internal override void OnItemsChangedCore(Avalonia.Layout.VirtualizingLayoutContext context, object? source, System.Collections.Specialized.NotifyCollectionChangedEventArgs args) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected internal override void UninitializeForContextCore(Avalonia.Layout.VirtualizingLayoutContext context) { }
    }
}
