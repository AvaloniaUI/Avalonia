//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia.ReactiveUI
{
    public static partial class AppBuilderExtensions
    {
        public static Avalonia.AppBuilder UseReactiveUI(this Avalonia.AppBuilder builder) { throw null; }
    }
    public partial class AutoDataTemplateBindingHook : ReactiveUI.IPropertyBindingHook
    {
        public AutoDataTemplateBindingHook() { }
        public bool ExecuteHook(object? source, object target, System.Func<ReactiveUI.IObservedChange<object, object>[]> getCurrentViewModelProperties, System.Func<ReactiveUI.IObservedChange<object, object>[]> getCurrentViewProperties, ReactiveUI.BindingDirection direction) { throw null; }
    }
    public sealed partial class AutoSuspendHelper : Splat.IEnableLogger, System.IDisposable
    {
        public AutoSuspendHelper(Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime lifetime) { }
        public void Dispose() { }
        public void OnFrameworkInitializationCompleted() { }
    }
    public partial class AvaloniaActivationForViewFetcher : ReactiveUI.IActivationForViewFetcher
    {
        public AvaloniaActivationForViewFetcher() { }
        public System.IObservable<bool> GetActivationForView(ReactiveUI.IActivatableView view) { throw null; }
        public int GetAffinityForView(System.Type view) { throw null; }
    }
    public static partial class AvaloniaObjectReactiveExtensions
    {
        public static System.Reactive.Subjects.ISubject<Avalonia.Data.BindingValue<object?>> GetBindingSubject(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty property, Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) { throw null; }
        public static System.Reactive.Subjects.ISubject<Avalonia.Data.BindingValue<T>> GetBindingSubject<T>(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty<T> property, Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) { throw null; }
        public static System.Reactive.Subjects.ISubject<object?> GetSubject(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty property, Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) { throw null; }
        public static System.Reactive.Subjects.ISubject<T> GetSubject<T>(this Avalonia.AvaloniaObject o, Avalonia.AvaloniaProperty<T> property, Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) { throw null; }
    }
    public partial class AvaloniaScheduler : System.Reactive.Concurrency.LocalScheduler
    {
        internal AvaloniaScheduler() { }
        public static readonly Avalonia.ReactiveUI.AvaloniaScheduler Instance;
        public override System.IDisposable Schedule<TState>(TState state, System.TimeSpan dueTime, System.Func<System.Reactive.Concurrency.IScheduler, TState, System.IDisposable> action) { throw null; }
    }
    public partial class ReactiveUserControl<TViewModel> : Avalonia.Controls.UserControl, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel> where TViewModel : class
    {
        public static readonly Avalonia.StyledProperty<TViewModel?> ViewModelProperty;
        public ReactiveUserControl() { }
        object? ReactiveUI.IViewFor.ViewModel { get { throw null; } set { } }
        public TViewModel? ViewModel { get { throw null; } set { } }
        protected override void OnDataContextChanged(System.EventArgs e) { }
    }
    public partial class ReactiveWindow<TViewModel> : Avalonia.Controls.Window, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel> where TViewModel : class
    {
        public static readonly Avalonia.StyledProperty<TViewModel?> ViewModelProperty;
        public ReactiveWindow() { }
        object? ReactiveUI.IViewFor.ViewModel { get { throw null; } set { } }
        public TViewModel? ViewModel { get { throw null; } set { } }
    }
    public partial class RoutedViewHost : Avalonia.Controls.TransitioningContentControl, Avalonia.INamed, Avalonia.Styling.IStyleable, ReactiveUI.IActivatableView, Splat.IEnableLogger
    {
        public static readonly Avalonia.StyledProperty<object?> DefaultContentProperty;
        public static readonly Avalonia.StyledProperty<ReactiveUI.RoutingState?> RouterProperty;
        public static readonly Avalonia.StyledProperty<string?> ViewContractProperty;
        public RoutedViewHost() { }
        System.Type Avalonia.Styling.IStyleable.StyleKey { get { throw null; } }
        public object? DefaultContent { get { throw null; } set { } }
        public ReactiveUI.RoutingState? Router { get { throw null; } set { } }
        public string? ViewContract { get { throw null; } set { } }
        public ReactiveUI.IViewLocator? ViewLocator { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial class ViewModelViewHost : Avalonia.Controls.TransitioningContentControl, Avalonia.INamed, Avalonia.Styling.IStyleable, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, Splat.IEnableLogger
    {
        public static readonly Avalonia.StyledProperty<object?> DefaultContentProperty;
        public static readonly Avalonia.StyledProperty<string?> ViewContractProperty;
        public static readonly Avalonia.AvaloniaProperty<object?> ViewModelProperty;
        public ViewModelViewHost() { }
        System.Type Avalonia.Styling.IStyleable.StyleKey { get { throw null; } }
        public object? DefaultContent { get { throw null; } set { } }
        public string? ViewContract { get { throw null; } set { } }
        public ReactiveUI.IViewLocator? ViewLocator { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? ViewModel { get { throw null; } set { } }
    }
}
