//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia.Markup.Xaml
{
    public static partial class AvaloniaXamlLoader
    {
        public static void Load(System.IServiceProvider? sp, object obj) { }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("AvaloniaXamlLoader.Load(uri, baseUri) dynamically loads referenced assembly with Avalonia resources.")]
        public static object Load(System.IServiceProvider? sp, System.Uri uri, System.Uri? baseUri = null) { throw null; }
        public static void Load(object obj) { }
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("AvaloniaXamlLoader.Load(uri, baseUri) dynamically loads referenced assembly with Avalonia resources.")]
        public static object Load(System.Uri uri, System.Uri? baseUri = null) { throw null; }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Property)]
    public sealed partial class ConstructorArgumentAttribute : System.Attribute
    {
        public ConstructorArgumentAttribute(string name) { }
    }
    public partial interface IProvideValueTarget
    {
        object TargetObject { get; }
        object TargetProperty { get; }
    }
    public partial interface IRootObjectProvider
    {
        object IntermediateRootObject { get; }
        object RootObject { get; }
    }
    public partial interface IUriContext
    {
        System.Uri BaseUri { get; set; }
    }
    public partial interface IXamlTypeResolver
    {
        [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("XamlTypeResolver might require unreferenced code.")]
        System.Type Resolve(string qualifiedTypeName);
    }
    public abstract partial class MarkupExtension
    {
        protected MarkupExtension() { }
        public abstract object ProvideValue(System.IServiceProvider serviceProvider);
    }
    public partial class RuntimeXamlLoaderConfiguration
    {
        public RuntimeXamlLoaderConfiguration() { }
        public bool DesignMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Reflection.Assembly? LocalAssembly { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool UseCompiledBindingsByDefault { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial class RuntimeXamlLoaderDocument
    {
        public RuntimeXamlLoaderDocument(System.IO.Stream stream) { }
        public RuntimeXamlLoaderDocument(object? rootInstance, System.IO.Stream stream) { }
        public RuntimeXamlLoaderDocument(object? rootInstance, string xaml) { }
        public RuntimeXamlLoaderDocument(string xaml) { }
        public RuntimeXamlLoaderDocument(System.Uri? baseUri, System.IO.Stream stream) { }
        public RuntimeXamlLoaderDocument(System.Uri? baseUri, object? rootInstance, System.IO.Stream stream) { }
        public RuntimeXamlLoaderDocument(System.Uri? baseUri, object? rootInstance, string xaml) { }
        public RuntimeXamlLoaderDocument(System.Uri? baseUri, string xaml) { }
        public System.Uri? BaseUri { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? RootInstance { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.IServiceProvider? ServiceProvider { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.IO.Stream XamlStream { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class XamlLoadException : System.Exception
    {
        public XamlLoadException() { }
        protected XamlLoadException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) { }
        public XamlLoadException(string message) { }
        public XamlLoadException(string message, System.Exception innerException) { }
    }
}
namespace Avalonia.Markup.Xaml.Converters
{
    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("XamlTypeResolver might require unreferenced code.")]
    public partial class AvaloniaPropertyTypeConverter : System.ComponentModel.TypeConverter
    {
        public AvaloniaPropertyTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public partial class AvaloniaUriTypeConverter : System.ComponentModel.TypeConverter
    {
        public AvaloniaUriTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public partial class BitmapTypeConverter : System.ComponentModel.TypeConverter
    {
        public BitmapTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public partial class ColorToBrushConverter : Avalonia.Data.Converters.IValueConverter
    {
        public ColorToBrushConverter() { }
        public static object? Convert(object? value, System.Type? targetType) { throw null; }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public static object? ConvertBack(object? value, System.Type? targetType) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class FontFamilyTypeConverter : System.ComponentModel.TypeConverter
    {
        public FontFamilyTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public partial class IconTypeConverter : System.ComponentModel.TypeConverter
    {
        public IconTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public partial class PointsListTypeConverter : System.ComponentModel.TypeConverter
    {
        public PointsListTypeConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Type sourceType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
    public partial class TimeSpanTypeConverter : System.ComponentModel.TimeSpanConverter
    {
        public TimeSpanTypeConverter() { }
        public override object? ConvertFrom(System.ComponentModel.ITypeDescriptorContext? context, System.Globalization.CultureInfo? culture, object value) { throw null; }
    }
}
namespace Avalonia.Markup.Xaml.MarkupExtensions
{
    public partial class CompiledBindingExtension : Avalonia.Data.BindingBase
    {
        public CompiledBindingExtension() { }
        public CompiledBindingExtension(Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPath path) { }
        public System.Type? DataType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Markup.Xaml.ConstructorArgumentAttribute("path")]
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPath Path { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? Source { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindingExtension ProvideValue(System.IServiceProvider provider) { throw null; }
    }
    public partial class DynamicResourceExtension : Avalonia.Data.IBinding
    {
        public DynamicResourceExtension() { }
        public DynamicResourceExtension(object resourceKey) { }
        public object? ResourceKey { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        Avalonia.Data.InstancedBinding? Avalonia.Data.IBinding.Initiate(Avalonia.AvaloniaObject target, Avalonia.AvaloniaProperty? targetProperty, object? anchor, bool enableDataValidation) { throw null; }
        public Avalonia.Data.IBinding ProvideValue(System.IServiceProvider serviceProvider) { throw null; }
    }
    public partial class On : Avalonia.Markup.Xaml.MarkupExtensions.On<object>
    {
        public On() { }
    }
    public sealed partial class OnFormFactorExtension : Avalonia.Markup.Xaml.MarkupExtensions.OnFormFactorExtensionBase<object, Avalonia.Markup.Xaml.MarkupExtensions.On>
    {
        public OnFormFactorExtension() { }
        public OnFormFactorExtension(object defaultValue) { }
        public static bool ShouldProvideOption(System.IServiceProvider serviceProvider, Avalonia.Platform.FormFactorType option) { throw null; }
    }
    public abstract partial class OnFormFactorExtensionBase<TReturn, TOn> : Avalonia.Metadata.IAddChild<TOn> where TOn : Avalonia.Markup.Xaml.MarkupExtensions.On<TReturn>
    {
        protected OnFormFactorExtensionBase() { }
        [Avalonia.Metadata.MarkupExtensionDefaultOptionAttribute]
        public TReturn? Default { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute(Avalonia.Platform.FormFactorType.Desktop)]
        public TReturn? Desktop { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute(Avalonia.Platform.FormFactorType.Mobile)]
        public TReturn? Mobile { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        void Avalonia.Metadata.IAddChild<TOn>.AddChild(TOn child) { }
        public object ProvideValue() { throw null; }
    }
    public sealed partial class OnFormFactorExtension<TReturn> : Avalonia.Markup.Xaml.MarkupExtensions.OnFormFactorExtensionBase<TReturn, Avalonia.Markup.Xaml.MarkupExtensions.On<TReturn>>
    {
        public OnFormFactorExtension() { }
        public OnFormFactorExtension(TReturn defaultValue) { }
        public static bool ShouldProvideOption(System.IServiceProvider serviceProvider, Avalonia.Platform.FormFactorType option) { throw null; }
    }
    public sealed partial class OnPlatformExtension : Avalonia.Markup.Xaml.MarkupExtensions.OnPlatformExtensionBase<object, Avalonia.Markup.Xaml.MarkupExtensions.On>
    {
        public OnPlatformExtension() { }
        public OnPlatformExtension(object defaultValue) { }
        public static bool ShouldProvideOption(string option) { throw null; }
    }
    public abstract partial class OnPlatformExtensionBase<TReturn, TOn> : Avalonia.Metadata.IAddChild<TOn> where TOn : Avalonia.Markup.Xaml.MarkupExtensions.On<TReturn>
    {
        protected OnPlatformExtensionBase() { }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute("ANDROID")]
        public TReturn? Android { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute("BROWSER")]
        public TReturn? Browser { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionDefaultOptionAttribute]
        public TReturn? Default { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute("IOS")]
        public TReturn? iOS { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute("LINUX")]
        public TReturn? Linux { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute("OSX")]
        public TReturn? macOS { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.MarkupExtensionOptionAttribute("WINDOWS")]
        public TReturn? Windows { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        void Avalonia.Metadata.IAddChild<TOn>.AddChild(TOn child) { }
        public object ProvideValue() { throw null; }
    }
    public sealed partial class OnPlatformExtension<TReturn> : Avalonia.Markup.Xaml.MarkupExtensions.OnPlatformExtensionBase<TReturn, Avalonia.Markup.Xaml.MarkupExtensions.On<TReturn>>
    {
        public OnPlatformExtension() { }
        public OnPlatformExtension(TReturn defaultValue) { }
        public static bool ShouldProvideOption(string option) { throw null; }
    }
    public partial class On<TReturn>
    {
        public On() { }
        [Avalonia.Metadata.ContentAttribute]
        public TReturn? Content { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Collections.Generic.IReadOnlyList<string> Options { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("BindingExpression and ReflectionBinding heavily use reflection. Consider using CompiledBindings instead.")]
    public partial class ReflectionBindingExtension
    {
        public ReflectionBindingExtension() { }
        public ReflectionBindingExtension(string path) { }
        public Avalonia.Data.Converters.IValueConverter? Converter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? ConverterParameter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string? ElementName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? FallbackValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Data.BindingMode Mode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Markup.Xaml.ConstructorArgumentAttribute("path")]
        public string Path { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Data.BindingPriority Priority { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Data.RelativeSource? RelativeSource { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? Source { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string? StringFormat { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? TargetNullValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Data.Binding ProvideValue(System.IServiceProvider serviceProvider) { throw null; }
    }
    public partial class RelativeSourceExtension
    {
        public RelativeSourceExtension() { }
        public RelativeSourceExtension(Avalonia.Data.RelativeSourceMode mode) { }
        public int AncestorLevel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Type? AncestorType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Markup.Xaml.ConstructorArgumentAttribute("mode")]
        public Avalonia.Data.RelativeSourceMode Mode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Data.TreeType Tree { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Data.RelativeSource ProvideValue(System.IServiceProvider serviceProvider) { throw null; }
    }
    public partial class ResolveByNameExtension
    {
        public ResolveByNameExtension(string name) { }
        public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public object? ProvideValue(System.IServiceProvider serviceProvider) { throw null; }
    }
    public partial class StaticResourceExtension
    {
        public StaticResourceExtension() { }
        public StaticResourceExtension(object resourceKey) { }
        public object? ResourceKey { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? ProvideValue(System.IServiceProvider serviceProvider) { throw null; }
    }
}
namespace Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings
{
    public partial class CompiledBindingPath
    {
        public CompiledBindingPath() { }
        public override string ToString() { throw null; }
    }
    public partial class CompiledBindingPathBuilder
    {
        public CompiledBindingPathBuilder() { }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder Ancestor(System.Type ancestorType, int level) { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder ArrayElement(int[] indices, System.Type elementType) { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPath Build() { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder Command(string methodName, System.Action<object, object?> executeHelper, System.Func<object, object?, bool>? canExecuteHelper, string[]? dependsOnProperties) { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder ElementName(Avalonia.Controls.INameScope nameScope, string name) { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder Method(System.RuntimeMethodHandle handle, System.RuntimeTypeHandle delegateType) { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder Not() { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder Property(Avalonia.Data.Core.IPropertyInfo info, System.Func<System.WeakReference<object?>, Avalonia.Data.Core.IPropertyInfo, Avalonia.Data.Core.Plugins.IPropertyAccessor> accessorFactory) { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder Self() { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder SetRawSource(object? rawSource) { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder StreamObservable<T>() { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder StreamTask<T>() { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder TypeCast<T>() { throw null; }
        public Avalonia.Markup.Xaml.MarkupExtensions.CompiledBindings.CompiledBindingPathBuilder VisualAncestor(System.Type ancestorType, int level) { throw null; }
    }
    public static partial class PropertyInfoAccessorFactory
    {
        public static Avalonia.Data.Core.Plugins.IPropertyAccessor CreateAvaloniaPropertyAccessor(System.WeakReference<object?> target, Avalonia.Data.Core.IPropertyInfo property) { throw null; }
        public static Avalonia.Data.Core.Plugins.IPropertyAccessor CreateIndexerPropertyAccessor(System.WeakReference<object?> target, Avalonia.Data.Core.IPropertyInfo property, int argument) { throw null; }
        public static Avalonia.Data.Core.Plugins.IPropertyAccessor CreateInpcPropertyAccessor(System.WeakReference<object?> target, Avalonia.Data.Core.IPropertyInfo property) { throw null; }
    }
}
namespace Avalonia.Markup.Xaml.Styling
{
    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("StyleInclude and ResourceInclude use AvaloniaXamlLoader.Load which dynamically loads referenced assembly with Avalonia resources. Note, StyleInclude and ResourceInclude defined in XAML are resolved compile time and are safe with trimming and AOT.")]
    public partial class MergeResourceInclude : Avalonia.Markup.Xaml.Styling.ResourceInclude
    {
        public MergeResourceInclude(System.IServiceProvider serviceProvider) : base (default(System.Uri)) { }
        public MergeResourceInclude(System.Uri? baseUri) : base (default(System.Uri)) { }
    }
    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("StyleInclude and ResourceInclude use AvaloniaXamlLoader.Load which dynamically loads referenced assembly with Avalonia resources. Note, StyleInclude and ResourceInclude defined in XAML are resolved compile time and are safe with trimming and AOT.")]
    public partial class ResourceInclude : Avalonia.Controls.IResourceNode, Avalonia.Controls.IResourceProvider, Avalonia.Controls.IThemeVariantProvider
    {
        public ResourceInclude(System.IServiceProvider serviceProvider) { }
        public ResourceInclude(System.Uri? baseUri) { }
        bool Avalonia.Controls.IResourceNode.HasResources { get { throw null; } }
        Avalonia.Styling.ThemeVariant? Avalonia.Controls.IThemeVariantProvider.Key { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.IResourceDictionary Loaded { get { throw null; } }
        public Avalonia.Controls.IResourceHost? Owner { get { throw null; } }
        public System.Uri? Source { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public event System.EventHandler? OwnerChanged { add { } remove { } }
        void Avalonia.Controls.IResourceProvider.AddOwner(Avalonia.Controls.IResourceHost owner) { }
        void Avalonia.Controls.IResourceProvider.RemoveOwner(Avalonia.Controls.IResourceHost owner) { }
        public bool TryGetResource(object key, Avalonia.Styling.ThemeVariant? theme, out object? value) { throw null; }
    }
    [System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute("StyleInclude and ResourceInclude use AvaloniaXamlLoader.Load which dynamically loads referenced assembly with Avalonia resources. Note, StyleInclude and ResourceInclude defined in XAML are resolved compile time and are safe with trimming and AOT.")]
    public partial class StyleInclude : Avalonia.Controls.IResourceNode, Avalonia.Controls.IResourceProvider, Avalonia.Styling.IStyle
    {
        public StyleInclude(System.IServiceProvider serviceProvider) { }
        public StyleInclude(System.Uri? baseUri) { }
        bool Avalonia.Controls.IResourceNode.HasResources { get { throw null; } }
        System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle> Avalonia.Styling.IStyle.Children { get { throw null; } }
        public Avalonia.Styling.IStyle Loaded { get { throw null; } }
        public Avalonia.Controls.IResourceHost? Owner { get { throw null; } }
        public System.Uri? Source { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public event System.EventHandler? OwnerChanged { add { } remove { } }
        void Avalonia.Controls.IResourceProvider.AddOwner(Avalonia.Controls.IResourceHost owner) { }
        void Avalonia.Controls.IResourceProvider.RemoveOwner(Avalonia.Controls.IResourceHost owner) { }
        public bool TryGetResource(object key, Avalonia.Styling.ThemeVariant? theme, out object? value) { throw null; }
    }
}
namespace Avalonia.Markup.Xaml.Templates
{
    public partial class ControlTemplate : Avalonia.Controls.Templates.IControlTemplate, Avalonia.Controls.Templates.ITemplate<Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.Templates.TemplateResult<Avalonia.Controls.Control>?>
    {
        public ControlTemplate() { }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Metadata.TemplateContentAttribute]
        public object? Content { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Type? TargetType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Templates.TemplateResult<Avalonia.Controls.Control>? Build(Avalonia.Controls.Primitives.TemplatedControl control) { throw null; }
    }
    public partial class DataTemplate : Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.IRecyclingDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>, Avalonia.Controls.Templates.ITypedDataTemplate
    {
        public DataTemplate() { }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Metadata.TemplateContentAttribute]
        public object? Content { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.DataTypeAttribute]
        public System.Type? DataType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Control? Build(object? data) { throw null; }
        public Avalonia.Controls.Control? Build(object? data, Avalonia.Controls.Control? existing) { throw null; }
        public bool Match(object? data) { throw null; }
    }
    public partial class FocusAdornerTemplate : Avalonia.Markup.Xaml.Templates.Template
    {
        public FocusAdornerTemplate() { }
    }
    public partial class ItemsPanelTemplate : Avalonia.Controls.ITemplate<Avalonia.Controls.Panel?>, Avalonia.Styling.ITemplate
    {
        public ItemsPanelTemplate() { }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Metadata.TemplateContentAttribute]
        public object? Content { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        object? Avalonia.Styling.ITemplate.Build() { throw null; }
        public Avalonia.Controls.Panel? Build() { throw null; }
    }
    public partial class Template : Avalonia.Controls.ITemplate<Avalonia.Controls.Control?>, Avalonia.Styling.ITemplate
    {
        public Template() { }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Metadata.TemplateContentAttribute]
        public object? Content { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        object? Avalonia.Styling.ITemplate.Build() { throw null; }
        public Avalonia.Controls.Control? Build() { throw null; }
    }
    public static partial class TemplateContent
    {
        public static Avalonia.Controls.Templates.TemplateResult<Avalonia.Controls.Control>? Load(object? templateContent) { throw null; }
        public static Avalonia.Controls.Templates.TemplateResult<T>? Load<T>(object? templateContent) { throw null; }
    }
    public partial class TreeDataTemplate : Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>, Avalonia.Controls.Templates.ITreeDataTemplate, Avalonia.Controls.Templates.ITypedDataTemplate
    {
        public TreeDataTemplate() { }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Metadata.TemplateContentAttribute]
        public object? Content { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Metadata.DataTypeAttribute]
        public System.Type? DataType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [Avalonia.Data.AssignBindingAttribute]
        public Avalonia.Data.BindingBase? ItemsSource { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Control? Build(object? data) { throw null; }
        [System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute("Trimming", "IL2026", Justification="If ItemsSource is a CompiledBinding, then path members will be preserver")]
        public Avalonia.Data.InstancedBinding? ItemsSelector(object item) { throw null; }
        public bool Match(object? data) { throw null; }
    }
}
namespace Avalonia.Markup.Xaml.XamlIl.Runtime
{
    public partial class AvaloniaXamlIlXmlNamespaceInfo
    {
        public AvaloniaXamlIlXmlNamespaceInfo() { }
        public string ClrAssemblyName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string ClrNamespace { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial interface IAvaloniaXamlIlControlTemplateProvider
    {
    }
    public partial interface IAvaloniaXamlIlParentStackProvider
    {
        System.Collections.Generic.IEnumerable<object> Parents { get; }
    }
    public partial interface IAvaloniaXamlIlXmlNamespaceInfoProvider
    {
        System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get; }
    }
    public static partial class XamlIlRuntimeHelpers
    {
        public static void ApplyNonMatchingMarkupExtensionV1(object target, object property, System.IServiceProvider prov, object value) { }
        public static System.IServiceProvider CreateInnerServiceProviderV1(System.IServiceProvider compiled) { throw null; }
        public static System.IServiceProvider CreateRootServiceProviderV2() { throw null; }
        public static System.IServiceProvider CreateRootServiceProviderV3(System.IServiceProvider parentServiceProvider) { throw null; }
        public static System.Func<System.IServiceProvider, object> DeferredTransformationFactoryV1(System.Func<System.IServiceProvider, object> builder, System.IServiceProvider provider) { throw null; }
        public static System.Func<System.IServiceProvider, object> DeferredTransformationFactoryV2<T>(System.Func<System.IServiceProvider, object> builder, System.IServiceProvider provider) { throw null; }
    }
}
