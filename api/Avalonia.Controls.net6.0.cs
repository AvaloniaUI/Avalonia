//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia
{
    public partial class AppBuilder
    {
        public AppBuilder() { }
        protected AppBuilder(Avalonia.Platform.IRuntimePlatform platform, System.Action<Avalonia.AppBuilder> platformServices) { }
        public System.Action<Avalonia.AppBuilder> AfterPlatformServicesSetupCallback { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Action<Avalonia.AppBuilder> AfterSetupCallback { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Type? ApplicationType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Application? Instance { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Action? RenderingSubsystemInitializer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string? RenderingSubsystemName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Platform.IRuntimePlatform RuntimePlatform { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Action RuntimePlatformServicesInitializer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected Avalonia.AppBuilder Self { get { throw null; } }
        public System.Action? WindowingSubsystemInitializer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string? WindowingSubsystemName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.AppBuilder AfterPlatformServicesSetup(System.Action<Avalonia.AppBuilder> callback) { throw null; }
        public Avalonia.AppBuilder AfterSetup(System.Action<Avalonia.AppBuilder> callback) { throw null; }
        public Avalonia.AppBuilder ConfigureFonts(System.Action<Avalonia.Media.FontManager> action) { throw null; }
        public static Avalonia.AppBuilder Configure<TApp>() where TApp : Avalonia.Application, new() { throw null; }
        public static Avalonia.AppBuilder Configure<TApp>(System.Func<TApp> appFactory) where TApp : Avalonia.Application { throw null; }
        public Avalonia.AppBuilder SetupWithLifetime(Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime lifetime) { throw null; }
        public Avalonia.AppBuilder SetupWithoutStarting() { throw null; }
        public void Start(Avalonia.AppBuilder.AppMainDelegate main, string[] args) { }
        public Avalonia.AppBuilder UseRenderingSubsystem(System.Action initializer, string name = "") { throw null; }
        public Avalonia.AppBuilder UseWindowingSubsystem(System.Action initializer, string name = "") { throw null; }
        public Avalonia.AppBuilder With<T>(System.Func<T> options) { throw null; }
        public Avalonia.AppBuilder With<T>(T options) { throw null; }
        public delegate void AppMainDelegate(Avalonia.Application app, string[] args);
    }
    public partial class Application : Avalonia.AvaloniaObject, Avalonia.Controls.IGlobalDataTemplates, Avalonia.Controls.IResourceHost, Avalonia.Controls.IResourceNode, Avalonia.Controls.Templates.IDataTemplateHost, Avalonia.IDataContextProvider, Avalonia.Platform.IApplicationPlatformEvents, Avalonia.Styling.IGlobalStyles, Avalonia.Styling.IStyleHost, Avalonia.Styling.IThemeVariantHost
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ThemeVariant> ActualThemeVariantProperty;
        public static readonly Avalonia.StyledProperty<object?> DataContextProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Application, string?> NameProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ThemeVariant?> RequestedThemeVariantProperty;
        public Application() { }
        public Avalonia.Styling.ThemeVariant ActualThemeVariant { get { throw null; } }
        public Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime? ApplicationLifetime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        bool Avalonia.Controls.IResourceNode.HasResources { get { throw null; } }
        bool Avalonia.Controls.Templates.IDataTemplateHost.IsDataTemplatesInitialized { get { throw null; } }
        bool Avalonia.Styling.IStyleHost.IsStylesInitialized { get { throw null; } }
        Avalonia.Styling.IStyleHost? Avalonia.Styling.IStyleHost.StylingParent { get { throw null; } }
        public static Avalonia.Application? Current { get { throw null; } }
        public object? DataContext { get { throw null; } set { } }
        public Avalonia.Controls.Templates.DataTemplates DataTemplates { get { throw null; } }
        public Avalonia.Input.IFocusManager? FocusManager { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Input.InputManager? InputManager { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string? Name { get { throw null; } set { } }
        public Avalonia.Styling.ThemeVariant? RequestedThemeVariant { get { throw null; } set { } }
        public Avalonia.Controls.IResourceDictionary Resources { get { throw null; } set { } }
        public Avalonia.Styling.Styles Styles { get { throw null; } }
        public event System.EventHandler? ActualThemeVariantChanged { add { } remove { } }
        event System.Action<System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle>>? Avalonia.Styling.IGlobalStyles.GlobalStylesAdded { add { } remove { } }
        event System.Action<System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle>>? Avalonia.Styling.IGlobalStyles.GlobalStylesRemoved { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ResourcesChangedEventArgs>? ResourcesChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.UrlOpenedEventArgs>? UrlsOpened { add { } remove { } }
        void Avalonia.Controls.IResourceHost.NotifyHostedResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs e) { }
        void Avalonia.Platform.IApplicationPlatformEvents.RaiseUrlsOpened(string[] urls) { }
        void Avalonia.Styling.IStyleHost.StylesAdded(System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle> styles) { }
        void Avalonia.Styling.IStyleHost.StylesRemoved(System.Collections.Generic.IReadOnlyList<Avalonia.Styling.IStyle> styles) { }
        public virtual void Initialize() { }
        public virtual void OnFrameworkInitializationCompleted() { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public virtual void RegisterServices() { }
        public bool TryGetResource(object key, Avalonia.Styling.ThemeVariant? theme, out object? value) { throw null; }
    }
    public static partial class ClassicDesktopStyleApplicationLifetimeExtensions
    {
        public static int StartWithClassicDesktopLifetime(this Avalonia.AppBuilder builder, string[] args, Avalonia.Controls.ShutdownMode shutdownMode = Avalonia.Controls.ShutdownMode.OnLastWindowClose) { throw null; }
    }
    public static partial class LoggingExtensions
    {
        public static Avalonia.AppBuilder LogToTrace(this Avalonia.AppBuilder builder, Avalonia.Logging.LogEventLevel level = Avalonia.Logging.LogEventLevel.Warning, params string[] areas) { throw null; }
    }
    public partial class UrlOpenedEventArgs : System.EventArgs
    {
        public UrlOpenedEventArgs(string[] urls) { }
        public string[] Urls { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
}
namespace Avalonia.Automation
{
    public enum AccessibilityView
    {
        Default = 0,
        Raw = 1,
        Control = 2,
        Content = 3,
    }
    public static partial class AutomationElementIdentifiers
    {
        public static Avalonia.Automation.AutomationProperty BoundingRectangleProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty ClassNameProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty NameProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum AutomationLiveSetting
    {
        Off = 0,
        Polite = 1,
        Assertive = 2,
    }
    public static partial class AutomationProperties
    {
        public static readonly Avalonia.AttachedProperty<string?> AcceleratorKeyProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Automation.AccessibilityView> AccessibilityViewProperty;
        public static readonly Avalonia.AttachedProperty<string?> AccessKeyProperty;
        public static readonly Avalonia.AttachedProperty<string?> AutomationIdProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Automation.Peers.AutomationControlType?> ControlTypeOverrideProperty;
        public static readonly Avalonia.AttachedProperty<string?> HelpTextProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsColumnHeaderProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Automation.IsOffscreenBehavior> IsOffscreenBehaviorProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsRequiredForFormProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsRowHeaderProperty;
        public static readonly Avalonia.AttachedProperty<string?> ItemStatusProperty;
        public static readonly Avalonia.AttachedProperty<string?> ItemTypeProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Control> LabeledByProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Automation.AutomationLiveSetting> LiveSettingProperty;
        public static readonly Avalonia.AttachedProperty<string?> NameProperty;
        public static readonly Avalonia.AttachedProperty<int> PositionInSetProperty;
        public static readonly Avalonia.AttachedProperty<int> SizeOfSetProperty;
        public static string? GetAcceleratorKey(Avalonia.StyledElement element) { throw null; }
        public static Avalonia.Automation.AccessibilityView GetAccessibilityView(Avalonia.StyledElement element) { throw null; }
        public static string? GetAccessKey(Avalonia.StyledElement element) { throw null; }
        public static string? GetAutomationId(Avalonia.StyledElement element) { throw null; }
        public static Avalonia.Automation.Peers.AutomationControlType? GetControlTypeOverride(Avalonia.StyledElement element) { throw null; }
        public static string? GetHelpText(Avalonia.StyledElement element) { throw null; }
        public static bool GetIsColumnHeader(Avalonia.StyledElement element) { throw null; }
        public static Avalonia.Automation.IsOffscreenBehavior GetIsOffscreenBehavior(Avalonia.StyledElement element) { throw null; }
        public static bool GetIsRequiredForForm(Avalonia.StyledElement element) { throw null; }
        public static bool GetIsRowHeader(Avalonia.StyledElement element) { throw null; }
        public static string? GetItemStatus(Avalonia.StyledElement element) { throw null; }
        public static string? GetItemType(Avalonia.StyledElement element) { throw null; }
        public static Avalonia.Controls.Control GetLabeledBy(Avalonia.StyledElement element) { throw null; }
        public static Avalonia.Automation.AutomationLiveSetting GetLiveSetting(Avalonia.StyledElement element) { throw null; }
        public static string? GetName(Avalonia.StyledElement element) { throw null; }
        public static int GetPositionInSet(Avalonia.StyledElement element) { throw null; }
        public static int GetSizeOfSet(Avalonia.StyledElement element) { throw null; }
        public static void SetAcceleratorKey(Avalonia.StyledElement element, string value) { }
        public static void SetAccessibilityView(Avalonia.StyledElement element, Avalonia.Automation.AccessibilityView value) { }
        public static void SetAccessKey(Avalonia.StyledElement element, string value) { }
        public static void SetAutomationId(Avalonia.StyledElement element, string? value) { }
        public static void SetControlTypeOverride(Avalonia.StyledElement element, Avalonia.Automation.Peers.AutomationControlType? value) { }
        public static void SetHelpText(Avalonia.StyledElement element, string? value) { }
        public static void SetIsColumnHeader(Avalonia.StyledElement element, bool value) { }
        public static void SetIsOffscreenBehavior(Avalonia.StyledElement element, Avalonia.Automation.IsOffscreenBehavior value) { }
        public static void SetIsRequiredForForm(Avalonia.StyledElement element, bool value) { }
        public static void SetIsRowHeader(Avalonia.StyledElement element, bool value) { }
        public static void SetItemStatus(Avalonia.StyledElement element, string? value) { }
        public static void SetItemType(Avalonia.StyledElement element, string? value) { }
        public static void SetLabeledBy(Avalonia.StyledElement element, Avalonia.Controls.Control value) { }
        public static void SetLiveSetting(Avalonia.StyledElement element, Avalonia.Automation.AutomationLiveSetting value) { }
        public static void SetName(Avalonia.StyledElement element, string? value) { }
        public static void SetPositionInSet(Avalonia.StyledElement element, int value) { }
        public static void SetSizeOfSet(Avalonia.StyledElement element, int value) { }
    }
    public sealed partial class AutomationProperty
    {
        internal AutomationProperty() { }
    }
    public partial class AutomationPropertyChangedEventArgs : System.EventArgs
    {
        public AutomationPropertyChangedEventArgs(Avalonia.Automation.AutomationProperty property, object? oldValue, object? newValue) { }
        public object? NewValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public object? OldValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Automation.AutomationProperty Property { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class ElementNotEnabledException : System.Exception
    {
        public ElementNotEnabledException() { }
        public ElementNotEnabledException(string message) { }
    }
    public static partial class ExpandCollapsePatternIdentifiers
    {
        public static Avalonia.Automation.AutomationProperty ExpandCollapseStateProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum ExpandCollapseState
    {
        Collapsed = 0,
        Expanded = 1,
        LeafNode = 2,
        PartiallyExpanded = 3,
    }
    public enum IsOffscreenBehavior
    {
        Default = 0,
        Onscreen = 1,
        Offscreen = 2,
        FromClip = 3,
    }
    public static partial class RangeValuePatternIdentifiers
    {
        public static Avalonia.Automation.AutomationProperty IsReadOnlyProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty MaximumProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty MinimumProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty ValueProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public static partial class ScrollPatternIdentifiers
    {
        public const double NoScroll = -1;
        public static Avalonia.Automation.AutomationProperty HorizontallyScrollableProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty HorizontalScrollPercentProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty HorizontalViewSizeProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty VerticallyScrollableProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty VerticalScrollPercentProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty VerticalViewSizeProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public static partial class SelectionItemPatternIdentifiers
    {
        public static Avalonia.Automation.AutomationProperty IsSelectedProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty SelectionContainerProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public static partial class SelectionPatternIdentifiers
    {
        public static Avalonia.Automation.AutomationProperty CanSelectMultipleProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty IsSelectionRequiredProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Automation.AutomationProperty SelectionProperty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
}
namespace Avalonia.Automation.Peers
{
    public enum AutomationControlType
    {
        None = 0,
        Button = 1,
        Calendar = 2,
        CheckBox = 3,
        ComboBox = 4,
        ComboBoxItem = 5,
        Edit = 6,
        Hyperlink = 7,
        Image = 8,
        ListItem = 9,
        List = 10,
        Menu = 11,
        MenuBar = 12,
        MenuItem = 13,
        ProgressBar = 14,
        RadioButton = 15,
        ScrollBar = 16,
        Slider = 17,
        Spinner = 18,
        StatusBar = 19,
        Tab = 20,
        TabItem = 21,
        Text = 22,
        ToolBar = 23,
        ToolTip = 24,
        Tree = 25,
        TreeItem = 26,
        Custom = 27,
        Group = 28,
        Thumb = 29,
        DataGrid = 30,
        DataItem = 31,
        Document = 32,
        SplitButton = 33,
        Window = 34,
        Pane = 35,
        Header = 36,
        HeaderItem = 37,
        Table = 38,
        TitleBar = 39,
        Separator = 40,
    }
    public abstract partial class AutomationPeer
    {
        protected AutomationPeer() { }
        public event System.EventHandler? ChildrenChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Automation.AutomationPropertyChangedEventArgs>? PropertyChanged { add { } remove { } }
        public void BringIntoView() { }
        protected abstract void BringIntoViewCore();
        protected void EnsureEnabled() { }
        public string? GetAcceleratorKey() { throw null; }
        protected abstract string? GetAcceleratorKeyCore();
        public string? GetAccessKey() { throw null; }
        protected abstract string? GetAccessKeyCore();
        public Avalonia.Automation.Peers.AutomationControlType GetAutomationControlType() { throw null; }
        protected abstract Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore();
        public string? GetAutomationId() { throw null; }
        protected abstract string? GetAutomationIdCore();
        public Avalonia.Rect GetBoundingRectangle() { throw null; }
        protected abstract Avalonia.Rect GetBoundingRectangleCore();
        public System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer> GetChildren() { throw null; }
        public string GetClassName() { throw null; }
        protected abstract string GetClassNameCore();
        protected virtual Avalonia.Automation.Peers.AutomationControlType GetControlTypeOverrideCore() { throw null; }
        public Avalonia.Automation.Peers.AutomationPeer? GetLabeledBy() { throw null; }
        protected abstract Avalonia.Automation.Peers.AutomationPeer? GetLabeledByCore();
        public string GetLocalizedControlType() { throw null; }
        protected virtual string GetLocalizedControlTypeCore() { throw null; }
        public string GetName() { throw null; }
        protected abstract string? GetNameCore();
        protected abstract System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer> GetOrCreateChildrenCore();
        public Avalonia.Automation.Peers.AutomationPeer? GetParent() { throw null; }
        protected abstract Avalonia.Automation.Peers.AutomationPeer? GetParentCore();
        protected virtual object? GetProviderCore(System.Type providerType) { throw null; }
        public T? GetProvider<T>() { throw null; }
        public bool HasKeyboardFocus() { throw null; }
        protected abstract bool HasKeyboardFocusCore();
        public bool IsContentElement() { throw null; }
        protected abstract bool IsContentElementCore();
        protected virtual bool IsContentElementOverrideCore() { throw null; }
        public bool IsControlElement() { throw null; }
        protected abstract bool IsControlElementCore();
        protected virtual bool IsControlElementOverrideCore() { throw null; }
        public bool IsEnabled() { throw null; }
        protected abstract bool IsEnabledCore();
        public bool IsKeyboardFocusable() { throw null; }
        protected abstract bool IsKeyboardFocusableCore();
        protected void RaiseChildrenChangedEvent() { }
        public void RaisePropertyChangedEvent(Avalonia.Automation.AutomationProperty property, object? oldValue, object? newValue) { }
        public void SetFocus() { }
        protected abstract void SetFocusCore();
        public bool ShowContextMenu() { throw null; }
        protected abstract bool ShowContextMenuCore();
        protected internal abstract bool TrySetParent(Avalonia.Automation.Peers.AutomationPeer? parent);
    }
    public partial class ButtonAutomationPeer : Avalonia.Automation.Peers.ContentControlAutomationPeer, Avalonia.Automation.Provider.IInvokeProvider
    {
        public ButtonAutomationPeer(Avalonia.Controls.Button owner) : base (default(Avalonia.Controls.ContentControl)) { }
        public new Avalonia.Controls.Button Owner { get { throw null; } }
        protected override string? GetAcceleratorKeyCore() { throw null; }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        public void Invoke() { }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
    }
    public partial class ComboBoxAutomationPeer : Avalonia.Automation.Peers.SelectingItemsControlAutomationPeer, Avalonia.Automation.Provider.IExpandCollapseProvider, Avalonia.Automation.Provider.IValueProvider
    {
        public ComboBoxAutomationPeer(Avalonia.Controls.ComboBox owner) : base (default(Avalonia.Controls.Primitives.SelectingItemsControl)) { }
        bool Avalonia.Automation.Provider.IValueProvider.IsReadOnly { get { throw null; } }
        string? Avalonia.Automation.Provider.IValueProvider.Value { get { throw null; } }
        public Avalonia.Automation.ExpandCollapseState ExpandCollapseState { get { throw null; } }
        public new Avalonia.Controls.ComboBox Owner { get { throw null; } }
        public bool ShowsMenu { get { throw null; } }
        void Avalonia.Automation.Provider.IValueProvider.SetValue(string? value) { }
        public void Collapse() { }
        public void Expand() { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer>? GetSelectionCore() { throw null; }
        protected override void OwnerPropertyChanged(object? sender, Avalonia.AvaloniaPropertyChangedEventArgs e) { }
    }
    public partial class ContentControlAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        protected ContentControlAutomationPeer(Avalonia.Controls.ContentControl owner) : base (default(Avalonia.Controls.Control)) { }
        public new Avalonia.Controls.ContentControl Owner { get { throw null; } }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string? GetNameCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
    }
    public partial class ControlAutomationPeer : Avalonia.Automation.Peers.AutomationPeer
    {
        public ControlAutomationPeer(Avalonia.Controls.Control owner) { }
        public Avalonia.Controls.Control Owner { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected override void BringIntoViewCore() { }
        public static Avalonia.Automation.Peers.AutomationPeer CreatePeerForElement(Avalonia.Controls.Control element) { throw null; }
        protected override string? GetAcceleratorKeyCore() { throw null; }
        protected override string? GetAccessKeyCore() { throw null; }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string? GetAutomationIdCore() { throw null; }
        protected override Avalonia.Rect GetBoundingRectangleCore() { throw null; }
        protected virtual System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer>? GetChildrenCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        protected override Avalonia.Automation.Peers.AutomationControlType GetControlTypeOverrideCore() { throw null; }
        protected override Avalonia.Automation.Peers.AutomationPeer? GetLabeledByCore() { throw null; }
        protected override string? GetNameCore() { throw null; }
        public Avalonia.Automation.Peers.AutomationPeer GetOrCreate(Avalonia.Controls.Control element) { throw null; }
        protected override System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer> GetOrCreateChildrenCore() { throw null; }
        protected override Avalonia.Automation.Peers.AutomationPeer? GetParentCore() { throw null; }
        protected override bool HasKeyboardFocusCore() { throw null; }
        protected void InvalidateChildren() { }
        protected void InvalidateParent() { }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsContentElementOverrideCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
        protected override bool IsControlElementOverrideCore() { throw null; }
        protected override bool IsEnabledCore() { throw null; }
        protected override bool IsKeyboardFocusableCore() { throw null; }
        protected override void SetFocusCore() { }
        protected override bool ShowContextMenuCore() { throw null; }
        protected internal override bool TrySetParent(Avalonia.Automation.Peers.AutomationPeer? parent) { throw null; }
    }
    public partial class ItemsControlAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer, Avalonia.Automation.Provider.IScrollProvider
    {
        public ItemsControlAutomationPeer(Avalonia.Controls.ItemsControl owner) : base (default(Avalonia.Controls.Control)) { }
        public bool HorizontallyScrollable { get { throw null; } }
        public double HorizontalScrollPercent { get { throw null; } }
        public double HorizontalViewSize { get { throw null; } }
        public new Avalonia.Controls.ItemsControl Owner { get { throw null; } }
        protected virtual Avalonia.Automation.Provider.IScrollProvider? Scroller { get { throw null; } }
        public bool VerticallyScrollable { get { throw null; } }
        public double VerticalScrollPercent { get { throw null; } }
        public double VerticalViewSize { get { throw null; } }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        public void Scroll(Avalonia.Automation.Provider.ScrollAmount horizontalAmount, Avalonia.Automation.Provider.ScrollAmount verticalAmount) { }
        public void SetScrollPercent(double horizontalPercent, double verticalPercent) { }
    }
    public partial class ListItemAutomationPeer : Avalonia.Automation.Peers.ContentControlAutomationPeer, Avalonia.Automation.Provider.ISelectionItemProvider
    {
        public ListItemAutomationPeer(Avalonia.Controls.ContentControl owner) : base (default(Avalonia.Controls.ContentControl)) { }
        public bool IsSelected { get { throw null; } }
        public Avalonia.Automation.Provider.ISelectionProvider? SelectionContainer { get { throw null; } }
        void Avalonia.Automation.Provider.ISelectionItemProvider.AddToSelection() { }
        void Avalonia.Automation.Provider.ISelectionItemProvider.RemoveFromSelection() { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
        public void Select() { }
    }
    public partial class MenuItemAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        public MenuItemAutomationPeer(Avalonia.Controls.MenuItem owner) : base (default(Avalonia.Controls.Control)) { }
        public new Avalonia.Controls.MenuItem Owner { get { throw null; } }
        protected override string? GetAcceleratorKeyCore() { throw null; }
        protected override string? GetAccessKeyCore() { throw null; }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string? GetNameCore() { throw null; }
    }
    public partial class NoneAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        public NoneAutomationPeer(Avalonia.Controls.Control owner) : base (default(Avalonia.Controls.Control)) { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
    }
    public partial class PopupAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        public PopupAutomationPeer(Avalonia.Controls.Primitives.Popup owner) : base (default(Avalonia.Controls.Control)) { }
        protected override System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer>? GetChildrenCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
    }
    public partial class PopupRootAutomationPeer : Avalonia.Automation.Peers.WindowBaseAutomationPeer
    {
        public PopupRootAutomationPeer(Avalonia.Controls.Primitives.PopupRoot owner) : base (default(Avalonia.Controls.WindowBase)) { }
        protected override Avalonia.Automation.Peers.AutomationPeer? GetParentCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
    }
    public abstract partial class RangeBaseAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer, Avalonia.Automation.Provider.IRangeValueProvider
    {
        public RangeBaseAutomationPeer(Avalonia.Controls.Primitives.RangeBase owner) : base (default(Avalonia.Controls.Control)) { }
        public virtual bool IsReadOnly { get { throw null; } }
        public double LargeChange { get { throw null; } }
        public double Maximum { get { throw null; } }
        public double Minimum { get { throw null; } }
        public new Avalonia.Controls.Primitives.RangeBase Owner { get { throw null; } }
        public double SmallChange { get { throw null; } }
        public double Value { get { throw null; } }
        protected virtual void OwnerPropertyChanged(object? sender, Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        public void SetValue(double value) { }
    }
    public partial class ScrollBarAutomationPeer : Avalonia.Automation.Peers.RangeBaseAutomationPeer
    {
        public ScrollBarAutomationPeer(Avalonia.Controls.Primitives.ScrollBar owner) : base (default(Avalonia.Controls.Primitives.RangeBase)) { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
    }
    public partial class ScrollViewerAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer, Avalonia.Automation.Provider.IScrollProvider
    {
        public ScrollViewerAutomationPeer(Avalonia.Controls.ScrollViewer owner) : base (default(Avalonia.Controls.Control)) { }
        public bool HorizontallyScrollable { get { throw null; } }
        public double HorizontalScrollPercent { get { throw null; } }
        public double HorizontalViewSize { get { throw null; } }
        public new Avalonia.Controls.ScrollViewer Owner { get { throw null; } }
        public bool VerticallyScrollable { get { throw null; } }
        public double VerticalScrollPercent { get { throw null; } }
        public double VerticalViewSize { get { throw null; } }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
        public void Scroll(Avalonia.Automation.Provider.ScrollAmount horizontalAmount, Avalonia.Automation.Provider.ScrollAmount verticalAmount) { }
        public void SetScrollPercent(double horizontalPercent, double verticalPercent) { }
    }
    public abstract partial class SelectingItemsControlAutomationPeer : Avalonia.Automation.Peers.ItemsControlAutomationPeer, Avalonia.Automation.Provider.ISelectionProvider
    {
        protected SelectingItemsControlAutomationPeer(Avalonia.Controls.Primitives.SelectingItemsControl owner) : base (default(Avalonia.Controls.ItemsControl)) { }
        public bool CanSelectMultiple { get { throw null; } }
        public bool IsSelectionRequired { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer> GetSelection() { throw null; }
        protected virtual System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer>? GetSelectionCore() { throw null; }
        protected virtual Avalonia.Controls.SelectionMode GetSelectionModeCore() { throw null; }
        protected virtual void OwnerPropertyChanged(object? sender, Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        protected virtual void OwnerSelectionChanged(object? sender, Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs e) { }
    }
    public partial class TextBlockAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        public TextBlockAutomationPeer(Avalonia.Controls.TextBlock owner) : base (default(Avalonia.Controls.Control)) { }
        public new Avalonia.Controls.TextBlock Owner { get { throw null; } }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string? GetNameCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
    }
    public partial class TextBoxAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer, Avalonia.Automation.Provider.IValueProvider
    {
        public TextBoxAutomationPeer(Avalonia.Controls.TextBox owner) : base (default(Avalonia.Controls.Control)) { }
        public bool IsReadOnly { get { throw null; } }
        public new Avalonia.Controls.TextBox Owner { get { throw null; } }
        public string? Value { get { throw null; } }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        public void SetValue(string? value) { }
    }
    public partial class ToggleButtonAutomationPeer : Avalonia.Automation.Peers.ContentControlAutomationPeer, Avalonia.Automation.Provider.IToggleProvider
    {
        public ToggleButtonAutomationPeer(Avalonia.Controls.Primitives.ToggleButton owner) : base (default(Avalonia.Controls.ContentControl)) { }
        Avalonia.Automation.Provider.ToggleState Avalonia.Automation.Provider.IToggleProvider.ToggleState { get { throw null; } }
        public new Avalonia.Controls.Primitives.ToggleButton Owner { get { throw null; } }
        void Avalonia.Automation.Provider.IToggleProvider.Toggle() { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
    }
    public abstract partial class UnrealizedElementAutomationPeer : Avalonia.Automation.Peers.AutomationPeer
    {
        protected UnrealizedElementAutomationPeer() { }
        protected override void BringIntoViewCore() { }
        protected override Avalonia.Rect GetBoundingRectangleCore() { throw null; }
        protected override System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer> GetOrCreateChildrenCore() { throw null; }
        protected override bool HasKeyboardFocusCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
        protected override bool IsControlElementCore() { throw null; }
        protected override bool IsEnabledCore() { throw null; }
        protected override bool IsKeyboardFocusableCore() { throw null; }
        protected override void SetFocusCore() { }
        public void SetParent(Avalonia.Automation.Peers.AutomationPeer? parent) { }
        protected override bool ShowContextMenuCore() { throw null; }
        protected internal override bool TrySetParent(Avalonia.Automation.Peers.AutomationPeer? parent) { throw null; }
    }
    public partial class WindowAutomationPeer : Avalonia.Automation.Peers.WindowBaseAutomationPeer
    {
        public WindowAutomationPeer(Avalonia.Controls.Window owner) : base (default(Avalonia.Controls.WindowBase)) { }
        public new Avalonia.Controls.Window Owner { get { throw null; } }
        protected override string? GetNameCore() { throw null; }
    }
    public partial class WindowBaseAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer, Avalonia.Automation.Provider.IRootProvider
    {
        public WindowBaseAutomationPeer(Avalonia.Controls.WindowBase owner) : base (default(Avalonia.Controls.Control)) { }
        public new Avalonia.Controls.WindowBase Owner { get { throw null; } }
        public Avalonia.Platform.ITopLevelImpl? PlatformImpl { get { throw null; } }
        public event System.EventHandler? FocusChanged { add { } remove { } }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        public Avalonia.Automation.Peers.AutomationPeer? GetFocus() { throw null; }
        public Avalonia.Automation.Peers.AutomationPeer? GetPeerFromPoint(Avalonia.Point p) { throw null; }
        protected void StartTrackingFocus() { }
        protected void StopTrackingFocus() { }
    }
}
namespace Avalonia.Automation.Provider
{
    public partial interface IExpandCollapseProvider
    {
        Avalonia.Automation.ExpandCollapseState ExpandCollapseState { get; }
        bool ShowsMenu { get; }
        void Collapse();
        void Expand();
    }
    public partial interface IInvokeProvider
    {
        void Invoke();
    }
    public partial interface IRangeValueProvider
    {
        bool IsReadOnly { get; }
        double LargeChange { get; }
        double Maximum { get; }
        double Minimum { get; }
        double SmallChange { get; }
        double Value { get; }
        void SetValue(double value);
    }
    public partial interface IRootProvider
    {
        Avalonia.Platform.ITopLevelImpl? PlatformImpl { get; }
        event System.EventHandler? FocusChanged;
        Avalonia.Automation.Peers.AutomationPeer? GetFocus();
        Avalonia.Automation.Peers.AutomationPeer? GetPeerFromPoint(Avalonia.Point p);
    }
    public partial interface IScrollProvider
    {
        bool HorizontallyScrollable { get; }
        double HorizontalScrollPercent { get; }
        double HorizontalViewSize { get; }
        bool VerticallyScrollable { get; }
        double VerticalScrollPercent { get; }
        double VerticalViewSize { get; }
        void Scroll(Avalonia.Automation.Provider.ScrollAmount horizontalAmount, Avalonia.Automation.Provider.ScrollAmount verticalAmount);
        void SetScrollPercent(double horizontalPercent, double verticalPercent);
    }
    public partial interface ISelectionItemProvider
    {
        bool IsSelected { get; }
        Avalonia.Automation.Provider.ISelectionProvider? SelectionContainer { get; }
        void AddToSelection();
        void RemoveFromSelection();
        void Select();
    }
    public partial interface ISelectionProvider
    {
        bool CanSelectMultiple { get; }
        bool IsSelectionRequired { get; }
        System.Collections.Generic.IReadOnlyList<Avalonia.Automation.Peers.AutomationPeer> GetSelection();
    }
    public partial interface IToggleProvider
    {
        Avalonia.Automation.Provider.ToggleState ToggleState { get; }
        void Toggle();
    }
    public partial interface IValueProvider
    {
        bool IsReadOnly { get; }
        string? Value { get; }
        void SetValue(string? value);
    }
    public enum ScrollAmount
    {
        LargeDecrement = 0,
        SmallDecrement = 1,
        NoAmount = 2,
        LargeIncrement = 3,
        SmallIncrement = 4,
    }
    public enum ToggleState
    {
        Off = 0,
        On = 1,
        Indeterminate = 2,
    }
}
namespace Avalonia.Controls
{
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct AcrylicPlatformCompensationLevels : System.IEquatable<Avalonia.Controls.AcrylicPlatformCompensationLevels>
    {
        private int _dummyPrimitive;
        public AcrylicPlatformCompensationLevels(double transparent, double blurred, double acrylic) { throw null; }
        public double AcrylicBlurLevel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public double BlurLevel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public double TransparentLevel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public bool Equals(Avalonia.Controls.AcrylicPlatformCompensationLevels other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static bool operator ==(Avalonia.Controls.AcrylicPlatformCompensationLevels left, Avalonia.Controls.AcrylicPlatformCompensationLevels right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static bool operator !=(Avalonia.Controls.AcrylicPlatformCompensationLevels left, Avalonia.Controls.AcrylicPlatformCompensationLevels right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override string ToString() { throw null; }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":dropdownopen"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Popup", typeof(Avalonia.Controls.Primitives.Popup))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SelectingItemsControl", typeof(Avalonia.Controls.Primitives.SelectingItemsControl))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SelectionAdapter", typeof(Avalonia.Controls.Utils.ISelectionAdapter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TextBox", typeof(Avalonia.Controls.TextBox))]
    public partial class AutoCompleteBox : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<System.Func<string?, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>>>?> AsyncPopulatorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.AutoCompleteFilterMode> FilterModeProperty;
        public static readonly Avalonia.StyledProperty<bool> IsDropDownOpenProperty;
        public static readonly Avalonia.StyledProperty<bool> IsTextCompletionEnabledProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.AutoCompleteFilterPredicate<object?>?> ItemFilterProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.AutoCompleteSelector<object>?> ItemSelectorProperty;
        public static readonly Avalonia.StyledProperty<System.Collections.IEnumerable?> ItemsSourceProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate> ItemTemplateProperty;
        public static readonly Avalonia.StyledProperty<double> MaxDropDownHeightProperty;
        public static readonly Avalonia.StyledProperty<System.TimeSpan> MinimumPopulateDelayProperty;
        public static readonly Avalonia.StyledProperty<int> MinimumPrefixLengthProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.AutoCompleteBox, string?> SearchTextProperty;
        public static readonly Avalonia.StyledProperty<object?> SelectedItemProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.SelectionChangedEventArgs> SelectionChangedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.TextChangedEventArgs> TextChangedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.AutoCompleteFilterPredicate<string?>?> TextFilterProperty;
        public static readonly Avalonia.StyledProperty<string?> TextProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.AutoCompleteSelector<string?>?> TextSelectorProperty;
        public static readonly Avalonia.StyledProperty<string?> WatermarkProperty;
        public AutoCompleteBox() { }
        public System.Func<string?, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<object>>>? AsyncPopulator { get { throw null; } set { } }
        public Avalonia.Controls.AutoCompleteFilterMode FilterMode { get { throw null; } set { } }
        public bool IsDropDownOpen { get { throw null; } set { } }
        public bool IsTextCompletionEnabled { get { throw null; } set { } }
        public Avalonia.Controls.AutoCompleteFilterPredicate<object?>? ItemFilter { get { throw null; } set { } }
        public Avalonia.Controls.AutoCompleteSelector<object>? ItemSelector { get { throw null; } set { } }
        public System.Collections.IEnumerable? ItemsSource { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate ItemTemplate { get { throw null; } set { } }
        public double MaxDropDownHeight { get { throw null; } set { } }
        public System.TimeSpan MinimumPopulateDelay { get { throw null; } set { } }
        public int MinimumPrefixLength { get { throw null; } set { } }
        public string? SearchText { get { throw null; } }
        public object? SelectedItem { get { throw null; } set { } }
        protected Avalonia.Controls.Utils.ISelectionAdapter? SelectionAdapter { get { throw null; } set { } }
        public string? Text { get { throw null; } set { } }
        public Avalonia.Controls.AutoCompleteFilterPredicate<string?>? TextFilter { get { throw null; } set { } }
        public Avalonia.Controls.AutoCompleteSelector<string?>? TextSelector { get { throw null; } set { } }
        [Avalonia.Data.AssignBindingAttribute]
        public Avalonia.Data.IBinding? ValueMemberBinding { get { throw null; } set { } }
        public string? Watermark { get { throw null; } set { } }
        public event System.EventHandler? DropDownClosed { add { } remove { } }
        public event System.EventHandler<System.ComponentModel.CancelEventArgs>? DropDownClosing { add { } remove { } }
        public event System.EventHandler? DropDownOpened { add { } remove { } }
        public event System.EventHandler<System.ComponentModel.CancelEventArgs>? DropDownOpening { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.PopulatedEventArgs>? Populated { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.PopulatingEventArgs>? Populating { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.TextChangedEventArgs>? TextChanged { add { } remove { } }
        protected virtual string? FormatValue(object? value) { throw null; }
        protected virtual Avalonia.Controls.Utils.ISelectionAdapter? GetSelectionAdapterPart(Avalonia.Controls.INameScope nameScope) { throw null; }
        protected bool HasFocus() { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected virtual void OnDropDownClosed(System.EventArgs e) { }
        protected virtual void OnDropDownClosing(System.ComponentModel.CancelEventArgs e) { }
        protected virtual void OnDropDownOpened(System.EventArgs e) { }
        protected virtual void OnDropDownOpening(System.ComponentModel.CancelEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected virtual void OnPopulated(Avalonia.Controls.PopulatedEventArgs e) { }
        protected virtual void OnPopulating(Avalonia.Controls.PopulatingEventArgs e) { }
        protected virtual void OnSelectionChanged(Avalonia.Controls.SelectionChangedEventArgs e) { }
        protected virtual void OnTextChanged(Avalonia.Controls.TextChangedEventArgs e) { }
        public void PopulateComplete() { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
        public partial class BindingEvaluator<T> : Avalonia.Controls.Control
        {
            public static readonly Avalonia.StyledProperty<T> ValueProperty;
            public BindingEvaluator() { }
            public BindingEvaluator(Avalonia.Data.IBinding? binding) { }
            public T Value { get { throw null; } set { } }
            public Avalonia.Data.IBinding? ValueBinding { get { throw null; } set { } }
            public void ClearDataContext() { }
            public T GetDynamicValue(object? o) { throw null; }
            public T GetDynamicValue(object o, bool clearDataContext) { throw null; }
        }
    }
    public enum AutoCompleteFilterMode
    {
        None = 0,
        StartsWith = 1,
        StartsWithCaseSensitive = 2,
        StartsWithOrdinal = 3,
        StartsWithOrdinalCaseSensitive = 4,
        Contains = 5,
        ContainsCaseSensitive = 6,
        ContainsOrdinal = 7,
        ContainsOrdinalCaseSensitive = 8,
        Equals = 9,
        EqualsCaseSensitive = 10,
        EqualsOrdinal = 11,
        EqualsOrdinalCaseSensitive = 12,
        Custom = 13,
    }
    public delegate bool AutoCompleteFilterPredicate<T>(string? search, T item);
    public delegate string AutoCompleteSelector<T>(string? search, T item);
    public partial class Border : Avalonia.Controls.Decorator, Avalonia.VisualTree.IVisualWithRoundRectClip
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BackgroundProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BorderBrushProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Collections.AvaloniaList<double>?> BorderDashArrayProperty;
        public static readonly Avalonia.StyledProperty<double> BorderDashOffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.PenLineCap> BorderLineCapProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.PenLineJoin> BorderLineJoinProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> BorderThicknessProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.BoxShadows> BoxShadowProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.CornerRadius> CornerRadiusProperty;
        public Border() { }
        public Avalonia.Media.IBrush? Background { get { throw null; } set { } }
        public Avalonia.Media.IBrush? BorderBrush { get { throw null; } set { } }
        public Avalonia.Collections.AvaloniaList<double>? BorderDashArray { get { throw null; } set { } }
        public double BorderDashOffset { get { throw null; } set { } }
        public Avalonia.Media.PenLineCap BorderLineCap { get { throw null; } set { } }
        public Avalonia.Media.PenLineJoin BorderLineJoin { get { throw null; } set { } }
        public Avalonia.Thickness BorderThickness { get { throw null; } set { } }
        public Avalonia.Media.BoxShadows BoxShadow { get { throw null; } set { } }
        public Avalonia.CornerRadius ClipToBoundsRadius { get { throw null; } }
        public Avalonia.CornerRadius CornerRadius { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":flyout-open", ":pressed"})]
    public partial class Button : Avalonia.Controls.ContentControl, Avalonia.Input.ICommandSource
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> ClickEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ClickMode> ClickModeProperty;
        public static readonly Avalonia.StyledProperty<object?> CommandParameterProperty;
        public static readonly Avalonia.StyledProperty<System.Windows.Input.ICommand?> CommandProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.FlyoutBase?> FlyoutProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.KeyGesture?> HotKeyProperty;
        public static readonly Avalonia.StyledProperty<bool> IsCancelProperty;
        public static readonly Avalonia.StyledProperty<bool> IsDefaultProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Button, bool> IsPressedProperty;
        protected const string pcFlyoutOpen = ":flyout-open";
        protected const string pcPressed = ":pressed";
        public Button() { }
        public Avalonia.Controls.ClickMode ClickMode { get { throw null; } set { } }
        public System.Windows.Input.ICommand? Command { get { throw null; } set { } }
        public object? CommandParameter { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.FlyoutBase? Flyout { get { throw null; } set { } }
        public Avalonia.Input.KeyGesture? HotKey { get { throw null; } set { } }
        public bool IsCancel { get { throw null; } set { } }
        public bool IsDefault { get { throw null; } set { } }
        protected override bool IsEnabledCore { get { throw null; } }
        public bool IsPressed { get { throw null; } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Click { add { } remove { } }
        void Avalonia.Input.ICommandSource.CanExecuteChanged(object sender, System.EventArgs e) { }
        protected virtual void CloseFlyout() { }
        protected virtual void OnAccessKey(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected virtual void OnClick() { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected virtual void OnFlyoutClosed() { }
        protected virtual void OnFlyoutOpened() { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnKeyUp(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerCaptureLost(Avalonia.Input.PointerCaptureLostEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected virtual void OpenFlyout() { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":left", ":right"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DecreaseButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_IncreaseButton", typeof(Avalonia.Controls.Button))]
    public partial class ButtonSpinner : Avalonia.Controls.Spinner
    {
        public static readonly Avalonia.StyledProperty<bool> AllowSpinProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Location> ButtonSpinnerLocationProperty;
        public static readonly Avalonia.StyledProperty<bool> ShowButtonSpinnerProperty;
        public ButtonSpinner() { }
        public bool AllowSpin { get { throw null; } set { } }
        public Avalonia.Controls.Location ButtonSpinnerLocation { get { throw null; } set { } }
        public bool ShowButtonSpinner { get { throw null; } set { } }
        protected virtual void OnAllowSpinChanged(bool oldValue, bool newValue) { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override void OnValidSpinDirectionChanged(Avalonia.Controls.ValidSpinDirections oldValue, Avalonia.Controls.ValidSpinDirections newValue) { }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_CalendarItem", typeof(Avalonia.Controls.Primitives.CalendarItem))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Root", typeof(Avalonia.Controls.Panel))]
    public partial class Calendar : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<System.DateTime?> DisplayDateEndProperty;
        public static readonly Avalonia.StyledProperty<System.DateTime> DisplayDateProperty;
        public static readonly Avalonia.StyledProperty<System.DateTime?> DisplayDateStartProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.CalendarMode> DisplayModeProperty;
        public static readonly Avalonia.StyledProperty<System.DayOfWeek> FirstDayOfWeekProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> HeaderBackgroundProperty;
        public static readonly Avalonia.StyledProperty<bool> IsTodayHighlightedProperty;
        public static readonly Avalonia.StyledProperty<System.DateTime?> SelectedDateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.CalendarSelectionMode> SelectionModeProperty;
        public Calendar() { }
        public Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection BlackoutDates { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.DateTime DisplayDate { get { throw null; } set { } }
        public System.DateTime? DisplayDateEnd { get { throw null; } set { } }
        public System.DateTime? DisplayDateStart { get { throw null; } set { } }
        public Avalonia.Controls.CalendarMode DisplayMode { get { throw null; } set { } }
        public System.DayOfWeek FirstDayOfWeek { get { throw null; } set { } }
        public Avalonia.Media.IBrush? HeaderBackground { get { throw null; } set { } }
        public bool IsTodayHighlighted { get { throw null; } set { } }
        public System.DateTime? SelectedDate { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SelectedDatesCollection SelectedDates { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.CalendarSelectionMode SelectionMode { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.CalendarDateChangedEventArgs>? DisplayDateChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.CalendarModeChangedEventArgs>? DisplayModeChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>? SelectedDatesChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs e) { }
        public override string ToString() { throw null; }
    }
    public partial class CalendarDateChangedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        internal CalendarDateChangedEventArgs() { }
        public System.DateTime? AddedDate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.DateTime? RemovedDate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":flyout-open", ":pressed"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Button", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Calendar", typeof(Avalonia.Controls.Calendar))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Popup", typeof(Avalonia.Controls.Primitives.Popup))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TextBox", typeof(Avalonia.Controls.TextBox))]
    public partial class CalendarDatePicker : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<string> CustomDateFormatStringProperty;
        public static readonly Avalonia.StyledProperty<System.DateTime?> DisplayDateEndProperty;
        public static readonly Avalonia.StyledProperty<System.DateTime> DisplayDateProperty;
        public static readonly Avalonia.StyledProperty<System.DateTime?> DisplayDateStartProperty;
        public static readonly Avalonia.StyledProperty<System.DayOfWeek> FirstDayOfWeekProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<bool> IsDropDownOpenProperty;
        public static readonly Avalonia.StyledProperty<bool> IsTodayHighlightedProperty;
        protected const string pcFlyoutOpen = ":flyout-open";
        protected const string pcPressed = ":pressed";
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.CalendarDatePickerFormat> SelectedDateFormatProperty;
        public static readonly Avalonia.StyledProperty<System.DateTime?> SelectedDateProperty;
        public static readonly Avalonia.StyledProperty<string?> TextProperty;
        public static readonly Avalonia.StyledProperty<bool> UseFloatingWatermarkProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<string?> WatermarkProperty;
        public CalendarDatePicker() { }
        public Avalonia.Controls.Primitives.CalendarBlackoutDatesCollection? BlackoutDates { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string CustomDateFormatString { get { throw null; } set { } }
        public System.DateTime DisplayDate { get { throw null; } set { } }
        public System.DateTime? DisplayDateEnd { get { throw null; } set { } }
        public System.DateTime? DisplayDateStart { get { throw null; } set { } }
        public System.DayOfWeek FirstDayOfWeek { get { throw null; } set { } }
        public Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get { throw null; } set { } }
        public bool IsDropDownOpen { get { throw null; } set { } }
        public bool IsTodayHighlighted { get { throw null; } set { } }
        public System.DateTime? SelectedDate { get { throw null; } set { } }
        public Avalonia.Controls.CalendarDatePickerFormat SelectedDateFormat { get { throw null; } set { } }
        public string? Text { get { throw null; } set { } }
        public bool UseFloatingWatermark { get { throw null; } set { } }
        public Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get { throw null; } set { } }
        public string? Watermark { get { throw null; } set { } }
        public event System.EventHandler? CalendarClosed { add { } remove { } }
        public event System.EventHandler? CalendarOpened { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs>? DateValidationError { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>? SelectedDateChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected virtual void OnDateValidationError(Avalonia.Controls.CalendarDatePickerDateValidationErrorEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyUp(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerCaptureLost(Avalonia.Input.PointerCaptureLostEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
        protected void UpdatePseudoClasses() { }
    }
    public partial class CalendarDatePickerDateValidationErrorEventArgs : System.EventArgs
    {
        public CalendarDatePickerDateValidationErrorEventArgs(System.Exception exception, string text) { }
        public System.Exception Exception { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string Text { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool ThrowException { get { throw null; } set { } }
    }
    public enum CalendarDatePickerFormat
    {
        Long = 0,
        Short = 1,
        Custom = 2,
    }
    public sealed partial class CalendarDateRange
    {
        public CalendarDateRange(System.DateTime day) { }
        public CalendarDateRange(System.DateTime start, System.DateTime end) { }
        public System.DateTime End { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.DateTime Start { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum CalendarMode
    {
        Month = 0,
        Year = 1,
        Decade = 2,
    }
    public partial class CalendarModeChangedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public CalendarModeChangedEventArgs(Avalonia.Controls.CalendarMode oldMode, Avalonia.Controls.CalendarMode newMode) { }
        public Avalonia.Controls.CalendarMode NewMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.CalendarMode OldMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum CalendarSelectionMode
    {
        SingleDate = 0,
        SingleRange = 1,
        MultipleRange = 2,
        None = 3,
    }
    public partial class Canvas : Avalonia.Controls.Panel, Avalonia.Input.INavigableContainer
    {
        public static readonly Avalonia.AttachedProperty<double> BottomProperty;
        public static readonly Avalonia.AttachedProperty<double> LeftProperty;
        public static readonly Avalonia.AttachedProperty<double> RightProperty;
        public static readonly Avalonia.AttachedProperty<double> TopProperty;
        public Canvas() { }
        protected virtual void ArrangeChild(Avalonia.Controls.Control child, Avalonia.Size finalSize) { }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        Avalonia.Input.IInputElement? Avalonia.Input.INavigableContainer.GetControl(Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap) { throw null; }
        public static double GetBottom(Avalonia.AvaloniaObject element) { throw null; }
        public static double GetLeft(Avalonia.AvaloniaObject element) { throw null; }
        public static double GetRight(Avalonia.AvaloniaObject element) { throw null; }
        public static double GetTop(Avalonia.AvaloniaObject element) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        public static void SetBottom(Avalonia.AvaloniaObject element, double value) { }
        public static void SetLeft(Avalonia.AvaloniaObject element, double value) { }
        public static void SetRight(Avalonia.AvaloniaObject element, double value) { }
        public static void SetTop(Avalonia.AvaloniaObject element, double value) { }
    }
    public partial class Carousel : Avalonia.Controls.Primitives.SelectingItemsControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Animation.IPageTransition?> PageTransitionProperty;
        public Carousel() { }
        public Avalonia.Animation.IPageTransition? PageTransition { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        public void Next() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public void Previous() { }
    }
    public partial class CheckBox : Avalonia.Controls.Primitives.ToggleButton
    {
        public CheckBox() { }
    }
    public enum ClickMode
    {
        Release = 0,
        Press = 1,
    }
    public partial class ColumnDefinition : Avalonia.Controls.DefinitionBase
    {
        public static readonly Avalonia.StyledProperty<double> MaxWidthProperty;
        public static readonly Avalonia.StyledProperty<double> MinWidthProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.GridLength> WidthProperty;
        public ColumnDefinition() { }
        public ColumnDefinition(Avalonia.Controls.GridLength width) { }
        public ColumnDefinition(double value, Avalonia.Controls.GridUnitType type) { }
        public double ActualWidth { get { throw null; } }
        public double MaxWidth { get { throw null; } set { } }
        public double MinWidth { get { throw null; } set { } }
        public Avalonia.Controls.GridLength Width { get { throw null; } set { } }
    }
    public partial class ColumnDefinitions : Avalonia.Controls.DefinitionList<Avalonia.Controls.ColumnDefinition>
    {
        public ColumnDefinitions() { }
        public ColumnDefinitions(string s) { }
        public static Avalonia.Controls.ColumnDefinitions Parse(string s) { throw null; }
        public override string ToString() { throw null; }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":dropdownopen", ":pressed"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Popup", typeof(Avalonia.Controls.Primitives.Popup))]
    public partial class ComboBox : Avalonia.Controls.Primitives.SelectingItemsControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<bool> IsDropDownOpenProperty;
        public static readonly Avalonia.StyledProperty<double> MaxDropDownHeightProperty;
        public const string pcDropdownOpen = ":dropdownopen";
        public const string pcPressed = ":pressed";
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> PlaceholderForegroundProperty;
        public static readonly Avalonia.StyledProperty<string?> PlaceholderTextProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ComboBox, object?> SelectionBoxItemProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalContentAlignmentProperty;
        public ComboBox() { }
        public Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get { throw null; } set { } }
        public bool IsDropDownOpen { get { throw null; } set { } }
        public double MaxDropDownHeight { get { throw null; } set { } }
        public Avalonia.Media.IBrush? PlaceholderForeground { get { throw null; } set { } }
        public string? PlaceholderText { get { throw null; } set { } }
        public object? SelectionBoxItem { get { throw null; } protected set { } }
        public Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get { throw null; } set { } }
        public event System.EventHandler? DropDownClosed { add { } remove { } }
        public event System.EventHandler? DropDownOpened { add { } remove { } }
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        public override void InvalidateMirrorTransform() { }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class ComboBoxItem : Avalonia.Controls.ListBoxItem
    {
        public ComboBoxItem() { }
    }
    public partial class ContainerClearingEventArgs : System.EventArgs
    {
        public ContainerClearingEventArgs(Avalonia.Controls.Control container) { }
        public Avalonia.Controls.Control Container { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class ContainerIndexChangedEventArgs : System.EventArgs
    {
        public ContainerIndexChangedEventArgs(Avalonia.Controls.Control container, int oldIndex, int newIndex) { }
        public Avalonia.Controls.Control Container { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int NewIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int OldIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class ContainerPreparedEventArgs : System.EventArgs
    {
        public ContainerPreparedEventArgs(Avalonia.Controls.Control container, int index) { }
        public Avalonia.Controls.Control Container { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int Index { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ContentPresenter", typeof(Avalonia.Controls.Presenters.IContentPresenter))]
    public partial class ContentControl : Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.IContentControl, Avalonia.Controls.Presenters.IContentPresenterHost
    {
        public static readonly Avalonia.StyledProperty<object?> ContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> ContentTemplateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalContentAlignmentProperty;
        public ContentControl() { }
        Avalonia.Collections.IAvaloniaList<Avalonia.LogicalTree.ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Metadata.DependsOnAttribute("ContentTemplate")]
        public object? Content { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate? ContentTemplate { get { throw null; } set { } }
        public Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get { throw null; } set { } }
        public Avalonia.Controls.Presenters.IContentPresenter? Presenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get { throw null; } set { } }
        bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
        protected virtual void ContentChanged(Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        protected virtual bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
        protected void UpdateLogicalTree(object? toRemove, object? toAdd) { }
    }
    public partial class ContextMenu : Avalonia.Controls.MenuBase, Avalonia.Controls.Diagnostics.IPopupHostProvider, Avalonia.Styling.ISetterValue
    {
        public static readonly Avalonia.StyledProperty<double> HorizontalOffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor> PlacementAnchorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment> PlacementConstraintAdjustmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity> PlacementGravityProperty;
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use the Placement property instead.")]
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.PlacementMode> PlacementModeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.PlacementMode> PlacementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Rect?> PlacementRectProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Control?> PlacementTargetProperty;
        public static readonly Avalonia.StyledProperty<double> VerticalOffsetProperty;
        public static readonly Avalonia.StyledProperty<bool> WindowManagerAddShadowHintProperty;
        public ContextMenu() { }
        public ContextMenu(Avalonia.Controls.Platform.IMenuInteractionHandler interactionHandler) { }
        Avalonia.Controls.Primitives.IPopupHost? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get { throw null; } }
        public double HorizontalOffset { get { throw null; } set { } }
        public Avalonia.Controls.PlacementMode Placement { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor PlacementAnchor { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment PlacementConstraintAdjustment { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupGravity PlacementGravity { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use the Placement property instead.")]
        public Avalonia.Controls.PlacementMode PlacementMode { get { throw null; } set { } }
        public Avalonia.Rect? PlacementRect { get { throw null; } set { } }
        public Avalonia.Controls.Control? PlacementTarget { get { throw null; } set { } }
        public double VerticalOffset { get { throw null; } set { } }
        public bool WindowManagerAddShadowHint { get { throw null; } set { } }
        event System.Action<Avalonia.Controls.Primitives.IPopupHost?>? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHostChanged { add { } remove { } }
        public event System.ComponentModel.CancelEventHandler? ContextMenuClosing { add { } remove { } }
        public event System.ComponentModel.CancelEventHandler? ContextMenuOpening { add { } remove { } }
        void Avalonia.Styling.ISetterValue.Initialize(Avalonia.Styling.ISetter setter) { }
        public override void Close() { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public override void Open() { }
        public void Open(Avalonia.Controls.Control? control) { }
    }
    public partial class ContextRequestedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public ContextRequestedEventArgs() { }
        public ContextRequestedEventArgs(Avalonia.Input.PointerEventArgs pointerEventArgs) { }
        public bool TryGetPosition(Avalonia.Controls.Control? relativeTo, out Avalonia.Point point) { throw null; }
    }
    public partial class Control : Avalonia.Input.InputElement, Avalonia.Controls.Templates.IDataTemplateHost, Avalonia.INamed, Avalonia.Rendering.IVisualBrushInitialize, Avalonia.Styling.ISetterValue
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.FlyoutBase?> ContextFlyoutProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ContextMenu?> ContextMenuProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.ContextRequestedEventArgs> ContextRequestedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>?> FocusAdornerProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> LoadedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.RequestBringIntoViewEventArgs> RequestBringIntoViewEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.SizeChangedEventArgs> SizeChangedEvent;
        public static readonly Avalonia.StyledProperty<object?> TagProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> UnloadedEvent;
        public Control() { }
        bool Avalonia.Controls.Templates.IDataTemplateHost.IsDataTemplatesInitialized { get { throw null; } }
        public Avalonia.Controls.Primitives.FlyoutBase? ContextFlyout { get { throw null; } set { } }
        public Avalonia.Controls.ContextMenu? ContextMenu { get { throw null; } set { } }
        public Avalonia.Controls.Templates.DataTemplates DataTemplates { get { throw null; } }
        public Avalonia.Controls.ITemplate<Avalonia.Controls.Control>? FocusAdorner { get { throw null; } set { } }
        public bool IsLoaded { get { throw null; } }
        public object? Tag { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.ContextRequestedEventArgs>? ContextRequested { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Loaded { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.SizeChangedEventArgs>? SizeChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Unloaded { add { } remove { } }
        void Avalonia.Rendering.IVisualBrushInitialize.EnsureInitialized() { }
        void Avalonia.Styling.ISetterValue.Initialize(Avalonia.Styling.ISetter setter) { }
        protected virtual Avalonia.Controls.Control? GetTemplateFocusTarget() { throw null; }
        protected sealed override void OnAttachedToVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected virtual Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected sealed override void OnDetachedFromVisualTreeCore(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyUp(Avalonia.Input.KeyEventArgs e) { }
        protected virtual void OnLoaded() { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected virtual void OnUnloaded() { }
    }
    public static partial class ControlExtensions
    {
        public static void BringIntoView(this Avalonia.Controls.Control control) { }
        public static void BringIntoView(this Avalonia.Controls.Control control, Avalonia.Rect rect) { }
        public static T? FindControl<T>(this Avalonia.Controls.Control control, string name) where T : Avalonia.Controls.Control { throw null; }
        public static T GetControl<T>(this Avalonia.Controls.Control control, string name) where T : Avalonia.Controls.Control { throw null; }
        public static System.IDisposable Set(this Avalonia.Controls.IPseudoClasses classes, string name, System.IObservable<bool> trigger) { throw null; }
    }
    public partial class Controls : Avalonia.Collections.AvaloniaList<Avalonia.Controls.Control>
    {
        public Controls() { }
        public Controls(System.Collections.Generic.IEnumerable<Avalonia.Controls.Control> items) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":error"})]
    public partial class DataValidationErrors : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.AttachedProperty<System.Collections.Generic.IEnumerable<object>?> ErrorsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate> ErrorTemplateProperty;
        public static readonly Avalonia.AttachedProperty<bool> HasErrorsProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataValidationErrors, Avalonia.Controls.Control?> OwnerProperty;
        public DataValidationErrors() { }
        public Avalonia.Controls.Templates.IDataTemplate ErrorTemplate { get { throw null; } set { } }
        public Avalonia.Controls.Control? Owner { get { throw null; } set { } }
        public static void ClearErrors(Avalonia.Controls.Control control) { }
        public static System.Collections.Generic.IEnumerable<object>? GetErrors(Avalonia.Controls.Control control) { throw null; }
        public static bool GetHasErrors(Avalonia.Controls.Control control) { throw null; }
        public static void SetError(Avalonia.Controls.Control control, System.Exception? error) { }
        public static void SetErrors(Avalonia.Controls.Control control, System.Collections.Generic.IEnumerable<object>? errors) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":hasnodate"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ButtonContentGrid", typeof(Avalonia.Controls.Grid))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DayTextBlock", typeof(Avalonia.Controls.TextBlock))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FirstSpacer", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FlyoutButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MonthTextBlock", typeof(Avalonia.Controls.TextBlock))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PickerPresenter", typeof(Avalonia.Controls.DatePickerPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Popup", typeof(Avalonia.Controls.Primitives.Popup))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SecondSpacer", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_YearTextBlock", typeof(Avalonia.Controls.TextBlock))]
    public partial class DatePicker : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<string> DayFormatProperty;
        public static readonly Avalonia.StyledProperty<bool> DayVisibleProperty;
        public static readonly Avalonia.StyledProperty<System.DateTimeOffset> MaxYearProperty;
        public static readonly Avalonia.StyledProperty<System.DateTimeOffset> MinYearProperty;
        public static readonly Avalonia.StyledProperty<string> MonthFormatProperty;
        public static readonly Avalonia.StyledProperty<bool> MonthVisibleProperty;
        public static readonly Avalonia.StyledProperty<System.DateTimeOffset?> SelectedDateProperty;
        public static readonly Avalonia.StyledProperty<string> YearFormatProperty;
        public static readonly Avalonia.StyledProperty<bool> YearVisibleProperty;
        public DatePicker() { }
        public string DayFormat { get { throw null; } set { } }
        public bool DayVisible { get { throw null; } set { } }
        public System.DateTimeOffset MaxYear { get { throw null; } set { } }
        public System.DateTimeOffset MinYear { get { throw null; } set { } }
        public string MonthFormat { get { throw null; } set { } }
        public bool MonthVisible { get { throw null; } set { } }
        public System.DateTimeOffset? SelectedDate { get { throw null; } set { } }
        public string YearFormat { get { throw null; } set { } }
        public bool YearVisible { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.DatePickerSelectedValueChangedEventArgs>? SelectedDateChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected virtual void OnSelectedDateChanged(object? sender, Avalonia.Controls.DatePickerSelectedValueChangedEventArgs e) { }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_AcceptButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DayDownButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DayHost", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DaySelector", typeof(Avalonia.Controls.Primitives.DateTimePickerPanel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DayUpButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DismissButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FirstSpacer", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MonthDownButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MonthHost", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MonthSelector", typeof(Avalonia.Controls.Primitives.DateTimePickerPanel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MonthUpButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PickerContainer", typeof(Avalonia.Controls.Grid))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SecondSpacer", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_YearDownButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_YearHost", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_YearSelector", typeof(Avalonia.Controls.Primitives.DateTimePickerPanel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_YearUpButton", typeof(Avalonia.Controls.RepeatButton))]
    public partial class DatePickerPresenter : Avalonia.Controls.Primitives.PickerPresenterBase
    {
        public static readonly Avalonia.StyledProperty<System.DateTimeOffset> DateProperty;
        public static readonly Avalonia.StyledProperty<string> DayFormatProperty;
        public static readonly Avalonia.StyledProperty<bool> DayVisibleProperty;
        public static readonly Avalonia.StyledProperty<System.DateTimeOffset> MaxYearProperty;
        public static readonly Avalonia.StyledProperty<System.DateTimeOffset> MinYearProperty;
        public static readonly Avalonia.StyledProperty<string> MonthFormatProperty;
        public static readonly Avalonia.StyledProperty<bool> MonthVisibleProperty;
        public static readonly Avalonia.StyledProperty<string> YearFormatProperty;
        public static readonly Avalonia.StyledProperty<bool> YearVisibleProperty;
        public DatePickerPresenter() { }
        public System.DateTimeOffset Date { get { throw null; } set { } }
        public string DayFormat { get { throw null; } set { } }
        public bool DayVisible { get { throw null; } set { } }
        public System.DateTimeOffset MaxYear { get { throw null; } set { } }
        public System.DateTimeOffset MinYear { get { throw null; } set { } }
        public string MonthFormat { get { throw null; } set { } }
        public bool MonthVisible { get { throw null; } set { } }
        public string YearFormat { get { throw null; } set { } }
        public bool YearVisible { get { throw null; } set { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class DatePickerSelectedValueChangedEventArgs
    {
        public DatePickerSelectedValueChangedEventArgs(System.DateTimeOffset? oldDate, System.DateTimeOffset? newDate) { }
        public System.DateTimeOffset? NewDate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.DateTimeOffset? OldDate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class Decorator : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Control?> ChildProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> PaddingProperty;
        public Decorator() { }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Control? Child { get { throw null; } set { } }
        public Avalonia.Thickness Padding { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public abstract partial class DefinitionBase : Avalonia.AvaloniaObject
    {
        public static readonly Avalonia.AttachedProperty<string?> SharedSizeGroupProperty;
        protected DefinitionBase() { }
        public string? SharedSizeGroup { get { throw null; } set { } }
        internal abstract double UserMaxSizeValueCache { get; }
        internal abstract double UserMinSizeValueCache { get; }
        internal abstract Avalonia.Controls.GridLength UserSizeValueCache { get; }
        protected static void AffectsParentMeasure(params Avalonia.AvaloniaProperty[] properties) { }
    }
    [Avalonia.Metadata.AvaloniaListAttribute(Separators=new string[]{ ",", " "})]
    public abstract partial class DefinitionList<T> : Avalonia.Collections.AvaloniaList<T> where T : Avalonia.Controls.DefinitionBase
    {
        public DefinitionList() { }
    }
    public static partial class Design
    {
        public static readonly Avalonia.AttachedProperty<object> DataContextProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Styling.IStyle> DesignStyleProperty;
        public static readonly Avalonia.AttachedProperty<double> HeightProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Control?> PreviewWithProperty;
        public static readonly Avalonia.AttachedProperty<double> WidthProperty;
        public static bool IsDesignMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static void ApplyDesignModeProperties(Avalonia.Controls.Control target, Avalonia.Controls.Control source) { }
        public static object GetDataContext(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Styling.IStyle GetDesignStyle(Avalonia.Controls.Control control) { throw null; }
        public static double GetHeight(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.Control? GetPreviewWith(Avalonia.AvaloniaObject target) { throw null; }
        public static Avalonia.Controls.Control? GetPreviewWith(Avalonia.Controls.ResourceDictionary target) { throw null; }
        public static double GetWidth(Avalonia.Controls.Control control) { throw null; }
        public static void SetDataContext(Avalonia.Controls.Control control, object value) { }
        public static void SetDesignStyle(Avalonia.Controls.Control control, Avalonia.Styling.IStyle value) { }
        public static void SetHeight(Avalonia.Controls.Control control, double value) { }
        public static void SetPreviewWith(Avalonia.AvaloniaObject target, Avalonia.Controls.Control? control) { }
        public static void SetPreviewWith(Avalonia.Controls.ResourceDictionary target, Avalonia.Controls.Control? control) { }
        public static void SetWidth(Avalonia.Controls.Control control, double value) { }
    }
    public static partial class DesktopApplicationExtensions
    {
        public static void Run(this Avalonia.Application app, Avalonia.Controls.Window mainWindow) { }
        public static void Run(this Avalonia.Application app, Avalonia.Input.ICloseable closable) { }
        public static void Run(this Avalonia.Application app, System.Threading.CancellationToken token) { }
        public static void RunWithMainWindow<TWindow>(this Avalonia.Application app) where TWindow : Avalonia.Controls.Window, new() { }
    }
    public enum Dock
    {
        Left = 0,
        Bottom = 1,
        Right = 2,
        Top = 3,
    }
    public partial class DockPanel : Avalonia.Controls.Panel
    {
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Dock> DockProperty;
        public static readonly Avalonia.StyledProperty<bool> LastChildFillProperty;
        public DockPanel() { }
        public bool LastChildFill { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size arrangeSize) { throw null; }
        public static Avalonia.Controls.Dock GetDock(Avalonia.Controls.Control control) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size constraint) { throw null; }
        public static void SetDock(Avalonia.Controls.Control control, Avalonia.Controls.Dock value) { }
    }
    public partial class DropDownButton : Avalonia.Controls.Button
    {
        public DropDownButton() { }
    }
    public enum ExpandDirection
    {
        Down = 0,
        Up = 1,
        Left = 2,
        Right = 3,
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":expanded", ":up", ":down", ":left", ":right"})]
    public partial class Expander : Avalonia.Controls.Primitives.HeaderedContentControl
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> CollapsedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.CancelRoutedEventArgs> CollapsingEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Animation.IPageTransition?> ContentTransitionProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ExpandDirection> ExpandDirectionProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> ExpandedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.CancelRoutedEventArgs> ExpandingEvent;
        public static readonly Avalonia.StyledProperty<bool> IsExpandedProperty;
        public Expander() { }
        public Avalonia.Animation.IPageTransition? ContentTransition { get { throw null; } set { } }
        public Avalonia.Controls.ExpandDirection ExpandDirection { get { throw null; } set { } }
        public bool IsExpanded { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Collapsed { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>? Collapsing { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Expanded { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>? Expanding { add { } remove { } }
        protected virtual bool OnCoerceIsExpanded(bool value) { throw null; }
        protected virtual void OnCollapsed(Avalonia.Interactivity.RoutedEventArgs eventArgs) { }
        protected virtual void OnCollapsing(Avalonia.Interactivity.CancelRoutedEventArgs eventArgs) { }
        protected virtual void OnExpanded(Avalonia.Interactivity.RoutedEventArgs eventArgs) { }
        protected virtual void OnExpanding(Avalonia.Interactivity.CancelRoutedEventArgs eventArgs) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class ExperimentalAcrylicBorder : Avalonia.Controls.Decorator
    {
        public static readonly Avalonia.StyledProperty<Avalonia.CornerRadius> CornerRadiusProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.ExperimentalAcrylicMaterial> MaterialProperty;
        public ExperimentalAcrylicBorder() { }
        public Avalonia.CornerRadius CornerRadius { get { throw null; } set { } }
        public Avalonia.Media.ExperimentalAcrylicMaterial Material { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public abstract partial class FileDialog : Avalonia.Controls.FileSystemDialog
    {
        protected FileDialog() { }
        public System.Collections.Generic.List<Avalonia.Controls.FileDialogFilter> Filters { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string? InitialFileName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public partial class FileDialogFilter
    {
        public FileDialogFilter() { }
        public System.Collections.Generic.List<string> Extensions { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string? Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public abstract partial class FileSystemDialog : Avalonia.Controls.SystemDialog
    {
        protected FileSystemDialog() { }
        public string? Directory { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial class Flyout : Avalonia.Controls.Primitives.PopupFlyoutBase
    {
        public static readonly Avalonia.StyledProperty<object> ContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme?> FlyoutPresenterThemeProperty;
        public Flyout() { }
        [Avalonia.Metadata.ContentAttribute]
        public object Content { get { throw null; } set { } }
        public Avalonia.Controls.Classes FlyoutPresenterClasses { get { throw null; } }
        public Avalonia.Styling.ControlTheme? FlyoutPresenterTheme { get { throw null; } set { } }
        protected override Avalonia.Controls.Control CreatePresenter() { throw null; }
        protected override void OnOpening(System.ComponentModel.CancelEventArgs args) { }
    }
    public partial class FlyoutPresenter : Avalonia.Controls.ContentControl
    {
        public FlyoutPresenter() { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
    }
    public enum FlyoutShowMode
    {
        Standard = 0,
        Transient = 1,
        TransientWithDismissOnPointerMoveAway = 2,
    }
    public partial class Grid : Avalonia.Controls.Panel
    {
        public static readonly Avalonia.AttachedProperty<int> ColumnProperty;
        public static readonly Avalonia.AttachedProperty<int> ColumnSpanProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsSharedSizeScopeProperty;
        public static readonly Avalonia.AttachedProperty<int> RowProperty;
        public static readonly Avalonia.AttachedProperty<int> RowSpanProperty;
        public static readonly Avalonia.StyledProperty<bool> ShowGridLinesProperty;
        public Grid() { }
        [System.Diagnostics.CodeAnalysis.MemberNotNullAttribute("_extData")]
        public Avalonia.Controls.ColumnDefinitions ColumnDefinitions { [System.Diagnostics.CodeAnalysis.MemberNotNullAttribute("_extData")] get { throw null; } [System.Diagnostics.CodeAnalysis.MemberNotNullAttribute("_extData")] set { } }
        [System.Diagnostics.CodeAnalysis.MemberNotNullAttribute("_extData")]
        public Avalonia.Controls.RowDefinitions RowDefinitions { [System.Diagnostics.CodeAnalysis.MemberNotNullAttribute("_extData")] get { throw null; } [System.Diagnostics.CodeAnalysis.MemberNotNullAttribute("_extData")] set { } }
        public bool ShowGridLines { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size arrangeSize) { throw null; }
        protected override void ChildrenChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        public static int GetColumn(Avalonia.Controls.Control element) { throw null; }
        public static int GetColumnSpan(Avalonia.Controls.Control element) { throw null; }
        public static bool GetIsSharedSizeScope(Avalonia.Controls.Control element) { throw null; }
        public static int GetRow(Avalonia.Controls.Control element) { throw null; }
        public static int GetRowSpan(Avalonia.Controls.Control element) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size constraint) { throw null; }
        public static void SetColumn(Avalonia.Controls.Control element, int value) { }
        public static void SetColumnSpan(Avalonia.Controls.Control element, int value) { }
        public static void SetIsSharedSizeScope(Avalonia.Controls.Control element, bool value) { }
        public static void SetRow(Avalonia.Controls.Control element, int value) { }
        public static void SetRowSpan(Avalonia.Controls.Control element, int value) { }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct GridLength : System.IEquatable<Avalonia.Controls.GridLength>
    {
        private int _dummyPrimitive;
        public GridLength(double value) { throw null; }
        public GridLength(double value, Avalonia.Controls.GridUnitType type) { throw null; }
        public static Avalonia.Controls.GridLength Auto { get { throw null; } }
        public Avalonia.Controls.GridUnitType GridUnitType { get { throw null; } }
        public bool IsAbsolute { get { throw null; } }
        public bool IsAuto { get { throw null; } }
        public bool IsStar { get { throw null; } }
        public static Avalonia.Controls.GridLength Star { get { throw null; } }
        public double Value { get { throw null; } }
        public bool Equals(Avalonia.Controls.GridLength gridLength) { throw null; }
        public override bool Equals(object? o) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Avalonia.Controls.GridLength a, Avalonia.Controls.GridLength b) { throw null; }
        public static bool operator !=(Avalonia.Controls.GridLength gl1, Avalonia.Controls.GridLength gl2) { throw null; }
        public static Avalonia.Controls.GridLength Parse(string s) { throw null; }
        public static System.Collections.Generic.IEnumerable<Avalonia.Controls.GridLength> ParseLengths(string s) { throw null; }
        public override string ToString() { throw null; }
    }
    public enum GridResizeBehavior
    {
        BasedOnAlignment = 0,
        CurrentAndNext = 1,
        PreviousAndCurrent = 2,
        PreviousAndNext = 3,
    }
    public enum GridResizeDirection
    {
        Auto = 0,
        Columns = 1,
        Rows = 2,
    }
    public partial class GridSplitter : Avalonia.Controls.Primitives.Thumb
    {
        public static readonly Avalonia.StyledProperty<double> DragIncrementProperty;
        public static readonly Avalonia.StyledProperty<double> KeyboardIncrementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>> PreviewContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.GridResizeBehavior> ResizeBehaviorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.GridResizeDirection> ResizeDirectionProperty;
        public static readonly Avalonia.StyledProperty<bool> ShowsPreviewProperty;
        public GridSplitter() { }
        public double DragIncrement { get { throw null; } set { } }
        public double KeyboardIncrement { get { throw null; } set { } }
        public Avalonia.Controls.ITemplate<Avalonia.Controls.Control> PreviewContent { get { throw null; } set { } }
        public Avalonia.Controls.GridResizeBehavior ResizeBehavior { get { throw null; } set { } }
        public Avalonia.Controls.GridResizeDirection ResizeDirection { get { throw null; } set { } }
        public bool ShowsPreview { get { throw null; } set { } }
        protected override void OnDragCompleted(Avalonia.Input.VectorEventArgs e) { }
        protected override void OnDragDelta(Avalonia.Input.VectorEventArgs e) { }
        protected override void OnDragStarted(Avalonia.Input.VectorEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { }
    }
    public enum GridUnitType
    {
        Auto = 0,
        Pixel = 1,
        Star = 2,
    }
    public partial class HotKeyManager
    {
        public static readonly Avalonia.AttachedProperty<Avalonia.Input.KeyGesture?> HotKeyProperty;
        public HotKeyManager() { }
        public static Avalonia.Input.KeyGesture? GetHotKey(Avalonia.AvaloniaObject target) { throw null; }
        public static void SetHotKey(Avalonia.AvaloniaObject target, Avalonia.Input.KeyGesture value) { }
    }
    public abstract partial class IconElement : Avalonia.Controls.Primitives.TemplatedControl
    {
        protected IconElement() { }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IContentControl
    {
        object? Content { get; set; }
        Avalonia.Controls.Templates.IDataTemplate? ContentTemplate { get; set; }
        Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get; set; }
        Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get; set; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IGlobalDataTemplates : Avalonia.Controls.Templates.IDataTemplateHost
    {
    }
    public partial interface IHeadered
    {
        object? Header { get; set; }
    }
    public partial class Image : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IImage?> SourceProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.StretchDirection> StretchDirectionProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Stretch> StretchProperty;
        public Image() { }
        protected override bool BypassFlowDirectionPolicies { get { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Media.IImage? Source { get { throw null; } set { } }
        public Avalonia.Media.Stretch Stretch { get { throw null; } set { } }
        public Avalonia.Media.StretchDirection StretchDirection { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IMenu : Avalonia.Controls.IMenuElement, Avalonia.Input.IInputElement, Avalonia.LogicalTree.ILogical
    {
        Avalonia.Controls.Platform.IMenuInteractionHandler InteractionHandler { get; }
        bool IsOpen { get; }
        Avalonia.Rendering.IRenderRoot? VisualRoot { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IMenuElement : Avalonia.Input.IInputElement, Avalonia.LogicalTree.ILogical
    {
        Avalonia.Controls.IMenuItem? SelectedItem { get; set; }
        System.Collections.Generic.IEnumerable<Avalonia.Controls.IMenuItem> SubItems { get; }
        void Close();
        bool MoveSelection(Avalonia.Input.NavigationDirection direction, bool wrap);
        void Open();
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IMenuItem : Avalonia.Controls.IMenuElement, Avalonia.Input.IInputElement, Avalonia.LogicalTree.ILogical
    {
        bool HasSubMenu { get; }
        bool IsPointerOverSubMenu { get; }
        bool IsSubMenuOpen { get; set; }
        bool IsTopLevel { get; }
        Avalonia.Controls.IMenuElement? Parent { get; }
        bool StaysOpenOnClick { get; set; }
        void RaiseClick();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface INativeMenuExporterEventsImplBridge
    {
        void RaiseClosed();
        void RaiseNeedsUpdate();
        void RaiseOpening();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface INativeMenuItemExporterEventsImplBridge
    {
        void RaiseClicked();
    }
    public partial interface IScrollAnchorProvider
    {
        Avalonia.Controls.Control? CurrentAnchor { get; }
        void RegisterAnchorCandidate(Avalonia.Controls.Control element);
        void UnregisterAnchorCandidate(Avalonia.Controls.Control element);
    }
    public partial interface ISelectable
    {
        bool IsSelected { get; set; }
    }
    public partial class ItemCollection : Avalonia.Controls.ItemsSourceView, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList
    {
        internal ItemCollection() { }
        public bool IsReadOnly { get { throw null; } }
        public new object? this[int index] { get { throw null; } set { } }
        public int Add(object? value) { throw null; }
        public void Clear() { }
        public void Insert(int index, object? value) { }
        public bool Remove(object? value) { throw null; }
        public void RemoveAt(int index) { }
        int System.Collections.IList.Add(object? value) { throw null; }
        void System.Collections.IList.Clear() { }
        void System.Collections.IList.Insert(int index, object? value) { }
        void System.Collections.IList.RemoveAt(int index) { }
    }
    public partial interface ITemplate<TControl> : Avalonia.Styling.ITemplate where TControl : Avalonia.Controls.Control?
    {
        new TControl Build();
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":empty", ":singleitem"})]
    public partial class ItemsControl : Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.Primitives.IScrollSnapPointsInfo, Avalonia.LogicalTree.IChildIndexProvider
    {
        public static readonly Avalonia.StyledProperty<bool> AreHorizontalSnapPointsRegularProperty;
        public static readonly Avalonia.StyledProperty<bool> AreVerticalSnapPointsRegularProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Data.IBinding?> DisplayMemberBindingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme?> ItemContainerThemeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ItemsControl, int> ItemCountProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ITemplate<Avalonia.Controls.Panel?>> ItemsPanelProperty;
        public static readonly Avalonia.StyledProperty<System.Collections.IEnumerable?> ItemsSourceProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> ItemTemplateProperty;
        public ItemsControl() { }
        public bool AreHorizontalSnapPointsRegular { get { throw null; } set { } }
        public bool AreVerticalSnapPointsRegular { get { throw null; } set { } }
        protected static object DefaultRecycleKey { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        [Avalonia.Data.AssignBindingAttribute]
        [Avalonia.Metadata.InheritDataTypeFromItemsAttribute("ItemsSource")]
        public Avalonia.Data.IBinding? DisplayMemberBinding { get { throw null; } set { } }
        public Avalonia.Controls.Generators.ItemContainerGenerator ItemContainerGenerator { get { throw null; } }
        public Avalonia.Styling.ControlTheme? ItemContainerTheme { get { throw null; } set { } }
        public int ItemCount { get { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.ItemCollection Items { get { throw null; } }
        public Avalonia.Controls.ITemplate<Avalonia.Controls.Panel?> ItemsPanel { get { throw null; } set { } }
        public Avalonia.Controls.Panel? ItemsPanelRoot { get { throw null; } }
        public System.Collections.IEnumerable? ItemsSource { get { throw null; } set { } }
        public Avalonia.Controls.ItemsSourceView ItemsView { get { throw null; } }
        [Avalonia.Metadata.InheritDataTypeFromItemsAttribute("ItemsSource")]
        public Avalonia.Controls.Templates.IDataTemplate? ItemTemplate { get { throw null; } set { } }
        public Avalonia.Controls.Presenters.ItemsPresenter? Presenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        event System.EventHandler<Avalonia.LogicalTree.ChildIndexChangedEventArgs>? Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ContainerClearingEventArgs>? ContainerClearing { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ContainerIndexChangedEventArgs>? ContainerIndexChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ContainerPreparedEventArgs>? ContainerPrepared { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> HorizontalSnapPointsChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> VerticalSnapPointsChanged { add { } remove { } }
        int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(Avalonia.LogicalTree.ILogical child) { throw null; }
        bool Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(out int count) { throw null; }
        protected internal virtual void ClearContainerForItemOverride(Avalonia.Controls.Control container) { }
        protected internal virtual void ContainerForItemPreparedOverride(Avalonia.Controls.Control container, object? item, int index) { }
        public Avalonia.Controls.Control? ContainerFromIndex(int index) { throw null; }
        public Avalonia.Controls.Control? ContainerFromItem(object item) { throw null; }
        protected virtual void ContainerIndexChangedOverride(Avalonia.Controls.Control container, int oldIndex, int newIndex) { }
        protected internal virtual Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        public System.Collections.Generic.IReadOnlyList<double> GetIrregularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment) { throw null; }
        protected static Avalonia.Input.IInputElement? GetNextControl(Avalonia.Input.INavigableContainer container, Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap) { throw null; }
        public System.Collections.Generic.IEnumerable<Avalonia.Controls.Control> GetRealizedContainers() { throw null; }
        public double GetRegularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment, out double offset) { throw null; }
        public int IndexFromContainer(Avalonia.Controls.Control container) { throw null; }
        public object? ItemFromContainer(Avalonia.Controls.Control container) { throw null; }
        protected internal virtual bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected bool NeedsContainer<T>(object? item, out object? recycleKey) where T : Avalonia.Controls.Control { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected internal virtual void PrepareContainerForItemOverride(Avalonia.Controls.Control container, object? item, int index) { }
        protected void RefreshContainers() { }
    }
    public partial class ItemsSourceView : System.Collections.Generic.IEnumerable<object?>, System.Collections.Generic.IReadOnlyCollection<object?>, System.Collections.Generic.IReadOnlyList<object?>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.Specialized.INotifyCollectionChanged
    {
        internal ItemsSourceView() { }
        public int Count { get { throw null; } }
        public static Avalonia.Controls.ItemsSourceView Empty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public object? this[int index] { get { throw null; } }
        public System.Collections.IList Source { get { throw null; } }
        bool System.Collections.ICollection.IsSynchronized { get { throw null; } }
        object System.Collections.ICollection.SyncRoot { get { throw null; } }
        bool System.Collections.IList.IsFixedSize { get { throw null; } }
        bool System.Collections.IList.IsReadOnly { get { throw null; } }
        object? System.Collections.IList.this[int index] { get { throw null; } set { } }
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler? CollectionChanged { add { } remove { } }
        public bool Contains(object? item) { throw null; }
        public object? GetAt(int index) { throw null; }
        public System.Collections.Generic.IEnumerator<object?> GetEnumerator() { throw null; }
        public static Avalonia.Controls.ItemsSourceView GetOrCreate(System.Collections.IEnumerable? items) { throw null; }
        public static Avalonia.Controls.ItemsSourceView<T> GetOrCreate<T>(System.Collections.Generic.IEnumerable<T>? items) { throw null; }
        public static Avalonia.Controls.ItemsSourceView<T> GetOrCreate<T>(System.Collections.IEnumerable? items) { throw null; }
        public int IndexOf(object? item) { throw null; }
        void System.Collections.ICollection.CopyTo(System.Array array, int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
        int System.Collections.IList.Add(object? value) { throw null; }
        void System.Collections.IList.Clear() { }
        void System.Collections.IList.Insert(int index, object? value) { }
        void System.Collections.IList.Remove(object? value) { }
        void System.Collections.IList.RemoveAt(int index) { }
    }
    public sealed partial class ItemsSourceView<T> : Avalonia.Controls.ItemsSourceView, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IEnumerable
    {
        internal ItemsSourceView() { }
        public static new Avalonia.Controls.ItemsSourceView<T> Empty { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public new T this[int index] { get { throw null; } }
        public new T GetAt(int index) { throw null; }
        public new System.Collections.Generic.IEnumerator<T> GetEnumerator() { throw null; }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public partial class Label : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Input.IInputElement?> TargetProperty;
        public Label() { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public Avalonia.Input.IInputElement? Target { get { throw null; } set { } }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
    }
    public partial class LayoutTransformControl : Avalonia.Controls.Decorator
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.ITransform?> LayoutTransformProperty;
        public static readonly Avalonia.StyledProperty<bool> UseRenderTransformProperty;
        public LayoutTransformControl() { }
        public Avalonia.Media.ITransform? LayoutTransform { get { throw null; } set { } }
        public Avalonia.Controls.Control? TransformRoot { get { throw null; } }
        public bool UseRenderTransform { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ScrollViewer", typeof(Avalonia.Controls.Primitives.IScrollable))]
    public partial class ListBox : Avalonia.Controls.Primitives.SelectingItemsControl
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ListBox, Avalonia.Controls.Primitives.IScrollable?> ScrollProperty;
        public static readonly new Avalonia.DirectProperty<Avalonia.Controls.Primitives.SelectingItemsControl, System.Collections.IList?> SelectedItemsProperty;
        public static readonly new Avalonia.StyledProperty<Avalonia.Controls.SelectionMode> SelectionModeProperty;
        public static readonly new Avalonia.DirectProperty<Avalonia.Controls.Primitives.SelectingItemsControl, Avalonia.Controls.Selection.ISelectionModel> SelectionProperty;
        public ListBox() { }
        public Avalonia.Controls.Primitives.IScrollable? Scroll { get { throw null; } }
        public new System.Collections.IList? SelectedItems { get { throw null; } set { } }
        public new Avalonia.Controls.Selection.ISelectionModel Selection { get { throw null; } set { } }
        public new Avalonia.Controls.SelectionMode SelectionMode { get { throw null; } set { } }
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        public void SelectAll() { }
        public void UnselectAll() { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":pressed", ":selected"})]
    public partial class ListBoxItem : Avalonia.Controls.ContentControl, Avalonia.Controls.ISelectable
    {
        public static readonly Avalonia.StyledProperty<bool> IsSelectedProperty;
        public ListBoxItem() { }
        public bool IsSelected { get { throw null; } set { } }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
    }
    public enum Location
    {
        Left = 0,
        Right = 1,
    }
    public partial class MaskedTextBox : Avalonia.Controls.TextBox, Avalonia.INamed, Avalonia.Styling.IStyleable
    {
        public static readonly Avalonia.StyledProperty<bool> AsciiOnlyProperty;
        public static readonly Avalonia.StyledProperty<System.Globalization.CultureInfo?> CultureProperty;
        public static readonly Avalonia.StyledProperty<bool> HidePromptOnLeaveProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.MaskedTextBox, bool?> MaskCompletedProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.MaskedTextBox, bool?> MaskFullProperty;
        public static readonly Avalonia.StyledProperty<string?> MaskProperty;
        public static readonly Avalonia.StyledProperty<char> PromptCharProperty;
        public static readonly Avalonia.StyledProperty<bool> ResetOnPromptProperty;
        public static readonly Avalonia.StyledProperty<bool> ResetOnSpaceProperty;
        public MaskedTextBox() { }
        public MaskedTextBox(System.ComponentModel.MaskedTextProvider maskedTextProvider) { }
        public bool AsciiOnly { get { throw null; } set { } }
        System.Type Avalonia.Styling.IStyleable.StyleKey { get { throw null; } }
        public System.Globalization.CultureInfo? Culture { get { throw null; } set { } }
        public bool HidePromptOnLeave { get { throw null; } set { } }
        public string? Mask { get { throw null; } set { } }
        public bool? MaskCompleted { get { throw null; } }
        public bool? MaskFull { get { throw null; } }
        public System.ComponentModel.MaskedTextProvider? MaskProvider { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public char PromptChar { get { throw null; } set { } }
        public bool ResetOnPrompt { get { throw null; } set { } }
        public bool ResetOnSpace { get { throw null; } set { } }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override void OnTextInput(Avalonia.Input.TextInputEventArgs e) { }
    }
    public partial class Menu : Avalonia.Controls.MenuBase, Avalonia.Input.IMainMenu
    {
        public Menu() { }
        public Menu(Avalonia.Controls.Platform.IMenuInteractionHandler interactionHandler) { }
        public override void Close() { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        public override void Open() { }
        protected internal override void PrepareContainerForItemOverride(Avalonia.Controls.Control element, object? item, int index) { }
    }
    public abstract partial class MenuBase : Avalonia.Controls.Primitives.SelectingItemsControl, Avalonia.Controls.IMenu, Avalonia.Controls.IMenuElement, Avalonia.Input.IFocusScope, Avalonia.Input.IInputElement, Avalonia.LogicalTree.ILogical
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.MenuBase, bool> IsOpenProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> MenuClosedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> MenuOpenedEvent;
        protected MenuBase() { }
        protected MenuBase(Avalonia.Controls.Platform.IMenuInteractionHandler interactionHandler) { }
        Avalonia.Controls.Platform.IMenuInteractionHandler Avalonia.Controls.IMenu.InteractionHandler { get { throw null; } }
        Avalonia.Rendering.IRenderRoot? Avalonia.Controls.IMenu.VisualRoot { get { throw null; } }
        Avalonia.Controls.IMenuItem? Avalonia.Controls.IMenuElement.SelectedItem { get { throw null; } set { } }
        System.Collections.Generic.IEnumerable<Avalonia.Controls.IMenuItem> Avalonia.Controls.IMenuElement.SubItems { get { throw null; } }
        protected Avalonia.Controls.Platform.IMenuInteractionHandler InteractionHandler { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool IsOpen { get { throw null; } protected set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? MenuClosed { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? MenuOpened { add { } remove { } }
        bool Avalonia.Controls.IMenuElement.MoveSelection(Avalonia.Input.NavigationDirection direction, bool wrap) { throw null; }
        public abstract void Close();
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected virtual void OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs e) { }
        public abstract void Open();
    }
    public partial class MenuFlyout : Avalonia.Controls.Primitives.PopupFlyoutBase
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme?> FlyoutPresenterThemeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme?> ItemContainerThemeProperty;
        public static readonly Avalonia.StyledProperty<System.Collections.IEnumerable?> ItemsSourceProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> ItemTemplateProperty;
        public MenuFlyout() { }
        public Avalonia.Controls.Classes FlyoutPresenterClasses { get { throw null; } }
        public Avalonia.Styling.ControlTheme? FlyoutPresenterTheme { get { throw null; } set { } }
        public Avalonia.Styling.ControlTheme? ItemContainerTheme { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.ItemCollection Items { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Collections.IEnumerable? ItemsSource { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate? ItemTemplate { get { throw null; } set { } }
        protected override Avalonia.Controls.Control CreatePresenter() { throw null; }
        protected override void OnOpening(System.ComponentModel.CancelEventArgs args) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class MenuFlyoutPresenter : Avalonia.Controls.MenuBase
    {
        public MenuFlyoutPresenter() { }
        public MenuFlyoutPresenter(Avalonia.Controls.Platform.IMenuInteractionHandler menuInteractionHandler) { }
        public override void Close() { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        public override void Open() { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":separator", ":icon", ":open", ":pressed", ":selected"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Popup", typeof(Avalonia.Controls.Primitives.Popup))]
    public partial class MenuItem : Avalonia.Controls.Primitives.HeaderedSelectingItemsControl, Avalonia.Controls.IMenuElement, Avalonia.Controls.IMenuItem, Avalonia.Controls.ISelectable, Avalonia.Input.ICommandSource, Avalonia.Input.IInputElement, Avalonia.LogicalTree.ILogical
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> ClickEvent;
        public static readonly Avalonia.StyledProperty<object?> CommandParameterProperty;
        public static readonly Avalonia.StyledProperty<System.Windows.Input.ICommand?> CommandProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.KeyGesture?> HotKeyProperty;
        public static readonly Avalonia.StyledProperty<object?> IconProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.KeyGesture?> InputGestureProperty;
        public static readonly Avalonia.StyledProperty<bool> IsSubMenuOpenProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> PointerEnteredItemEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> PointerExitedItemEvent;
        public static readonly Avalonia.StyledProperty<bool> StaysOpenOnClickProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> SubmenuOpenedEvent;
        public MenuItem() { }
        Avalonia.Controls.IMenuItem? Avalonia.Controls.IMenuElement.SelectedItem { get { throw null; } set { } }
        System.Collections.Generic.IEnumerable<Avalonia.Controls.IMenuItem> Avalonia.Controls.IMenuElement.SubItems { get { throw null; } }
        bool Avalonia.Controls.IMenuItem.IsPointerOverSubMenu { get { throw null; } }
        Avalonia.Controls.IMenuElement? Avalonia.Controls.IMenuItem.Parent { get { throw null; } }
        public System.Windows.Input.ICommand? Command { get { throw null; } set { } }
        public object? CommandParameter { get { throw null; } set { } }
        public bool HasSubMenu { get { throw null; } }
        public Avalonia.Input.KeyGesture? HotKey { get { throw null; } set { } }
        public object? Icon { get { throw null; } set { } }
        public Avalonia.Input.KeyGesture? InputGesture { get { throw null; } set { } }
        protected override bool IsEnabledCore { get { throw null; } }
        public bool IsSelected { get { throw null; } set { } }
        public bool IsSubMenuOpen { get { throw null; } set { } }
        public bool IsTopLevel { get { throw null; } }
        public bool StaysOpenOnClick { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Click { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? PointerEnteredItem { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? PointerExitedItem { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? SubmenuOpened { add { } remove { } }
        bool Avalonia.Controls.IMenuElement.MoveSelection(Avalonia.Input.NavigationDirection direction, bool wrap) { throw null; }
        void Avalonia.Controls.IMenuItem.RaiseClick() { }
        void Avalonia.Input.ICommandSource.CanExecuteChanged(object sender, System.EventArgs e) { }
        public void Close() { }
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected virtual void OnClick(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerExited(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected virtual void OnSubmenuOpened(Avalonia.Interactivity.RoutedEventArgs e) { }
        public void Open() { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
    }
    public partial class MenuItemAccessKeyHandler : Avalonia.Input.IAccessKeyHandler
    {
        public MenuItemAccessKeyHandler() { }
        public Avalonia.Input.IMainMenu? MainMenu { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        protected virtual void OnTextInput(object? sender, Avalonia.Input.TextInputEventArgs e) { }
        public void Register(char accessKey, Avalonia.Input.IInputElement element) { }
        public void SetOwner(Avalonia.Input.IInputRoot owner) { }
        public void Unregister(Avalonia.Input.IInputElement element) { }
    }
    public partial class NativeControlHost : Avalonia.Controls.Control
    {
        public NativeControlHost() { }
        protected virtual Avalonia.Platform.IPlatformHandle CreateNativeControlCore(Avalonia.Platform.IPlatformHandle parent) { throw null; }
        protected virtual void DestroyNativeControlCore(Avalonia.Platform.IPlatformHandle control) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        public bool TryUpdateNativeControlPosition() { throw null; }
    }
    public partial class NativeMenu : Avalonia.AvaloniaObject, Avalonia.Controls.INativeMenuExporterEventsImplBridge, System.Collections.Generic.IEnumerable<Avalonia.Controls.NativeMenuItemBase>, System.Collections.IEnumerable
    {
        public static readonly Avalonia.AttachedProperty<bool> IsNativeMenuExportedProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.NativeMenu?> MenuProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.NativeMenu, Avalonia.Controls.NativeMenuItem?> ParentProperty;
        public NativeMenu() { }
        [Avalonia.Metadata.ContentAttribute]
        public System.Collections.Generic.IList<Avalonia.Controls.NativeMenuItemBase> Items { get { throw null; } }
        public Avalonia.Controls.NativeMenuItem? Parent { get { throw null; } }
        public event System.EventHandler<System.EventArgs>? Closed { add { } remove { } }
        public event System.EventHandler<System.EventArgs>? NeedsUpdate { add { } remove { } }
        public event System.EventHandler<System.EventArgs>? Opening { add { } remove { } }
        public void Add(Avalonia.Controls.NativeMenuItemBase item) { }
        void Avalonia.Controls.INativeMenuExporterEventsImplBridge.RaiseClosed() { }
        void Avalonia.Controls.INativeMenuExporterEventsImplBridge.RaiseNeedsUpdate() { }
        void Avalonia.Controls.INativeMenuExporterEventsImplBridge.RaiseOpening() { }
        public System.Collections.Generic.IEnumerator<Avalonia.Controls.NativeMenuItemBase> GetEnumerator() { throw null; }
        public static bool GetIsNativeMenuExported(Avalonia.Controls.TopLevel tl) { throw null; }
        public static Avalonia.Controls.NativeMenu? GetMenu(Avalonia.AvaloniaObject o) { throw null; }
        public static void SetMenu(Avalonia.AvaloniaObject o, Avalonia.Controls.NativeMenu? menu) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public partial class NativeMenuBar : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.AttachedProperty<bool> EnableMenuItemClickForwardingProperty;
        public NativeMenuBar() { }
        public static void SetEnableMenuItemClickForwarding(Avalonia.Controls.MenuItem menuItem, bool enable) { }
    }
    public partial class NativeMenuItem : Avalonia.Controls.NativeMenuItemBase, Avalonia.Controls.INativeMenuItemExporterEventsImplBridge
    {
        public static readonly Avalonia.StyledProperty<object?> CommandParameterProperty;
        public static readonly Avalonia.StyledProperty<System.Windows.Input.ICommand?> CommandProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.KeyGesture?> GestureProperty;
        public static readonly Avalonia.StyledProperty<string?> HeaderProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Imaging.IBitmap?> IconProperty;
        public static readonly Avalonia.StyledProperty<bool> IsCheckedProperty;
        public static readonly Avalonia.StyledProperty<bool> IsEnabledProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.NativeMenu?> MenuProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.NativeMenuItemToggleType> ToggleTypeProperty;
        public NativeMenuItem() { }
        public NativeMenuItem(string header) { }
        public System.Windows.Input.ICommand? Command { get { throw null; } set { } }
        public object? CommandParameter { get { throw null; } set { } }
        public Avalonia.Input.KeyGesture? Gesture { get { throw null; } set { } }
        public bool HasClickHandlers { get { throw null; } }
        public string? Header { get { throw null; } set { } }
        public Avalonia.Media.Imaging.IBitmap? Icon { get { throw null; } set { } }
        public bool IsChecked { get { throw null; } set { } }
        public bool IsEnabled { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.NativeMenu? Menu { get { throw null; } set { } }
        public Avalonia.Controls.NativeMenuItemToggleType ToggleType { get { throw null; } set { } }
        public event System.EventHandler? Click { add { } remove { } }
        void Avalonia.Controls.INativeMenuItemExporterEventsImplBridge.RaiseClicked() { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class NativeMenuItemBase : Avalonia.AvaloniaObject
    {
        internal NativeMenuItemBase() { }
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.NativeMenuItemBase, Avalonia.Controls.NativeMenu?> ParentProperty;
        public Avalonia.Controls.NativeMenu? Parent { get { throw null; } }
    }
    public partial class NativeMenuItemSeparator : Avalonia.Controls.NativeMenuItem
    {
        public NativeMenuItemSeparator() { }
    }
    public enum NativeMenuItemToggleType
    {
        None = 0,
        CheckBox = 1,
        Radio = 2,
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Spinner", typeof(Avalonia.Controls.Spinner))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TextBox", typeof(Avalonia.Controls.TextBox))]
    public partial class NumericUpDown : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<bool> AllowSpinProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Location> ButtonSpinnerLocationProperty;
        public static readonly Avalonia.StyledProperty<bool> ClipValueToMinMaxProperty;
        public static readonly Avalonia.StyledProperty<string> FormatStringProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<decimal> IncrementProperty;
        public static readonly Avalonia.StyledProperty<bool> IsReadOnlyProperty;
        public static readonly Avalonia.StyledProperty<decimal> MaximumProperty;
        public static readonly Avalonia.StyledProperty<decimal> MinimumProperty;
        public static readonly Avalonia.StyledProperty<System.Globalization.NumberFormatInfo?> NumberFormatProperty;
        public static readonly Avalonia.StyledProperty<System.Globalization.NumberStyles> ParsingNumberStyleProperty;
        public static readonly Avalonia.StyledProperty<bool> ShowButtonSpinnerProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Data.Converters.IValueConverter?> TextConverterProperty;
        public static readonly Avalonia.StyledProperty<string?> TextProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.NumericUpDownValueChangedEventArgs> ValueChangedEvent;
        public static readonly Avalonia.StyledProperty<decimal?> ValueProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<string?> WatermarkProperty;
        public NumericUpDown() { }
        public bool AllowSpin { get { throw null; } set { } }
        public Avalonia.Controls.Location ButtonSpinnerLocation { get { throw null; } set { } }
        public bool ClipValueToMinMax { get { throw null; } set { } }
        public string FormatString { get { throw null; } set { } }
        public Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get { throw null; } set { } }
        public decimal Increment { get { throw null; } set { } }
        public bool IsReadOnly { get { throw null; } set { } }
        public decimal Maximum { get { throw null; } set { } }
        public decimal Minimum { get { throw null; } set { } }
        public System.Globalization.NumberFormatInfo? NumberFormat { get { throw null; } set { } }
        public System.Globalization.NumberStyles ParsingNumberStyle { get { throw null; } set { } }
        public bool ShowButtonSpinner { get { throw null; } set { } }
        public string? Text { get { throw null; } set { } }
        public Avalonia.Data.Converters.IValueConverter? TextConverter { get { throw null; } set { } }
        public decimal? Value { get { throw null; } set { } }
        public Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get { throw null; } set { } }
        public string? Watermark { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.SpinEventArgs>? Spinned { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.NumericUpDownValueChangedEventArgs>? ValueChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected virtual decimal OnCoerceIncrement(decimal baseValue) { throw null; }
        protected virtual decimal OnCoerceMaximum(decimal baseValue) { throw null; }
        protected virtual decimal OnCoerceMinimum(decimal baseValue) { throw null; }
        protected virtual decimal? OnCoerceValue(decimal? baseValue) { throw null; }
        protected virtual void OnFormatStringChanged(string? oldValue, string? newValue) { }
        protected virtual void OnIncrementChanged(decimal oldValue, decimal newValue) { }
        protected virtual void OnIsReadOnlyChanged(bool oldValue, bool newValue) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected virtual void OnMaximumChanged(decimal oldValue, decimal newValue) { }
        protected virtual void OnMinimumChanged(decimal oldValue, decimal newValue) { }
        protected virtual void OnNumberFormatChanged(System.Globalization.NumberFormatInfo? oldValue, System.Globalization.NumberFormatInfo? newValue) { }
        protected virtual void OnSpin(Avalonia.Controls.SpinEventArgs e) { }
        protected virtual void OnTextChanged(string? oldValue, string? newValue) { }
        protected virtual void OnTextConverterChanged(Avalonia.Data.Converters.IValueConverter? oldValue, Avalonia.Data.Converters.IValueConverter? newValue) { }
        protected virtual void OnValueChanged(decimal? oldValue, decimal? newValue) { }
        protected virtual void RaiseValueChangedEvent(decimal? oldValue, decimal? newValue) { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
    }
    public partial class NumericUpDownValueChangedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public NumericUpDownValueChangedEventArgs(Avalonia.Interactivity.RoutedEvent routedEvent, decimal? oldValue, decimal? newValue) { }
        public decimal? NewValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public decimal? OldValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public partial class OpenFileDialog : Avalonia.Controls.FileDialog
    {
        public OpenFileDialog() { }
        public bool AllowMultiple { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Threading.Tasks.Task<string[]?> ShowAsync(Avalonia.Controls.Window parent) { throw null; }
        public Avalonia.Platform.Storage.FilePickerOpenOptions ToFilePickerOpenOptions() { throw null; }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public partial class OpenFolderDialog : Avalonia.Controls.FileSystemDialog
    {
        public OpenFolderDialog() { }
        public System.Threading.Tasks.Task<string?> ShowAsync(Avalonia.Controls.Window parent) { throw null; }
        public Avalonia.Platform.Storage.FolderPickerOpenOptions ToFolderPickerOpenOptions() { throw null; }
    }
    public partial class Panel : Avalonia.Controls.Control, Avalonia.LogicalTree.IChildIndexProvider
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BackgroundProperty;
        public Panel() { }
        public Avalonia.Media.IBrush? Background { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Controls Children { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool IsItemsHost { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        event System.EventHandler<Avalonia.LogicalTree.ChildIndexChangedEventArgs>? Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged { add { } remove { } }
        protected static void AffectsParentArrange<TPanel>(params Avalonia.AvaloniaProperty[] properties) where TPanel : Avalonia.Controls.Panel { }
        protected static void AffectsParentMeasure<TPanel>(params Avalonia.AvaloniaProperty[] properties) where TPanel : Avalonia.Controls.Panel { }
        int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(Avalonia.LogicalTree.ILogical child) { throw null; }
        protected virtual void ChildrenChanged(object? sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
        public bool TryGetTotalCount(out int count) { throw null; }
    }
    public partial class PathIcon : Avalonia.Controls.IconElement
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Geometry> DataProperty;
        public PathIcon() { }
        public Avalonia.Media.Geometry Data { get { throw null; } set { } }
    }
    public partial class PixelPointEventArgs : System.EventArgs
    {
        public PixelPointEventArgs(Avalonia.PixelPoint point) { }
        public Avalonia.PixelPoint Point { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum PlacementMode
    {
        Pointer = 0,
        Bottom = 1,
        Right = 2,
        Left = 3,
        Top = 4,
        Center = 5,
        AnchorAndGravity = 6,
        TopEdgeAlignedLeft = 7,
        TopEdgeAlignedRight = 8,
        BottomEdgeAlignedLeft = 9,
        BottomEdgeAlignedRight = 10,
        LeftEdgeAlignedTop = 11,
        LeftEdgeAlignedBottom = 12,
        RightEdgeAlignedTop = 13,
        RightEdgeAlignedBottom = 14,
    }
    public enum PlatformInhibitionType
    {
        AppSleep = 0,
    }
    public partial class PopulatedEventArgs : System.EventArgs
    {
        public PopulatedEventArgs(System.Collections.IEnumerable data) { }
        public System.Collections.IEnumerable Data { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class PopulatingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public PopulatingEventArgs(string? parameter) { }
        public string? Parameter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":vertical", ":horizontal", ":indeterminate"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Indicator", typeof(Avalonia.Controls.Border))]
    public partial class ProgressBar : Avalonia.Controls.Primitives.RangeBase
    {
        public static readonly Avalonia.StyledProperty<double> IndeterminateEndingOffsetProperty;
        public static readonly Avalonia.StyledProperty<double> IndeterminateStartingOffsetProperty;
        public static readonly Avalonia.StyledProperty<bool> IsIndeterminateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ProgressBar, double> PercentageProperty;
        public static readonly Avalonia.StyledProperty<string> ProgressTextFormatProperty;
        public static readonly Avalonia.StyledProperty<bool> ShowProgressTextProperty;
        public ProgressBar() { }
        public double IndeterminateEndingOffset { get { throw null; } set { } }
        public double IndeterminateStartingOffset { get { throw null; } set { } }
        public bool IsIndeterminate { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public double Percentage { get { throw null; } }
        public string ProgressTextFormat { get { throw null; } set { } }
        public bool ShowProgressText { get { throw null; } set { } }
        public Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings TemplateSettings { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public partial class ProgressBarTemplateSettings : Avalonia.AvaloniaObject
        {
            public static readonly Avalonia.DirectProperty<Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings, double> Container2AnimationEndPositionProperty;
            public static readonly Avalonia.DirectProperty<Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings, double> Container2AnimationStartPositionProperty;
            public static readonly Avalonia.DirectProperty<Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings, double> Container2WidthProperty;
            public static readonly Avalonia.DirectProperty<Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings, double> ContainerAnimationEndPositionProperty;
            public static readonly Avalonia.DirectProperty<Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings, double> ContainerAnimationStartPositionProperty;
            public static readonly Avalonia.DirectProperty<Avalonia.Controls.ProgressBar.ProgressBarTemplateSettings, double> ContainerWidthProperty;
            public ProgressBarTemplateSettings() { }
            public double Container2AnimationEndPosition { get { throw null; } set { } }
            public double Container2AnimationStartPosition { get { throw null; } set { } }
            public double Container2Width { get { throw null; } set { } }
            public double ContainerAnimationEndPosition { get { throw null; } set { } }
            public double ContainerAnimationStartPosition { get { throw null; } set { } }
            public double ContainerWidth { get { throw null; } set { } }
        }
    }
    public partial class RadioButton : Avalonia.Controls.Primitives.ToggleButton
    {
        public static readonly Avalonia.StyledProperty<string?> GroupNameProperty;
        public RadioButton() { }
        public string? GroupName { get { throw null; } set { } }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override void Toggle() { }
    }
    public partial class RefreshCompletionDeferral
    {
        public RefreshCompletionDeferral(System.Action deferredAction) { }
        public void Complete() { }
        public Avalonia.Controls.RefreshCompletionDeferral Get() { throw null; }
    }
    public partial class RefreshContainer : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Input.PullDirection> PullDirectionProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.RefreshRequestedEventArgs> RefreshRequestedEvent;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.RefreshContainer, Avalonia.Controls.RefreshVisualizer?> VisualizerProperty;
        public RefreshContainer() { }
        public Avalonia.Input.PullDirection PullDirection { get { throw null; } set { } }
        public Avalonia.Controls.RefreshVisualizer? Visualizer { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.RefreshRequestedEventArgs>? RefreshRequested { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public void RequestRefresh() { }
    }
    public partial class RefreshRequestedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public RefreshRequestedEventArgs(Avalonia.Controls.RefreshCompletionDeferral completionDeferral, Avalonia.Interactivity.RoutedEvent? routedEvent) { }
        public RefreshRequestedEventArgs(System.Action deferredAction, Avalonia.Interactivity.RoutedEvent? routedEvent) { }
        public Avalonia.Controls.RefreshCompletionDeferral GetDeferral() { throw null; }
    }
    public partial class RefreshVisualizer : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.RefreshVisualizer, Avalonia.Controls.RefreshVisualizerOrientation> OrientationProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.RefreshRequestedEventArgs> RefreshRequestedEvent;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.RefreshVisualizer, Avalonia.Controls.RefreshVisualizerState> RefreshVisualizerStateProperty;
        public RefreshVisualizer() { }
        public Avalonia.Controls.RefreshVisualizerOrientation Orientation { get { throw null; } set { } }
        protected Avalonia.Controls.RefreshVisualizerState RefreshVisualizerState { get { throw null; } }
        public event System.EventHandler<Avalonia.Controls.RefreshRequestedEventArgs>? RefreshRequested { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public void RequestRefresh() { }
    }
    public enum RefreshVisualizerOrientation
    {
        Auto = 0,
        Normal = 1,
        Rotate90DegreesCounterclockwise = 2,
        Rotate270DegreesCounterclockwise = 3,
    }
    public enum RefreshVisualizerState
    {
        Idle = 0,
        Peeking = 1,
        Interacting = 2,
        Pending = 3,
        Refreshing = 4,
    }
    public partial class RelativePanel : Avalonia.Controls.Panel
    {
        public static readonly Avalonia.AttachedProperty<object> AboveProperty;
        public static readonly Avalonia.AttachedProperty<bool> AlignBottomWithPanelProperty;
        public static readonly Avalonia.AttachedProperty<object> AlignBottomWithProperty;
        public static readonly Avalonia.AttachedProperty<bool> AlignHorizontalCenterWithPanelProperty;
        public static readonly Avalonia.AttachedProperty<object> AlignHorizontalCenterWithProperty;
        public static readonly Avalonia.AttachedProperty<bool> AlignLeftWithPanelProperty;
        public static readonly Avalonia.AttachedProperty<object> AlignLeftWithProperty;
        public static readonly Avalonia.AttachedProperty<bool> AlignRightWithPanelProperty;
        public static readonly Avalonia.AttachedProperty<object> AlignRightWithProperty;
        public static readonly Avalonia.AttachedProperty<bool> AlignTopWithPanelProperty;
        public static readonly Avalonia.AttachedProperty<object> AlignTopWithProperty;
        public static readonly Avalonia.AttachedProperty<bool> AlignVerticalCenterWithPanelProperty;
        public static readonly Avalonia.AttachedProperty<object> AlignVerticalCenterWithProperty;
        public static readonly Avalonia.AttachedProperty<object> BelowProperty;
        public static readonly Avalonia.AttachedProperty<object> LeftOfProperty;
        public static readonly Avalonia.AttachedProperty<object> RightOfProperty;
        public RelativePanel() { }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size arrangeSize) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetAbove(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetAlignBottomWith(Avalonia.AvaloniaObject obj) { throw null; }
        public static bool GetAlignBottomWithPanel(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetAlignHorizontalCenterWith(Avalonia.AvaloniaObject obj) { throw null; }
        public static bool GetAlignHorizontalCenterWithPanel(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetAlignLeftWith(Avalonia.AvaloniaObject obj) { throw null; }
        public static bool GetAlignLeftWithPanel(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetAlignRightWith(Avalonia.AvaloniaObject obj) { throw null; }
        public static bool GetAlignRightWithPanel(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetAlignTopWith(Avalonia.AvaloniaObject obj) { throw null; }
        public static bool GetAlignTopWithPanel(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetAlignVerticalCenterWith(Avalonia.AvaloniaObject obj) { throw null; }
        public static bool GetAlignVerticalCenterWithPanel(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetBelow(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetLeftOf(Avalonia.AvaloniaObject obj) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static object GetRightOf(Avalonia.AvaloniaObject obj) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetAbove(Avalonia.AvaloniaObject obj, object value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetAlignBottomWith(Avalonia.AvaloniaObject obj, object value) { }
        public static void SetAlignBottomWithPanel(Avalonia.AvaloniaObject obj, bool value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetAlignHorizontalCenterWith(Avalonia.AvaloniaObject obj, object value) { }
        public static void SetAlignHorizontalCenterWithPanel(Avalonia.AvaloniaObject obj, bool value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetAlignLeftWith(Avalonia.AvaloniaObject obj, object value) { }
        public static void SetAlignLeftWithPanel(Avalonia.AvaloniaObject obj, bool value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetAlignRightWith(Avalonia.AvaloniaObject obj, object value) { }
        public static void SetAlignRightWithPanel(Avalonia.AvaloniaObject obj, bool value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetAlignTopWith(Avalonia.AvaloniaObject obj, object value) { }
        public static void SetAlignTopWithPanel(Avalonia.AvaloniaObject obj, bool value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetAlignVerticalCenterWith(Avalonia.AvaloniaObject obj, object value) { }
        public static void SetAlignVerticalCenterWithPanel(Avalonia.AvaloniaObject obj, bool value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetBelow(Avalonia.AvaloniaObject obj, object value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetLeftOf(Avalonia.AvaloniaObject obj, object value) { }
        [Avalonia.Controls.ResolveByNameAttribute]
        public static void SetRightOf(Avalonia.AvaloniaObject obj, object value) { }
    }
    public partial class RepeatButton : Avalonia.Controls.Button
    {
        public static readonly Avalonia.StyledProperty<int> DelayProperty;
        public static readonly Avalonia.StyledProperty<int> IntervalProperty;
        public RepeatButton() { }
        public int Delay { get { throw null; } set { } }
        public int Interval { get { throw null; } set { } }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnKeyUp(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class RequestBringIntoViewEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public RequestBringIntoViewEventArgs() { }
        public Avalonia.Visual? TargetObject { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Rect TargetRect { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    [System.AttributeUsageAttribute(System.AttributeTargets.Method | System.AttributeTargets.Property)]
    public sealed partial class ResolveByNameAttribute : System.Attribute
    {
        public ResolveByNameAttribute() { }
    }
    public partial class ReversibleStackPanel : Avalonia.Controls.StackPanel
    {
        public static readonly Avalonia.StyledProperty<bool> ReverseOrderProperty;
        public ReversibleStackPanel() { }
        public bool ReverseOrder { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
    }
    public partial class RowDefinition : Avalonia.Controls.DefinitionBase
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.GridLength> HeightProperty;
        public static readonly Avalonia.StyledProperty<double> MaxHeightProperty;
        public static readonly Avalonia.StyledProperty<double> MinHeightProperty;
        public RowDefinition() { }
        public RowDefinition(Avalonia.Controls.GridLength height) { }
        public RowDefinition(double value, Avalonia.Controls.GridUnitType type) { }
        public double ActualHeight { get { throw null; } }
        public Avalonia.Controls.GridLength Height { get { throw null; } set { } }
        public double MaxHeight { get { throw null; } set { } }
        public double MinHeight { get { throw null; } set { } }
    }
    public partial class RowDefinitions : Avalonia.Controls.DefinitionList<Avalonia.Controls.RowDefinition>
    {
        public RowDefinitions() { }
        public RowDefinitions(string s) { }
        public static Avalonia.Controls.RowDefinitions Parse(string s) { throw null; }
        public override string ToString() { throw null; }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public partial class SaveFileDialog : Avalonia.Controls.FileDialog
    {
        public SaveFileDialog() { }
        public string? DefaultExtension { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool? ShowOverwritePrompt { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Threading.Tasks.Task<string?> ShowAsync(Avalonia.Controls.Window parent) { throw null; }
        public Avalonia.Platform.Storage.FilePickerSaveOptions ToFilePickerSaveOptions() { throw null; }
    }
    public partial class Screens
    {
        public Screens(Avalonia.Platform.IScreenImpl iScreenImpl) { }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Screen> All { get { throw null; } }
        public Avalonia.Platform.Screen? Primary { get { throw null; } }
        public int ScreenCount { get { throw null; } }
        public Avalonia.Platform.Screen? ScreenFromBounds(Avalonia.PixelRect bounds) { throw null; }
        public Avalonia.Platform.Screen? ScreenFromPoint(Avalonia.PixelPoint point) { throw null; }
        public Avalonia.Platform.Screen? ScreenFromVisual(Avalonia.Visual visual) { throw null; }
        public Avalonia.Platform.Screen? ScreenFromWindow(Avalonia.Controls.WindowBase window) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use ScreenFromWindow(WindowBase) overload.")]
        public Avalonia.Platform.Screen? ScreenFromWindow(Avalonia.Platform.IWindowBaseImpl window) { throw null; }
    }
    public partial class ScrollChangedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public ScrollChangedEventArgs(Avalonia.Interactivity.RoutedEvent routedEvent, Avalonia.Vector extentDelta, Avalonia.Vector offsetDelta, Avalonia.Vector viewportDelta) { }
        public ScrollChangedEventArgs(Avalonia.Vector extentDelta, Avalonia.Vector offsetDelta, Avalonia.Vector viewportDelta) { }
        public Avalonia.Vector ExtentDelta { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Vector OffsetDelta { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Vector ViewportDelta { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HorizontalScrollBar", typeof(Avalonia.Controls.Primitives.ScrollBar))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_VerticalScrollBar", typeof(Avalonia.Controls.Primitives.ScrollBar))]
    public partial class ScrollViewer : Avalonia.Controls.ContentControl, Avalonia.Controls.IScrollAnchorProvider, Avalonia.Controls.Primitives.IScrollable
    {
        public static readonly Avalonia.AttachedProperty<bool> AllowAutoHideProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ScrollViewer, Avalonia.Size> ExtentProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Primitives.ScrollBarVisibility> HorizontalScrollBarVisibilityProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Primitives.SnapPointsAlignment> HorizontalSnapPointsAlignmentProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Primitives.SnapPointsType> HorizontalSnapPointsTypeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ScrollViewer, bool> IsExpandedProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsScrollChainingEnabledProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsScrollInertiaEnabledProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ScrollViewer, Avalonia.Size> LargeChangeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Vector> OffsetProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ScrollViewer, Avalonia.Vector> ScrollBarMaximumProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.ScrollChangedEventArgs> ScrollChangedEvent;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ScrollViewer, Avalonia.Size> SmallChangeProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Primitives.ScrollBarVisibility> VerticalScrollBarVisibilityProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Primitives.SnapPointsAlignment> VerticalSnapPointsAlignmentProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Primitives.SnapPointsType> VerticalSnapPointsTypeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.ScrollViewer, Avalonia.Size> ViewportProperty;
        public ScrollViewer() { }
        public bool AllowAutoHide { get { throw null; } set { } }
        protected bool CanHorizontallyScroll { get { throw null; } }
        protected bool CanVerticallyScroll { get { throw null; } }
        public Avalonia.Controls.Control? CurrentAnchor { get { throw null; } }
        public Avalonia.Size Extent { get { throw null; } }
        public Avalonia.Controls.Primitives.ScrollBarVisibility HorizontalScrollBarVisibility { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SnapPointsAlignment HorizontalSnapPointsAlignment { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SnapPointsType HorizontalSnapPointsType { get { throw null; } set { } }
        public bool IsExpanded { get { throw null; } }
        public bool IsScrollChainingEnabled { get { throw null; } set { } }
        public bool IsScrollInertiaEnabled { get { throw null; } set { } }
        public Avalonia.Size LargeChange { get { throw null; } }
        public Avalonia.Vector Offset { get { throw null; } set { } }
        public Avalonia.Vector ScrollBarMaximum { get { throw null; } }
        public Avalonia.Size SmallChange { get { throw null; } }
        public Avalonia.Controls.Primitives.ScrollBarVisibility VerticalScrollBarVisibility { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SnapPointsAlignment VerticalSnapPointsAlignment { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SnapPointsType VerticalSnapPointsType { get { throw null; } set { } }
        public Avalonia.Size Viewport { get { throw null; } }
        public event System.EventHandler<Avalonia.Controls.ScrollChangedEventArgs>? ScrollChanged { add { } remove { } }
        public static bool GetAllowAutoHide(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.Primitives.ScrollBarVisibility GetHorizontalScrollBarVisibility(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.Primitives.SnapPointsAlignment GetHorizontalSnapPointsAlignment(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.Primitives.SnapPointsType GetHorizontalSnapPointsType(Avalonia.Controls.Control control) { throw null; }
        public static bool GetIsScrollChainingEnabled(Avalonia.Controls.Control control) { throw null; }
        public static bool GetIsScrollInertiaEnabled(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.Primitives.ScrollBarVisibility GetVerticalScrollBarVisibility(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.Primitives.SnapPointsAlignment GetVerticalSnapPointsAlignment(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.Primitives.SnapPointsType GetVerticalSnapPointsType(Avalonia.Controls.Control control) { throw null; }
        public void LineDown() { }
        public void LineLeft() { }
        public void LineRight() { }
        public void LineUp() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected virtual void OnScrollChanged(Avalonia.Controls.ScrollChangedEventArgs e) { }
        public void PageDown() { }
        public void PageLeft() { }
        public void PageRight() { }
        public void PageUp() { }
        public void RegisterAnchorCandidate(Avalonia.Controls.Control element) { }
        protected override bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
        public void ScrollToEnd() { }
        public void ScrollToHome() { }
        public static void SetAllowAutoHide(Avalonia.Controls.Control control, bool value) { }
        public static void SetHorizontalScrollBarVisibility(Avalonia.Controls.Control control, Avalonia.Controls.Primitives.ScrollBarVisibility value) { }
        public static void SetHorizontalSnapPointsAlignment(Avalonia.Controls.Control control, Avalonia.Controls.Primitives.SnapPointsAlignment value) { }
        public static void SetHorizontalSnapPointsType(Avalonia.Controls.Control control, Avalonia.Controls.Primitives.SnapPointsType value) { }
        public static void SetIsScrollChainingEnabled(Avalonia.Controls.Control control, bool value) { }
        public static void SetIsScrollInertiaEnabled(Avalonia.Controls.Control control, bool value) { }
        public static void SetVerticalScrollBarVisibility(Avalonia.Controls.Control control, Avalonia.Controls.Primitives.ScrollBarVisibility value) { }
        public static void SetVerticalSnapPointsAlignment(Avalonia.Controls.Control control, Avalonia.Controls.Primitives.SnapPointsAlignment value) { }
        public static void SetVerticalSnapPointsType(Avalonia.Controls.Control control, Avalonia.Controls.Primitives.SnapPointsType value) { }
        public void UnregisterAnchorCandidate(Avalonia.Controls.Control element) { }
    }
    public partial class SelectableTextBlock : Avalonia.Controls.TextBlock, Avalonia.LogicalTree.ILogical
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.SelectableTextBlock, bool> CanCopyProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> CopyingToClipboardEvent;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.SelectableTextBlock, string> SelectedTextProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> SelectionBrushProperty;
        public static readonly Avalonia.StyledProperty<int> SelectionEndProperty;
        public static readonly Avalonia.StyledProperty<int> SelectionStartProperty;
        public SelectableTextBlock() { }
        public bool CanCopy { get { throw null; } }
        public string SelectedText { get { throw null; } }
        public Avalonia.Media.IBrush? SelectionBrush { get { throw null; } set { } }
        public int SelectionEnd { get { throw null; } set { } }
        public int SelectionStart { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? CopyingToClipboard { add { } remove { } }
        public void ClearSelection() { }
        public void Copy() { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerMoved(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override void RenderTextLayout(Avalonia.Media.DrawingContext context, Avalonia.Point origin) { }
        public void SelectAll() { }
    }
    public partial class SelectionChangedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public SelectionChangedEventArgs(Avalonia.Interactivity.RoutedEvent routedEvent, System.Collections.IList removedItems, System.Collections.IList addedItems) { }
        public System.Collections.IList AddedItems { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Collections.IList RemovedItems { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [System.FlagsAttribute]
    public enum SelectionMode
    {
        Single = 0,
        Multiple = 1,
        Toggle = 2,
        AlwaysSelected = 4,
    }
    public partial class Separator : Avalonia.Controls.Primitives.TemplatedControl
    {
        public Separator() { }
    }
    public enum ShutdownMode
    {
        OnLastWindowClose = 0,
        OnMainWindowClose = 1,
        OnExplicitShutdown = 2,
    }
    public partial class SizeChangedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public SizeChangedEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent) { }
        public SizeChangedEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent, object? source) { }
        public SizeChangedEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent, object? source, Avalonia.Size previousSize, Avalonia.Size newSize) { }
        public bool HeightChanged { get { throw null; } }
        public Avalonia.Size NewSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Size PreviousSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool WidthChanged { get { throw null; } }
    }
    [System.FlagsAttribute]
    public enum SizeToContent
    {
        Manual = 0,
        Width = 1,
        Height = 2,
        WidthAndHeight = 3,
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":vertical", ":horizontal", ":pressed"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DecreaseButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_IncreaseButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Track", typeof(Avalonia.Controls.Primitives.Track))]
    public partial class Slider : Avalonia.Controls.Primitives.RangeBase
    {
        public static readonly Avalonia.StyledProperty<bool> IsDirectionReversedProperty;
        public static readonly Avalonia.StyledProperty<bool> IsSnapToTickEnabledProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> TickFrequencyProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.TickPlacement> TickPlacementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Collections.AvaloniaList<double>?> TicksProperty;
        protected Avalonia.Controls.Button? _decreaseButton;
        protected Avalonia.Controls.Button? _increaseButton;
        protected bool _isDragging;
        protected Avalonia.Controls.Primitives.Track? _track;
        public Slider() { }
        public bool IsDirectionReversed { get { throw null; } set { } }
        public bool IsSnapToTickEnabled { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public double TickFrequency { get { throw null; } set { } }
        public Avalonia.Controls.TickPlacement TickPlacement { get { throw null; } set { } }
        public Avalonia.Collections.AvaloniaList<double>? Ticks { get { throw null; } set { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected virtual void OnThumbDragCompleted(Avalonia.Input.VectorEventArgs e) { }
        protected virtual void OnThumbDragStarted(Avalonia.Input.VectorEventArgs e) { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
    }
    public enum SpinDirection
    {
        Increase = 0,
        Decrease = 1,
    }
    public partial class SpinEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public SpinEventArgs(Avalonia.Controls.SpinDirection direction) { }
        public SpinEventArgs(Avalonia.Controls.SpinDirection direction, bool usingMouseWheel) { }
        public SpinEventArgs(Avalonia.Interactivity.RoutedEvent routedEvent, Avalonia.Controls.SpinDirection direction) { }
        public SpinEventArgs(Avalonia.Interactivity.RoutedEvent routedEvent, Avalonia.Controls.SpinDirection direction, bool usingMouseWheel) { }
        public Avalonia.Controls.SpinDirection Direction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool UsingMouseWheel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public abstract partial class Spinner : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.SpinEventArgs> SpinEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ValidSpinDirections> ValidSpinDirectionProperty;
        protected Spinner() { }
        public Avalonia.Controls.ValidSpinDirections ValidSpinDirection { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.SpinEventArgs>? Spin { add { } remove { } }
        protected virtual void OnSpin(Avalonia.Controls.SpinEventArgs e) { }
        protected virtual void OnValidSpinDirectionChanged(Avalonia.Controls.ValidSpinDirections oldValue, Avalonia.Controls.ValidSpinDirections newValue) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":flyout-open", ":pressed"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PrimaryButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SecondaryButton", typeof(Avalonia.Controls.Button))]
    public partial class SplitButton : Avalonia.Controls.ContentControl, Avalonia.Input.ICommandSource
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> ClickEvent;
        public static readonly Avalonia.StyledProperty<object?> CommandParameterProperty;
        public static readonly Avalonia.StyledProperty<System.Windows.Input.ICommand?> CommandProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.FlyoutBase?> FlyoutProperty;
        protected const string pcChecked = ":checked";
        protected const string pcFlyoutOpen = ":flyout-open";
        protected const string pcPressed = ":pressed";
        public SplitButton() { }
        public System.Windows.Input.ICommand? Command { get { throw null; } set { } }
        public object? CommandParameter { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.FlyoutBase? Flyout { get { throw null; } set { } }
        protected override bool IsEnabledCore { get { throw null; } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Click { add { } remove { } }
        void Avalonia.Input.ICommandSource.CanExecuteChanged(object sender, System.EventArgs e) { }
        protected void CloseFlyout() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected virtual void OnClickPrimary(Avalonia.Interactivity.RoutedEventArgs? e) { }
        protected virtual void OnClickSecondary(Avalonia.Interactivity.RoutedEventArgs? e) { }
        protected override void OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected virtual void OnFlyoutClosed() { }
        protected virtual void OnFlyoutOpened() { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnKeyUp(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        protected void OpenFlyout() { }
        protected void UpdatePseudoClasses() { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":compactoverlay", ":compactinline", ":overlay", ":inline"})]
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":left", ":right"})]
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":lightDismiss"})]
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":open", ":closed"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PaneRoot", typeof(Avalonia.Controls.Panel))]
    public partial class SplitView : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.StyledProperty<double> CompactPaneLengthProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.SplitViewDisplayMode> DisplayModeProperty;
        public static readonly Avalonia.StyledProperty<bool> IsPaneOpenProperty;
        public static readonly Avalonia.StyledProperty<double> OpenPaneLengthProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> PaneBackgroundProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> PaneClosedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.CancelRoutedEventArgs> PaneClosingEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> PaneOpenedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.CancelRoutedEventArgs> PaneOpeningEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.SplitViewPanePlacement> PanePlacementProperty;
        public static readonly Avalonia.StyledProperty<object?> PaneProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate> PaneTemplateProperty;
        protected const string pcClosed = ":closed";
        protected const string pcCompactInline = ":compactinline";
        protected const string pcCompactOverlay = ":compactoverlay";
        protected const string pcInline = ":inline";
        protected const string pcLeft = ":left";
        protected const string pcLightDismiss = ":lightDismiss";
        protected const string pcOpen = ":open";
        protected const string pcOverlay = ":overlay";
        protected const string pcRight = ":right";
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.SplitView, Avalonia.Controls.Primitives.SplitViewTemplateSettings> TemplateSettingsProperty;
        public static readonly Avalonia.StyledProperty<bool> UseLightDismissOverlayModeProperty;
        public SplitView() { }
        public double CompactPaneLength { get { throw null; } set { } }
        public Avalonia.Controls.SplitViewDisplayMode DisplayMode { get { throw null; } set { } }
        public bool IsPaneOpen { get { throw null; } set { } }
        public double OpenPaneLength { get { throw null; } set { } }
        [Avalonia.Metadata.DependsOnAttribute("PaneTemplate")]
        public object? Pane { get { throw null; } set { } }
        public Avalonia.Media.IBrush? PaneBackground { get { throw null; } set { } }
        public Avalonia.Controls.SplitViewPanePlacement PanePlacement { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate PaneTemplate { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SplitViewTemplateSettings TemplateSettings { get { throw null; } }
        public bool UseLightDismissOverlayMode { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? PaneClosed { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>? PaneClosing { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? PaneOpened { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>? PaneOpening { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected virtual bool OnCoerceIsPaneOpen(bool value) { throw null; }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected virtual void OnPaneClosed(Avalonia.Interactivity.RoutedEventArgs args) { }
        protected virtual void OnPaneClosing(Avalonia.Interactivity.CancelRoutedEventArgs args) { }
        protected virtual void OnPaneOpened(Avalonia.Interactivity.RoutedEventArgs args) { }
        protected virtual void OnPaneOpening(Avalonia.Interactivity.CancelRoutedEventArgs args) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
    }
    public enum SplitViewDisplayMode
    {
        Inline = 0,
        CompactInline = 1,
        Overlay = 2,
        CompactOverlay = 3,
    }
    public enum SplitViewPanePlacement
    {
        Left = 0,
        Right = 1,
    }
    public partial class StackPanel : Avalonia.Controls.Panel, Avalonia.Controls.Primitives.IScrollSnapPointsInfo, Avalonia.Input.INavigableContainer
    {
        public static readonly Avalonia.StyledProperty<bool> AreHorizontalSnapPointsRegularProperty;
        public static readonly Avalonia.StyledProperty<bool> AreVerticalSnapPointsRegularProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> HorizontalSnapPointsChangedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<double> SpacingProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> VerticalSnapPointsChangedEvent;
        public StackPanel() { }
        public bool AreHorizontalSnapPointsRegular { get { throw null; } set { } }
        public bool AreVerticalSnapPointsRegular { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public double Spacing { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? HorizontalSnapPointsChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? VerticalSnapPointsChanged { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        Avalonia.Input.IInputElement? Avalonia.Input.INavigableContainer.GetControl(Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap) { throw null; }
        protected virtual Avalonia.Input.IInputElement? GetControlInDirection(Avalonia.Input.NavigationDirection direction, Avalonia.Controls.Control? from) { throw null; }
        public System.Collections.Generic.IReadOnlyList<double> GetIrregularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment) { throw null; }
        public double GetRegularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment, out double offset) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public enum SystemDecorations
    {
        None = 0,
        BorderOnly = 1,
        Full = 2,
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public abstract partial class SystemDialog
    {
        protected SystemDialog() { }
        public string? Title { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ItemsPresenter", typeof(Avalonia.Controls.Presenters.ItemsPresenter))]
    public partial class TabControl : Avalonia.Controls.Primitives.SelectingItemsControl, Avalonia.Controls.Presenters.IContentPresenterHost
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> ContentTemplateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<object?> SelectedContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> SelectedContentTemplateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Dock> TabStripPlacementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalContentAlignmentProperty;
        public TabControl() { }
        Avalonia.Collections.IAvaloniaList<Avalonia.LogicalTree.ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get { throw null; } }
        public Avalonia.Controls.Templates.IDataTemplate? ContentTemplate { get { throw null; } set { } }
        public Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get { throw null; } set { } }
        public object? SelectedContent { get { throw null; } }
        public Avalonia.Controls.Templates.IDataTemplate? SelectedContentTemplate { get { throw null; } }
        public Avalonia.Controls.Dock TabStripPlacement { get { throw null; } set { } }
        public Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get { throw null; } set { } }
        bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
        protected internal override void ClearContainerForItemOverride(Avalonia.Controls.Control element) { }
        protected override void ContainerIndexChangedOverride(Avalonia.Controls.Control container, int oldIndex, int newIndex) { }
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected internal override void PrepareContainerForItemOverride(Avalonia.Controls.Control element, object? item, int index) { }
        protected virtual bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":pressed", ":selected"})]
    public partial class TabItem : Avalonia.Controls.Primitives.HeaderedContentControl, Avalonia.Controls.ISelectable
    {
        public static readonly Avalonia.StyledProperty<bool> IsSelectedProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Dock> TabStripPlacementProperty;
        public TabItem() { }
        public bool IsSelected { get { throw null; } set { } }
        public Avalonia.Controls.Dock TabStripPlacement { get { throw null; } }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
    }
    [System.Diagnostics.DebuggerDisplayAttribute("Text = {DebugText}")]
    public partial class TextBlock : Avalonia.Controls.Control, Avalonia.LogicalTree.ILogical
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BackgroundProperty;
        public static readonly Avalonia.AttachedProperty<double> BaselineOffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontFamily> FontFamilyProperty;
        public static readonly Avalonia.StyledProperty<double> FontSizeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontStretch> FontStretchProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontStyle> FontStyleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontWeight> FontWeightProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> ForegroundProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TextBlock, Avalonia.Controls.Documents.InlineCollection?> InlinesProperty;
        public static readonly Avalonia.AttachedProperty<double> LetterSpacingProperty;
        public static readonly Avalonia.AttachedProperty<double> LineHeightProperty;
        public static readonly Avalonia.AttachedProperty<int> MaxLinesProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> PaddingProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.TextAlignment> TextAlignmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextDecorationCollection?> TextDecorationsProperty;
        public static readonly Avalonia.StyledProperty<string?> TextProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.TextTrimming> TextTrimmingProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.TextWrapping> TextWrappingProperty;
        protected Avalonia.Size _constraint;
        protected Avalonia.Media.TextFormatting.TextLayout? _textLayout;
        public TextBlock() { }
        public Avalonia.Media.IBrush? Background { get { throw null; } set { } }
        public double BaselineOffset { get { throw null; } set { } }
        protected override bool BypassFlowDirectionPolicies { get { throw null; } }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } set { } }
        public double FontSize { get { throw null; } set { } }
        public Avalonia.Media.FontStretch FontStretch { get { throw null; } set { } }
        public Avalonia.Media.FontStyle FontStyle { get { throw null; } set { } }
        public Avalonia.Media.FontWeight FontWeight { get { throw null; } set { } }
        public Avalonia.Media.IBrush? Foreground { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Documents.InlineCollection? Inlines { get { throw null; } set { } }
        public double LetterSpacing { get { throw null; } set { } }
        public double LineHeight { get { throw null; } set { } }
        public int MaxLines { get { throw null; } set { } }
        public Avalonia.Thickness Padding { get { throw null; } set { } }
        public string? Text { get { throw null; } set { } }
        public Avalonia.Media.TextAlignment TextAlignment { get { throw null; } set { } }
        public Avalonia.Media.TextDecorationCollection? TextDecorations { get { throw null; } set { } }
        public Avalonia.Media.TextFormatting.TextLayout TextLayout { get { throw null; } }
        public Avalonia.Media.TextTrimming TextTrimming { get { throw null; } set { } }
        public Avalonia.Media.TextWrapping TextWrapping { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected virtual Avalonia.Media.TextFormatting.TextLayout CreateTextLayout(string? text) { throw null; }
        public static double GetBaselineOffset(Avalonia.Controls.Control control) { throw null; }
        public static double GetLetterSpacing(Avalonia.Controls.Control control) { throw null; }
        public static double GetLineHeight(Avalonia.Controls.Control control) { throw null; }
        public static int GetMaxLines(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Media.TextAlignment GetTextAlignment(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Media.TextTrimming GetTextTrimming(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Media.TextWrapping GetTextWrapping(Avalonia.Controls.Control control) { throw null; }
        protected void InvalidateTextLayout() { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
        protected internal virtual void RenderCore(Avalonia.Media.DrawingContext context) { }
        protected virtual void RenderTextLayout(Avalonia.Media.DrawingContext context, Avalonia.Point origin) { }
        public static void SetBaselineOffset(Avalonia.Controls.Control control, double value) { }
        public static void SetLetterSpacing(Avalonia.Controls.Control control, double letterSpacing) { }
        public static void SetLineHeight(Avalonia.Controls.Control control, double height) { }
        public static void SetMaxLines(Avalonia.Controls.Control control, int maxLines) { }
        public static void SetTextAlignment(Avalonia.Controls.Control control, Avalonia.Media.TextAlignment alignment) { }
        public static void SetTextTrimming(Avalonia.Controls.Control control, Avalonia.Media.TextTrimming trimming) { }
        public static void SetTextWrapping(Avalonia.Controls.Control control, Avalonia.Media.TextWrapping wrapping) { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        protected readonly partial struct SimpleTextSource : Avalonia.Media.TextFormatting.ITextSource, System.IEquatable<Avalonia.Controls.TextBlock.SimpleTextSource>
        {
            private readonly object _dummy;
            private readonly int _dummyPrimitive;
            public SimpleTextSource(string text, Avalonia.Media.TextFormatting.TextRunProperties defaultProperties) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public bool Equals(Avalonia.Controls.TextBlock.SimpleTextSource other) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override int GetHashCode() { throw null; }
            public Avalonia.Media.TextFormatting.TextRun? GetTextRun(int textSourceIndex) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public static bool operator ==(Avalonia.Controls.TextBlock.SimpleTextSource left, Avalonia.Controls.TextBlock.SimpleTextSource right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public static bool operator !=(Avalonia.Controls.TextBlock.SimpleTextSource left, Avalonia.Controls.TextBlock.SimpleTextSource right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override string ToString() { throw null; }
        }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":empty"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TextPresenter", typeof(Avalonia.Controls.Presenters.TextPresenter))]
    public partial class TextBox : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<bool> AcceptsReturnProperty;
        public static readonly Avalonia.StyledProperty<bool> AcceptsTabProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TextBox, bool> CanCopyProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TextBox, bool> CanCutProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TextBox, bool> CanPasteProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TextBox, bool> CanRedoProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TextBox, bool> CanUndoProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> CaretBrushProperty;
        public static readonly Avalonia.StyledProperty<int> CaretIndexProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> CopyingToClipboardEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> CuttingToClipboardEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<object> InnerLeftContentProperty;
        public static readonly Avalonia.StyledProperty<object> InnerRightContentProperty;
        public static readonly Avalonia.StyledProperty<bool> IsReadOnlyProperty;
        public static readonly Avalonia.StyledProperty<bool> IsUndoEnabledProperty;
        public static readonly Avalonia.StyledProperty<double> LetterSpacingProperty;
        public static readonly Avalonia.StyledProperty<double> LineHeightProperty;
        public static readonly Avalonia.StyledProperty<int> MaxLengthProperty;
        public static readonly Avalonia.StyledProperty<int> MaxLinesProperty;
        public static readonly Avalonia.StyledProperty<string> NewLineProperty;
        public static readonly Avalonia.StyledProperty<char> PasswordCharProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> PastingFromClipboardEvent;
        public static readonly Avalonia.StyledProperty<bool> RevealPasswordProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> SelectionBrushProperty;
        public static readonly Avalonia.StyledProperty<int> SelectionEndProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> SelectionForegroundBrushProperty;
        public static readonly Avalonia.StyledProperty<int> SelectionStartProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextAlignment> TextAlignmentProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.TextChangedEventArgs> TextChangedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.TextChangingEventArgs> TextChangingEvent;
        public static readonly Avalonia.StyledProperty<string?> TextProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextWrapping> TextWrappingProperty;
        public static readonly Avalonia.StyledProperty<int> UndoLimitProperty;
        public static readonly Avalonia.StyledProperty<bool> UseFloatingWatermarkProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<string?> WatermarkProperty;
        public TextBox() { }
        public bool AcceptsReturn { get { throw null; } set { } }
        public bool AcceptsTab { get { throw null; } set { } }
        public bool CanCopy { get { throw null; } }
        public bool CanCut { get { throw null; } }
        public bool CanPaste { get { throw null; } }
        public bool CanRedo { get { throw null; } }
        public bool CanUndo { get { throw null; } }
        public Avalonia.Media.IBrush? CaretBrush { get { throw null; } set { } }
        public int CaretIndex { get { throw null; } set { } }
        public static Avalonia.Input.KeyGesture? CopyGesture { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public static Avalonia.Input.KeyGesture? CutGesture { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get { throw null; } set { } }
        public object InnerLeftContent { get { throw null; } set { } }
        public object InnerRightContent { get { throw null; } set { } }
        public bool IsReadOnly { get { throw null; } set { } }
        public bool IsUndoEnabled { get { throw null; } set { } }
        public double LetterSpacing { get { throw null; } set { } }
        public double LineHeight { get { throw null; } set { } }
        public int MaxLength { get { throw null; } set { } }
        public int MaxLines { get { throw null; } set { } }
        public string NewLine { get { throw null; } set { } }
        public char PasswordChar { get { throw null; } set { } }
        public static Avalonia.Input.KeyGesture? PasteGesture { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool RevealPassword { get { throw null; } set { } }
        public string SelectedText { get { throw null; } set { } }
        public Avalonia.Media.IBrush? SelectionBrush { get { throw null; } set { } }
        public int SelectionEnd { get { throw null; } set { } }
        public Avalonia.Media.IBrush? SelectionForegroundBrush { get { throw null; } set { } }
        public int SelectionStart { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        public string? Text { get { throw null; } set { } }
        public Avalonia.Media.TextAlignment TextAlignment { get { throw null; } set { } }
        public Avalonia.Media.TextWrapping TextWrapping { get { throw null; } set { } }
        public int UndoLimit { get { throw null; } set { } }
        public bool UseFloatingWatermark { get { throw null; } set { } }
        public Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get { throw null; } set { } }
        public string? Watermark { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? CopyingToClipboard { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? CuttingToClipboard { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? PastingFromClipboard { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.TextChangedEventArgs>? TextChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.TextChangingEventArgs>? TextChanging { add { } remove { } }
        public void Clear() { }
        public void ClearSelection() { }
        public void Copy() { }
        public void Cut() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnLostFocus(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPointerMoved(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override void OnTextInput(Avalonia.Input.TextInputEventArgs e) { }
        public void Paste() { }
        public void Redo() { }
        public string? RemoveInvalidCharacters(string? text) { throw null; }
        public void SelectAll() { }
        public void Undo() { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
    }
    public partial class TextChangedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public TextChangedEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent) { }
        public TextChangedEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent, Avalonia.Interactivity.Interactive? source) { }
    }
    public partial class TextChangingEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public TextChangingEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent) { }
        public TextChangingEventArgs(Avalonia.Interactivity.RoutedEvent? routedEvent, Avalonia.Interactivity.Interactive? source) { }
    }
    public partial class ThemeVariantScope : Avalonia.Controls.Decorator
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ThemeVariant> ActualThemeVariantProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ThemeVariant?> RequestedThemeVariantProperty;
        public ThemeVariantScope() { }
        public Avalonia.Styling.ThemeVariant? RequestedThemeVariant { get { throw null; } set { } }
    }
    public partial class TickBar : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> FillProperty;
        public static readonly Avalonia.StyledProperty<bool> IsDirectionReversedProperty;
        public static readonly Avalonia.StyledProperty<double> MaximumProperty;
        public static readonly Avalonia.StyledProperty<double> MinimumProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.TickBarPlacement> PlacementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Rect> ReservedSpaceProperty;
        public static readonly Avalonia.StyledProperty<double> TickFrequencyProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Collections.AvaloniaList<double>?> TicksProperty;
        public TickBar() { }
        public Avalonia.Media.IBrush? Fill { get { throw null; } set { } }
        public bool IsDirectionReversed { get { throw null; } set { } }
        public double Maximum { get { throw null; } set { } }
        public double Minimum { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public Avalonia.Controls.TickBarPlacement Placement { get { throw null; } set { } }
        public Avalonia.Rect ReservedSpace { get { throw null; } set { } }
        public double TickFrequency { get { throw null; } set { } }
        public Avalonia.Collections.AvaloniaList<double>? Ticks { get { throw null; } set { } }
        public sealed override void Render(Avalonia.Media.DrawingContext dc) { }
    }
    public enum TickBarPlacement
    {
        Left = 0,
        Top = 1,
        Right = 2,
        Bottom = 3,
    }
    public enum TickPlacement
    {
        None = 0,
        TopLeft = 1,
        BottomRight = 2,
        Outside = 3,
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":hasnotime"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FirstColumnDivider", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FirstPickerHost", typeof(Avalonia.Controls.Border))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FlyoutButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FlyoutButtonContentGrid", typeof(Avalonia.Controls.Grid))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HourTextBlock", typeof(Avalonia.Controls.TextBlock))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MinuteTextBlock", typeof(Avalonia.Controls.TextBlock))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PeriodTextBlock", typeof(Avalonia.Controls.TextBlock))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PickerPresenter", typeof(Avalonia.Controls.TimePickerPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Popup", typeof(Avalonia.Controls.Primitives.Popup))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SecondColumnDivider", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SecondPickerHost", typeof(Avalonia.Controls.Border))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ThirdPickerHost", typeof(Avalonia.Controls.Border))]
    public partial class TimePicker : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<string> ClockIdentifierProperty;
        public static readonly Avalonia.StyledProperty<int> MinuteIncrementProperty;
        public static readonly Avalonia.StyledProperty<System.TimeSpan?> SelectedTimeProperty;
        public TimePicker() { }
        public string ClockIdentifier { get { throw null; } set { } }
        public int MinuteIncrement { get { throw null; } set { } }
        public System.TimeSpan? SelectedTime { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.TimePickerSelectedValueChangedEventArgs>? SelectedTimeChanged { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected virtual void OnSelectedTimeChanged(System.TimeSpan? oldTime, System.TimeSpan? newTime) { }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_AcceptButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DismissButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HourDownButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HourSelector", typeof(Avalonia.Controls.Primitives.DateTimePickerPanel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HourUpButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MinuteDownButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MinuteSelector", typeof(Avalonia.Controls.Primitives.DateTimePickerPanel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MinuteUpButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PeriodDownButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PeriodHost", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PeriodSelector", typeof(Avalonia.Controls.Primitives.DateTimePickerPanel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PeriodUpButton", typeof(Avalonia.Controls.RepeatButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PickerContainer", typeof(Avalonia.Controls.Grid))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SecondSpacer", typeof(Avalonia.Controls.Shapes.Rectangle))]
    public partial class TimePickerPresenter : Avalonia.Controls.Primitives.PickerPresenterBase
    {
        public static readonly Avalonia.StyledProperty<string> ClockIdentifierProperty;
        public static readonly Avalonia.StyledProperty<int> MinuteIncrementProperty;
        public static readonly Avalonia.StyledProperty<System.TimeSpan> TimeProperty;
        public TimePickerPresenter() { }
        public string ClockIdentifier { get { throw null; } set { } }
        public int MinuteIncrement { get { throw null; } set { } }
        public System.TimeSpan Time { get { throw null; } set { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnConfirmed() { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class TimePickerSelectedValueChangedEventArgs
    {
        public TimePickerSelectedValueChangedEventArgs(System.TimeSpan? old, System.TimeSpan? newT) { }
        public System.TimeSpan? NewTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.TimeSpan? OldTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":checked"})]
    public partial class ToggleSplitButton : Avalonia.Controls.SplitButton, Avalonia.INamed, Avalonia.Styling.IStyleable
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> IsCheckedChangedEvent;
        public static readonly Avalonia.StyledProperty<bool> IsCheckedProperty;
        public ToggleSplitButton() { }
        System.Type Avalonia.Styling.IStyleable.StyleKey { get { throw null; } }
        public bool IsChecked { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? IsCheckedChanged { add { } remove { } }
        protected override void OnClickPrimary(Avalonia.Interactivity.RoutedEventArgs? e) { }
        protected virtual void OnIsCheckedChanged() { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        protected void Toggle() { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":dragging"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MovingKnobs", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_OffContentPresenter", typeof(Avalonia.Controls.Presenters.ContentPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_OnContentPresenter", typeof(Avalonia.Controls.Presenters.ContentPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_SwitchKnob", typeof(Avalonia.Controls.Panel))]
    public partial class ToggleSwitch : Avalonia.Controls.Primitives.ToggleButton
    {
        public static readonly Avalonia.StyledProperty<object?> OffContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> OffContentTemplateProperty;
        public static readonly Avalonia.StyledProperty<object?> OnContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> OnContentTemplateProperty;
        public ToggleSwitch() { }
        public object? OffContent { get { throw null; } set { } }
        public Avalonia.Controls.Presenters.IContentPresenter? OffContentPresenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Templates.IDataTemplate? OffContentTemplate { get { throw null; } set { } }
        public object? OnContent { get { throw null; } set { } }
        public Avalonia.Controls.Presenters.IContentPresenter? OnContentPresenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Templates.IDataTemplate? OnContentTemplate { get { throw null; } set { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
        protected override void Toggle() { }
        protected void UpdateKnobPos(bool value) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":open"})]
    public partial class ToolTip : Avalonia.Controls.ContentControl, Avalonia.Controls.Diagnostics.IPopupHostProvider
    {
        public static readonly Avalonia.AttachedProperty<double> HorizontalOffsetProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsOpenProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.PlacementMode> PlacementProperty;
        public static readonly Avalonia.AttachedProperty<int> ShowDelayProperty;
        public static readonly Avalonia.AttachedProperty<object?> TipProperty;
        public static readonly Avalonia.AttachedProperty<double> VerticalOffsetProperty;
        public ToolTip() { }
        Avalonia.Controls.Primitives.IPopupHost? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get { throw null; } }
        event System.Action<Avalonia.Controls.Primitives.IPopupHost?>? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHostChanged { add { } remove { } }
        public static double GetHorizontalOffset(Avalonia.Controls.Control element) { throw null; }
        public static bool GetIsOpen(Avalonia.Controls.Control element) { throw null; }
        public static Avalonia.Controls.PlacementMode GetPlacement(Avalonia.Controls.Control element) { throw null; }
        public static int GetShowDelay(Avalonia.Controls.Control element) { throw null; }
        public static object? GetTip(Avalonia.Controls.Control element) { throw null; }
        public static double GetVerticalOffset(Avalonia.Controls.Control element) { throw null; }
        public static void SetHorizontalOffset(Avalonia.Controls.Control element, double value) { }
        public static void SetIsOpen(Avalonia.Controls.Control element, bool value) { }
        public static void SetPlacement(Avalonia.Controls.Control element, Avalonia.Controls.PlacementMode value) { }
        public static void SetShowDelay(Avalonia.Controls.Control element, int value) { }
        public static void SetTip(Avalonia.Controls.Control element, object? value) { }
        public static void SetVerticalOffset(Avalonia.Controls.Control element, double value) { }
    }
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TransparencyFallback", typeof(Avalonia.Controls.Border))]
    public abstract partial class TopLevel : Avalonia.Controls.ContentControl, Avalonia.Input.ICloseable, Avalonia.Input.IInputElement, Avalonia.Input.IInputRoot, Avalonia.Input.TextInput.ITextInputMethodRoot, Avalonia.Layout.ILayoutRoot, Avalonia.LogicalTree.ILogical, Avalonia.LogicalTree.ILogicalRoot, Avalonia.Rendering.IRenderRoot, Avalonia.Styling.IStyleHost
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ThemeVariant> ActualThemeVariantProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TopLevel, Avalonia.Controls.WindowTransparencyLevel> ActualTransparencyLevelProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> BackRequestedEvent;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TopLevel, Avalonia.Size> ClientSizeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TopLevel, Avalonia.Size?> FrameSizeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.IInputElement?> PointerOverElementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ThemeVariant?> RequestedThemeVariantProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.SolidColorBrush?> SystemBarColorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> TransparencyBackgroundFallbackProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.WindowTransparencyLevel> TransparencyLevelHintProperty;
        public TopLevel(Avalonia.Platform.ITopLevelImpl impl) { }
        public TopLevel(Avalonia.Platform.ITopLevelImpl impl, Avalonia.IAvaloniaDependencyResolver? dependencyResolver) { }
        public Avalonia.Controls.WindowTransparencyLevel ActualTransparencyLevel { get { throw null; } }
        Avalonia.Input.IAccessKeyHandler Avalonia.Input.IInputRoot.AccessKeyHandler { get { throw null; } }
        Avalonia.Input.IKeyboardNavigationHandler Avalonia.Input.IInputRoot.KeyboardNavigationHandler { get { throw null; } }
        Avalonia.Input.IInputElement? Avalonia.Input.IInputRoot.PointerOverElement { get { throw null; } set { } }
        bool Avalonia.Input.IInputRoot.ShowAccessKeys { get { throw null; } set { } }
        Avalonia.Input.TextInput.ITextInputMethodImpl? Avalonia.Input.TextInput.ITextInputMethodRoot.InputMethod { get { throw null; } }
        double Avalonia.Layout.ILayoutRoot.LayoutScaling { get { throw null; } }
        Avalonia.Styling.IStyleHost Avalonia.Styling.IStyleHost.StylingParent { get { throw null; } }
        protected override bool BypassFlowDirectionPolicies { get { throw null; } }
        public Avalonia.Size ClientSize { get { throw null; } protected set { } }
        public Avalonia.Input.Platform.IClipboard? Clipboard { get { throw null; } }
        public Avalonia.Size? FrameSize { get { throw null; } protected set { } }
        public Avalonia.Controls.Platform.IInsetsManager? InsetsManager { get { throw null; } }
        public Avalonia.Layout.ILayoutManager LayoutManager { get { throw null; } }
        public Avalonia.Platform.ITopLevelImpl? PlatformImpl { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Rendering.IRenderer Renderer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public double RenderScaling { get { throw null; } }
        public Avalonia.Styling.ThemeVariant? RequestedThemeVariant { get { throw null; } set { } }
        public Avalonia.Platform.Storage.IStorageProvider StorageProvider { get { throw null; } }
        public Avalonia.Media.IBrush TransparencyBackgroundFallback { get { throw null; } set { } }
        public Avalonia.Controls.WindowTransparencyLevel TransparencyLevelHint { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> BackRequested { add { } remove { } }
        public event System.EventHandler? Closed { add { } remove { } }
        public event System.EventHandler? Opened { add { } remove { } }
        public event System.EventHandler? ScalingChanged { add { } remove { } }
        Avalonia.Point Avalonia.Rendering.IRenderRoot.PointToClient(Avalonia.PixelPoint p) { throw null; }
        Avalonia.PixelPoint Avalonia.Rendering.IRenderRoot.PointToScreen(Avalonia.Point p) { throw null; }
        protected virtual Avalonia.Layout.ILayoutManager CreateLayoutManager() { throw null; }
        public static Avalonia.Media.SolidColorBrush? GetSystemBarColor(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Controls.TopLevel? GetTopLevel(Avalonia.Visual? visual) { throw null; }
        protected virtual void HandleClosed() { }
        protected virtual void HandlePaint(Avalonia.Rect rect) { }
        protected virtual void HandleScalingChanged(double scaling) { }
        protected virtual void HandleTransparencyLevelChanged(Avalonia.Controls.WindowTransparencyLevel transparencyLevel) { }
        public override void InvalidateMirrorTransform() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected virtual void OnClosed(System.EventArgs e) { }
        protected virtual void OnOpened(System.EventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public System.Threading.Tasks.Task<System.IDisposable> RequestPlatformInhibition(Avalonia.Controls.PlatformInhibitionType type, string reason) { throw null; }
        public static void SetSystemBarColor(Avalonia.Controls.Control control, Avalonia.Media.SolidColorBrush? color) { }
    }
    public partial class TransitioningContentControl : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TransitioningContentControl, object?> CurrentContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Animation.IPageTransition?> PageTransitionProperty;
        public TransitioningContentControl() { }
        public object? CurrentContent { get { throw null; } }
        public Avalonia.Animation.IPageTransition? PageTransition { get { throw null; } set { } }
        protected override void ContentChanged(Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class TrayIcon : Avalonia.AvaloniaObject, Avalonia.Controls.Platform.INativeMenuExporterProvider, System.IDisposable
    {
        public static readonly Avalonia.StyledProperty<object?> CommandParameterProperty;
        public static readonly Avalonia.StyledProperty<System.Windows.Input.ICommand?> CommandProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.WindowIcon?> IconProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.TrayIcons?> IconsProperty;
        public static readonly Avalonia.StyledProperty<bool> IsVisibleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.NativeMenu?> MenuProperty;
        public static readonly Avalonia.StyledProperty<string?> ToolTipTextProperty;
        public TrayIcon() { }
        public System.Windows.Input.ICommand? Command { get { throw null; } set { } }
        public object? CommandParameter { get { throw null; } set { } }
        public Avalonia.Controls.WindowIcon? Icon { get { throw null; } set { } }
        public bool IsVisible { get { throw null; } set { } }
        public Avalonia.Controls.NativeMenu? Menu { get { throw null; } set { } }
        public Avalonia.Controls.Platform.INativeMenuExporter? NativeMenuExporter { get { throw null; } }
        public string? ToolTipText { get { throw null; } set { } }
        public event System.EventHandler? Clicked { add { } remove { } }
        public void Dispose() { }
        public static Avalonia.Controls.TrayIcons? GetIcons(Avalonia.Application o) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public static void SetIcons(Avalonia.Application o, Avalonia.Controls.TrayIcons? trayIcons) { }
    }
    public sealed partial class TrayIcons : Avalonia.Collections.AvaloniaList<Avalonia.Controls.TrayIcon>
    {
        public TrayIcons() { }
    }
    public partial class TreeView : Avalonia.Controls.ItemsControl, Avalonia.Input.ICustomKeyboardNavigation
    {
        public static readonly Avalonia.StyledProperty<bool> AutoScrollToSelectedItemProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TreeView, object?> SelectedItemProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TreeView, System.Collections.IList> SelectedItemsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.SelectionMode> SelectionModeProperty;
        public TreeView() { }
        public bool AutoScrollToSelectedItem { get { throw null; } set { } }
        public new Avalonia.Controls.Generators.TreeItemContainerGenerator ItemContainerGenerator { get { throw null; } }
        public object? SelectedItem { get { throw null; } set { } }
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute]
        public System.Collections.IList SelectedItems { get { throw null; } set { } }
        public Avalonia.Controls.SelectionMode SelectionMode { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>? SelectionChanged { add { } remove { } }
        (bool handled, Avalonia.Input.IInputElement? next) Avalonia.Input.ICustomKeyboardNavigation.GetNext(Avalonia.Input.IInputElement element, Avalonia.Input.NavigationDirection direction) { throw null; }
        public void CollapseSubTree(Avalonia.Controls.TreeViewItem item) { }
        protected internal override void ContainerForItemPreparedOverride(Avalonia.Controls.Control container, object? item, int index) { }
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        public void ExpandSubTree(Avalonia.Controls.TreeViewItem item) { }
        protected Avalonia.Controls.TreeViewItem? GetContainerFromEventSource(object eventSource) { throw null; }
        public System.Collections.Generic.IEnumerable<Avalonia.Controls.Control> GetRealizedTreeContainers() { throw null; }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        public void SelectAll() { }
        public Avalonia.Controls.Control? TreeContainerFromItem(object item) { throw null; }
        public object? TreeItemFromContainer(Avalonia.Controls.Control container) { throw null; }
        public void UnselectAll() { }
        protected void UpdateSelectionFromContainer(Avalonia.Controls.Control container, bool select = true, bool rangeModifier = false, bool toggleModifier = false, bool rightButton = false) { }
        protected bool UpdateSelectionFromEventSource(object eventSource, bool select = true, bool rangeModifier = false, bool toggleModifier = false, bool rightButton = false) { throw null; }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":pressed", ":selected"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Header", typeof(Avalonia.Controls.Control))]
    public partial class TreeViewItem : Avalonia.Controls.Primitives.HeaderedItemsControl, Avalonia.Controls.ISelectable
    {
        public static readonly Avalonia.StyledProperty<bool> IsExpandedProperty;
        public static readonly Avalonia.StyledProperty<bool> IsSelectedProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.TreeViewItem, int> LevelProperty;
        public TreeViewItem() { }
        public bool IsExpanded { get { throw null; } set { } }
        public bool IsSelected { get { throw null; } set { } }
        public int Level { get { throw null; } }
        protected internal override void ContainerForItemPreparedOverride(Avalonia.Controls.Control container, object? item, int index) { }
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected virtual void OnHeaderDoubleTapped(Avalonia.Input.TappedEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected virtual void OnRequestBringIntoView(Avalonia.Controls.RequestBringIntoViewEventArgs e) { }
        protected internal override void PrepareContainerForItemOverride(Avalonia.Controls.Control container, object? item, int index) { }
    }
    public partial class UserControl : Avalonia.Controls.ContentControl, Avalonia.INamed, Avalonia.Styling.IStyleable
    {
        public UserControl() { }
    }
    [System.FlagsAttribute]
    public enum ValidSpinDirections
    {
        None = 0,
        Increase = 1,
        Decrease = 2,
    }
    public partial class Viewbox : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Control?> ChildProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.StretchDirection> StretchDirectionProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Stretch> StretchProperty;
        public Viewbox() { }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Control? Child { get { throw null; } set { } }
        protected internal Avalonia.Media.ITransform? InternalTransform { get { throw null; } set { } }
        public Avalonia.Media.Stretch Stretch { get { throw null; } set { } }
        public Avalonia.Media.StretchDirection StretchDirection { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class VirtualizingCarouselPanel : Avalonia.Controls.VirtualizingPanel, Avalonia.Controls.Primitives.ILogicalScrollable, Avalonia.Controls.Primitives.IScrollable
    {
        public VirtualizingCarouselPanel() { }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.CanHorizontallyScroll { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.CanVerticallyScroll { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.IsLogicalScrollEnabled { get { throw null; } }
        Avalonia.Size Avalonia.Controls.Primitives.ILogicalScrollable.PageScrollSize { get { throw null; } }
        Avalonia.Size Avalonia.Controls.Primitives.ILogicalScrollable.ScrollSize { get { throw null; } }
        Avalonia.Size Avalonia.Controls.Primitives.IScrollable.Extent { get { throw null; } }
        Avalonia.Vector Avalonia.Controls.Primitives.IScrollable.Offset { get { throw null; } set { } }
        Avalonia.Size Avalonia.Controls.Primitives.IScrollable.Viewport { get { throw null; } }
        event System.EventHandler? Avalonia.Controls.Primitives.ILogicalScrollable.ScrollInvalidated { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.BringIntoView(Avalonia.Controls.Control target, Avalonia.Rect targetRect) { throw null; }
        Avalonia.Controls.Control? Avalonia.Controls.Primitives.ILogicalScrollable.GetControlInDirection(Avalonia.Input.NavigationDirection direction, Avalonia.Controls.Control? from) { throw null; }
        void Avalonia.Controls.Primitives.ILogicalScrollable.RaiseScrollInvalidated(System.EventArgs e) { }
        protected internal override Avalonia.Controls.Control? ContainerFromIndex(int index) { throw null; }
        protected override Avalonia.Input.IInputElement? GetControl(Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap) { throw null; }
        protected internal override System.Collections.Generic.IEnumerable<Avalonia.Controls.Control>? GetRealizedContainers() { throw null; }
        protected internal override int IndexFromContainer(Avalonia.Controls.Control container) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnItemsChanged(System.Collections.Generic.IReadOnlyList<object?> items, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected internal override Avalonia.Controls.Control? ScrollIntoView(int index) { throw null; }
    }
    public abstract partial class VirtualizingPanel : Avalonia.Controls.Panel, Avalonia.Input.INavigableContainer
    {
        protected VirtualizingPanel() { }
        public Avalonia.Controls.Generators.ItemContainerGenerator? ItemContainerGenerator { get { throw null; } }
        protected System.Collections.Generic.IReadOnlyList<object?> Items { get { throw null; } }
        protected Avalonia.Controls.ItemsControl? ItemsControl { get { throw null; } }
        protected void AddInternalChild(Avalonia.Controls.Control control) { }
        Avalonia.Input.IInputElement? Avalonia.Input.INavigableContainer.GetControl(Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap) { throw null; }
        protected internal abstract Avalonia.Controls.Control? ContainerFromIndex(int index);
        protected abstract Avalonia.Input.IInputElement? GetControl(Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap);
        protected internal abstract System.Collections.Generic.IEnumerable<Avalonia.Controls.Control>? GetRealizedContainers();
        protected internal abstract int IndexFromContainer(Avalonia.Controls.Control container);
        protected void InsertInternalChild(int index, Avalonia.Controls.Control control) { }
        protected virtual void OnItemsChanged(System.Collections.Generic.IReadOnlyList<object?> items, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected virtual void OnItemsControlChanged(Avalonia.Controls.ItemsControl? oldValue) { }
        protected void RemoveInternalChild(Avalonia.Controls.Control child) { }
        protected void RemoveInternalChildRange(int index, int count) { }
        protected internal abstract Avalonia.Controls.Control? ScrollIntoView(int index);
    }
    public partial class VirtualizingStackPanel : Avalonia.Controls.VirtualizingPanel, Avalonia.Controls.Primitives.IScrollSnapPointsInfo
    {
        public static readonly Avalonia.StyledProperty<bool> AreHorizontalSnapPointsRegularProperty;
        public static readonly Avalonia.StyledProperty<bool> AreVerticalSnapPointsRegularProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> HorizontalSnapPointsChangedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> VerticalSnapPointsChangedEvent;
        public VirtualizingStackPanel() { }
        public bool AreHorizontalSnapPointsRegular { get { throw null; } set { } }
        public bool AreVerticalSnapPointsRegular { get { throw null; } set { } }
        public int FirstRealizedIndex { get { throw null; } }
        public int LastRealizedIndex { get { throw null; } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? HorizontalSnapPointsChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? VerticalSnapPointsChanged { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected internal override Avalonia.Controls.Control? ContainerFromIndex(int index) { throw null; }
        protected override Avalonia.Input.IInputElement? GetControl(Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap) { throw null; }
        public System.Collections.Generic.IReadOnlyList<double> GetIrregularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment) { throw null; }
        protected internal override System.Collections.Generic.IEnumerable<Avalonia.Controls.Control>? GetRealizedContainers() { throw null; }
        public double GetRegularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment, out double offset) { throw null; }
        protected internal override int IndexFromContainer(Avalonia.Controls.Control container) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnItemsChanged(System.Collections.Generic.IReadOnlyList<object?> items, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected internal override Avalonia.Controls.Control? ScrollIntoView(int index) { throw null; }
    }
    public partial class Window : Avalonia.Controls.WindowBase, Avalonia.INamed, Avalonia.Input.IFocusScope, Avalonia.Layout.ILayoutRoot, Avalonia.Styling.IStyleable
    {
        public static readonly Avalonia.StyledProperty<bool> CanResizeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Platform.ExtendClientAreaChromeHints> ExtendClientAreaChromeHintsProperty;
        public static readonly Avalonia.StyledProperty<double> ExtendClientAreaTitleBarHeightHintProperty;
        public static readonly Avalonia.StyledProperty<bool> ExtendClientAreaToDecorationsHintProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.WindowIcon?> IconProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Window, bool> IsExtendedIntoWindowDecorationsProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Window, Avalonia.Thickness> OffScreenMarginProperty;
        public static readonly Avalonia.StyledProperty<bool> ShowActivatedProperty;
        public static readonly Avalonia.StyledProperty<bool> ShowInTaskbarProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.SizeToContent> SizeToContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.SystemDecorations> SystemDecorationsProperty;
        public static readonly Avalonia.StyledProperty<string?> TitleProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> WindowClosedEvent;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Window, Avalonia.Thickness> WindowDecorationMarginProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> WindowOpenedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.WindowStartupLocation> WindowStartupLocationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.WindowState> WindowStateProperty;
        public Window() : base (default(Avalonia.Platform.IWindowBaseImpl)) { }
        public Window(Avalonia.Platform.IWindowImpl impl) : base (default(Avalonia.Platform.IWindowBaseImpl)) { }
        System.Type Avalonia.Styling.IStyleable.StyleKey { get { throw null; } }
        public bool CanResize { get { throw null; } set { } }
        public Avalonia.Platform.ExtendClientAreaChromeHints ExtendClientAreaChromeHints { get { throw null; } set { } }
        public double ExtendClientAreaTitleBarHeightHint { get { throw null; } set { } }
        public bool ExtendClientAreaToDecorationsHint { get { throw null; } set { } }
        public Avalonia.Controls.WindowIcon? Icon { get { throw null; } set { } }
        public bool IsExtendedIntoWindowDecorations { get { throw null; } }
        public Avalonia.Thickness OffScreenMargin { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Controls.Window> OwnedWindows { get { throw null; } }
        public new Avalonia.Platform.IWindowImpl? PlatformImpl { get { throw null; } }
        public Avalonia.PixelPoint Position { get { throw null; } set { } }
        public bool ShowActivated { get { throw null; } set { } }
        public bool ShowInTaskbar { get { throw null; } set { } }
        public Avalonia.Controls.SizeToContent SizeToContent { get { throw null; } set { } }
        public Avalonia.Controls.SystemDecorations SystemDecorations { get { throw null; } set { } }
        public string? Title { get { throw null; } set { } }
        public Avalonia.Thickness WindowDecorationMargin { get { throw null; } }
        public Avalonia.Controls.WindowStartupLocation WindowStartupLocation { get { throw null; } set { } }
        public Avalonia.Controls.WindowState WindowState { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.WindowClosingEventArgs>? Closing { add { } remove { } }
        protected sealed override Avalonia.Size ArrangeSetBounds(Avalonia.Size size) { throw null; }
        public void BeginMoveDrag(Avalonia.Input.PointerPressedEventArgs e) { }
        public void BeginResizeDrag(Avalonia.Controls.WindowEdge edge, Avalonia.Input.PointerPressedEventArgs e) { }
        public void Close() { }
        public void Close(object? dialogResult) { }
        protected virtual void ExtendClientAreaToDecorationsChanged(bool isExtended) { }
        protected sealed override void HandleClosed() { }
        protected virtual void HandleWindowStateChanged(Avalonia.Controls.WindowState state) { }
        public override void Hide() { }
        protected override void IsVisibleChanged(Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected virtual void OnClosing(Avalonia.Controls.WindowClosingEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public override void Show() { }
        public void Show(Avalonia.Controls.Window owner) { }
        public System.Threading.Tasks.Task ShowDialog(Avalonia.Controls.Window owner) { throw null; }
        public System.Threading.Tasks.Task<TResult> ShowDialog<TResult>(Avalonia.Controls.Window owner) { throw null; }
    }
    public partial class WindowBase : Avalonia.Controls.TopLevel
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.WindowBase, bool> IsActiveProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.WindowBase, Avalonia.Controls.WindowBase?> OwnerProperty;
        public static readonly Avalonia.StyledProperty<bool> TopmostProperty;
        public WindowBase(Avalonia.Platform.IWindowBaseImpl impl) : base (default(Avalonia.Platform.ITopLevelImpl)) { }
        public WindowBase(Avalonia.Platform.IWindowBaseImpl impl, Avalonia.IAvaloniaDependencyResolver? dependencyResolver) : base (default(Avalonia.Platform.ITopLevelImpl)) { }
        public double DesktopScaling { get { throw null; } }
        protected bool IgnoreVisibilityChanges { get { throw null; } }
        public bool IsActive { get { throw null; } }
        public Avalonia.Controls.WindowBase? Owner { get { throw null; } protected set { } }
        public new Avalonia.Platform.IWindowBaseImpl? PlatformImpl { get { throw null; } }
        public Avalonia.Controls.Screens Screens { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool Topmost { get { throw null; } set { } }
        public event System.EventHandler? Activated { add { } remove { } }
        public event System.EventHandler? Deactivated { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.PixelPointEventArgs>? PositionChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.WindowResizedEventArgs>? Resized { add { } remove { } }
        public void Activate() { }
        protected override void ArrangeCore(Avalonia.Rect finalRect) { }
        protected virtual Avalonia.Size ArrangeSetBounds(Avalonia.Size size) { throw null; }
        protected void EnsureInitialized() { }
        protected System.IDisposable FreezeVisibilityChangeHandling() { throw null; }
        protected override void HandleClosed() { }
        public virtual void Hide() { }
        protected virtual void IsVisibleChanged(Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        protected override Avalonia.Size MeasureCore(Avalonia.Size availableSize) { throw null; }
        protected override void OnClosed(System.EventArgs e) { }
        protected override void OnOpened(System.EventArgs e) { }
        protected virtual void OnResized(Avalonia.Controls.WindowResizedEventArgs e) { }
        public virtual void Show() { }
        public Avalonia.Platform.IPlatformHandle? TryGetPlatformHandle() { throw null; }
    }
    public enum WindowCloseReason
    {
        Undefined = 0,
        WindowClosing = 1,
        OwnerWindowClosing = 2,
        ApplicationShutdown = 3,
        OSShutdown = 4,
    }
    public partial class WindowClosingEventArgs : System.ComponentModel.CancelEventArgs
    {
        internal WindowClosingEventArgs() { }
        public Avalonia.Controls.WindowCloseReason CloseReason { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool IsProgrammatic { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum WindowEdge
    {
        NorthWest = 0,
        North = 1,
        NorthEast = 2,
        West = 3,
        East = 4,
        SouthWest = 5,
        South = 6,
        SouthEast = 7,
    }
    public partial class WindowIcon
    {
        public WindowIcon(Avalonia.Media.Imaging.IBitmap bitmap) { }
        public WindowIcon(System.IO.Stream stream) { }
        public WindowIcon(string fileName) { }
        public Avalonia.Platform.IWindowIconImpl PlatformImpl { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public void Save(System.IO.Stream stream) { }
    }
    public partial class WindowResizedEventArgs : System.EventArgs
    {
        internal WindowResizedEventArgs() { }
        public Avalonia.Size ClientSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.WindowResizeReason Reason { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum WindowResizeReason
    {
        Unspecified = 0,
        User = 1,
        Application = 2,
        Layout = 3,
        DpiChange = 4,
    }
    public enum WindowStartupLocation
    {
        Manual = 0,
        CenterScreen = 1,
        CenterOwner = 2,
    }
    public enum WindowState
    {
        Normal = 0,
        Minimized = 1,
        Maximized = 2,
        FullScreen = 3,
    }
    public enum WindowTransparencyLevel
    {
        None = 0,
        Transparent = 1,
        Blur = 2,
        AcrylicBlur = 3,
        ForceAcrylicBlur = 4,
        Mica = 5,
    }
    public partial class WrapPanel : Avalonia.Controls.Panel, Avalonia.Input.INavigableContainer
    {
        public static readonly Avalonia.StyledProperty<double> ItemHeightProperty;
        public static readonly Avalonia.StyledProperty<double> ItemWidthProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public WrapPanel() { }
        public double ItemHeight { get { throw null; } set { } }
        public double ItemWidth { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        Avalonia.Input.IInputElement? Avalonia.Input.INavigableContainer.GetControl(Avalonia.Input.NavigationDirection direction, Avalonia.Input.IInputElement? from, bool wrap) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size constraint) { throw null; }
    }
}
namespace Avalonia.Controls.ApplicationLifetimes
{
    public partial class ClassicDesktopStyleApplicationLifetime : Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime, Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime, Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime, System.IDisposable
    {
        public ClassicDesktopStyleApplicationLifetime() { }
        public string[]? Args { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Window? MainWindow { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.ShutdownMode ShutdownMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Controls.Window> Windows { get { throw null; } }
        public event System.EventHandler<Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs>? Exit { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ApplicationLifetimes.ShutdownRequestedEventArgs>? ShutdownRequested { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs>? Startup { add { } remove { } }
        public void Dispose() { }
        public void Shutdown(int exitCode = 0) { }
        public int Start(string[] args) { throw null; }
        public bool TryShutdown(int exitCode = 0) { throw null; }
    }
    public partial class ClassicDesktopStyleApplicationLifetimeOptions
    {
        public ClassicDesktopStyleApplicationLifetimeOptions() { }
        public bool ProcessUrlActivationCommandLine { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial class ControlledApplicationLifetimeExitEventArgs : System.EventArgs
    {
        public ControlledApplicationLifetimeExitEventArgs(int applicationExitCode) { }
        public int ApplicationExitCode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public partial class ControlledApplicationLifetimeStartupEventArgs : System.EventArgs
    {
        public ControlledApplicationLifetimeStartupEventArgs(System.Collections.Generic.IEnumerable<string> args) { }
        public string[] Args { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IApplicationLifetime
    {
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IClassicDesktopStyleApplicationLifetime : Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime, Avalonia.Controls.ApplicationLifetimes.IControlledApplicationLifetime
    {
        string[]? Args { get; }
        Avalonia.Controls.Window? MainWindow { get; set; }
        Avalonia.Controls.ShutdownMode ShutdownMode { get; set; }
        System.Collections.Generic.IReadOnlyList<Avalonia.Controls.Window> Windows { get; }
        event System.EventHandler<Avalonia.Controls.ApplicationLifetimes.ShutdownRequestedEventArgs>? ShutdownRequested;
        bool TryShutdown(int exitCode = 0);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IControlledApplicationLifetime : Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime
    {
        event System.EventHandler<Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeExitEventArgs> Exit;
        event System.EventHandler<Avalonia.Controls.ApplicationLifetimes.ControlledApplicationLifetimeStartupEventArgs> Startup;
        void Shutdown(int exitCode = 0);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface ISingleViewApplicationLifetime : Avalonia.Controls.ApplicationLifetimes.IApplicationLifetime
    {
        Avalonia.Controls.Control? MainView { get; set; }
    }
    public partial class ShutdownRequestedEventArgs : System.ComponentModel.CancelEventArgs
    {
        public ShutdownRequestedEventArgs() { }
    }
}
namespace Avalonia.Controls.Automation.Peers
{
    public partial class ImageAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        public ImageAutomationPeer(Avalonia.Controls.Control owner) : base (default(Avalonia.Controls.Control)) { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
    }
    public partial class LabelAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        public LabelAutomationPeer(Avalonia.Controls.Label owner) : base (default(Avalonia.Controls.Control)) { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        protected override string? GetNameCore() { throw null; }
    }
    public partial class ProgressBarAutomationPeer : Avalonia.Automation.Peers.RangeBaseAutomationPeer, Avalonia.Automation.Provider.IRangeValueProvider
    {
        public ProgressBarAutomationPeer(Avalonia.Controls.Primitives.RangeBase owner) : base (default(Avalonia.Controls.Primitives.RangeBase)) { }
        bool Avalonia.Automation.Provider.IRangeValueProvider.IsReadOnly { get { throw null; } }
        double Avalonia.Automation.Provider.IRangeValueProvider.LargeChange { get { throw null; } }
        double Avalonia.Automation.Provider.IRangeValueProvider.SmallChange { get { throw null; } }
        void Avalonia.Automation.Provider.IRangeValueProvider.SetValue(double val) { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
    }
    public partial class RadioButtonAutomationPeer : Avalonia.Automation.Peers.ToggleButtonAutomationPeer, Avalonia.Automation.Provider.ISelectionItemProvider
    {
        public RadioButtonAutomationPeer(Avalonia.Controls.RadioButton owner) : base (default(Avalonia.Controls.Primitives.ToggleButton)) { }
        public bool IsSelected { get { throw null; } }
        public Avalonia.Automation.Provider.ISelectionProvider? SelectionContainer { get { throw null; } }
        public void AddToSelection() { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
        public void RemoveFromSelection() { }
        public void Select() { }
    }
    public partial class SliderAutomationPeer : Avalonia.Automation.Peers.RangeBaseAutomationPeer
    {
        public SliderAutomationPeer(Avalonia.Controls.Slider owner) : base (default(Avalonia.Controls.Primitives.RangeBase)) { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override string GetClassNameCore() { throw null; }
    }
    public partial class ThumbAutomationPeer : Avalonia.Automation.Peers.ControlAutomationPeer
    {
        public ThumbAutomationPeer(Avalonia.Controls.Primitives.Thumb owner) : base (default(Avalonia.Controls.Control)) { }
        protected override Avalonia.Automation.Peers.AutomationControlType GetAutomationControlTypeCore() { throw null; }
        protected override bool IsContentElementCore() { throw null; }
    }
}
namespace Avalonia.Controls.Chrome
{
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":minimized", ":normal", ":maximized", ":fullscreen"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_CloseButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FullScreenButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MinimiseButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_RestoreButton", typeof(Avalonia.Controls.Button))]
    public partial class CaptionButtons : Avalonia.Controls.Primitives.TemplatedControl
    {
        public CaptionButtons() { }
        protected Avalonia.Controls.Window? HostWindow { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public virtual void Attach(Avalonia.Controls.Window hostWindow) { }
        public virtual void Detach() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected virtual void OnClose() { }
        protected virtual void OnMinimize() { }
        protected virtual void OnRestore() { }
        protected virtual void OnToggleFullScreen() { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":minimized", ":normal", ":maximized", ":fullscreen"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_CaptionButtons", typeof(Avalonia.Controls.Chrome.CaptionButtons))]
    public partial class TitleBar : Avalonia.Controls.Primitives.TemplatedControl
    {
        public TitleBar() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
    }
}
namespace Avalonia.Controls.Converters
{
    public partial class CornerRadiusFilterConverter : Avalonia.Data.Converters.IValueConverter
    {
        public CornerRadiusFilterConverter() { }
        public Avalonia.Controls.Converters.Corners Filter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double Scale { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class CornerRadiusToDoubleConverter : Avalonia.Data.Converters.IValueConverter
    {
        public CornerRadiusToDoubleConverter() { }
        public Avalonia.Controls.Converters.Corners Corner { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    [System.FlagsAttribute]
    public enum Corners
    {
        None = 0,
        TopLeft = 1,
        TopRight = 2,
        BottomLeft = 4,
        BottomRight = 8,
    }
    public partial class EnumToBoolConverter : Avalonia.Data.Converters.IValueConverter
    {
        public EnumToBoolConverter() { }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class MarginMultiplierConverter : Avalonia.Data.Converters.IValueConverter
    {
        public MarginMultiplierConverter() { }
        public bool Bottom { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double Indent { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool Left { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool Right { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool Top { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class MenuScrollingVisibilityConverter : Avalonia.Data.Converters.IMultiValueConverter
    {
        public static readonly Avalonia.Controls.Converters.MenuScrollingVisibilityConverter Instance;
        public MenuScrollingVisibilityConverter() { }
        public object? Convert(System.Collections.Generic.IList<object?> values, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
    public partial class PlatformKeyGestureConverter : Avalonia.Data.Converters.IValueConverter
    {
        public PlatformKeyGestureConverter() { }
        public object? Convert(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public object? ConvertBack(object? value, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
        public static string ToPlatformString(Avalonia.Input.KeyGesture gesture) { throw null; }
    }
    public partial class StringFormatConverter : Avalonia.Data.Converters.IMultiValueConverter
    {
        public StringFormatConverter() { }
        public object? Convert(System.Collections.Generic.IList<object?> values, System.Type targetType, object? parameter, System.Globalization.CultureInfo culture) { throw null; }
    }
}
namespace Avalonia.Controls.Diagnostics
{
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPopupHostProvider
    {
        Avalonia.Controls.Primitives.IPopupHost? PopupHost { get; }
        event System.Action<Avalonia.Controls.Primitives.IPopupHost?>? PopupHostChanged;
    }
    public static partial class ToolTipDiagnostics
    {
        public static readonly Avalonia.AvaloniaProperty<Avalonia.Controls.ToolTip?> ToolTipProperty;
    }
}
namespace Avalonia.Controls.Documents
{
    public sealed partial class Bold : Avalonia.Controls.Documents.Span
    {
        public Bold() { }
    }
    public abstract partial class Inline : Avalonia.Controls.Documents.TextElement
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.BaselineAlignment> BaselineAlignmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextDecorationCollection?> TextDecorationsProperty;
        protected Inline() { }
        public Avalonia.Media.BaselineAlignment BaselineAlignment { get { throw null; } set { } }
        public Avalonia.Media.TextDecorationCollection? TextDecorations { get { throw null; } set { } }
        internal abstract void AppendText(System.Text.StringBuilder stringBuilder);
        internal abstract void BuildTextRun(System.Collections.Generic.IList<Avalonia.Media.TextFormatting.TextRun> textRuns);
        protected Avalonia.Media.TextFormatting.TextRunProperties CreateTextRunProperties() { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    [Avalonia.Metadata.WhitespaceSignificantCollectionAttribute]
    public partial class InlineCollection : Avalonia.Collections.AvaloniaList<Avalonia.Controls.Documents.Inline>
    {
        public InlineCollection() { }
        public string? Text { get { throw null; } }
        public event System.EventHandler? Invalidated { add { } remove { } }
        public void Add(Avalonia.Controls.Control control) { }
        public override void Add(Avalonia.Controls.Documents.Inline inline) { }
        public void Add(string text) { }
        protected void Invalidate() { }
    }
    public partial class InlineUIContainer : Avalonia.Controls.Documents.Inline
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Control> ChildProperty;
        public InlineUIContainer() { }
        public InlineUIContainer(Avalonia.Controls.Control child) { }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Control Child { get { throw null; } set { } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public sealed partial class Italic : Avalonia.Controls.Documents.Span
    {
        public Italic() { }
    }
    [Avalonia.Metadata.TrimSurroundingWhitespaceAttribute]
    public partial class LineBreak : Avalonia.Controls.Documents.Inline
    {
        public LineBreak() { }
    }
    public partial class Run : Avalonia.Controls.Documents.Inline
    {
        public static readonly Avalonia.StyledProperty<string?> TextProperty;
        public Run() { }
        public Run(string? text) { }
        [Avalonia.Metadata.ContentAttribute]
        public string? Text { get { throw null; } set { } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class Span : Avalonia.Controls.Documents.Inline
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Documents.InlineCollection> InlinesProperty;
        public Span() { }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Documents.InlineCollection Inlines { get { throw null; } set { } }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public abstract partial class TextElement : Avalonia.StyledElement
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BackgroundProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontFamily> FontFamilyProperty;
        public static readonly Avalonia.AttachedProperty<double> FontSizeProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontStretch> FontStretchProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontStyle> FontStyleProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontWeight> FontWeightProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.IBrush?> ForegroundProperty;
        protected TextElement() { }
        public Avalonia.Media.IBrush? Background { get { throw null; } set { } }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } set { } }
        public double FontSize { get { throw null; } set { } }
        public Avalonia.Media.FontStretch FontStretch { get { throw null; } set { } }
        public Avalonia.Media.FontStyle FontStyle { get { throw null; } set { } }
        public Avalonia.Media.FontWeight FontWeight { get { throw null; } set { } }
        public Avalonia.Media.IBrush? Foreground { get { throw null; } set { } }
        public static Avalonia.Media.FontFamily GetFontFamily(Avalonia.Controls.Control control) { throw null; }
        public static double GetFontSize(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Media.FontStretch GetFontStretch(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Media.FontStyle GetFontStyle(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Media.FontWeight GetFontWeight(Avalonia.Controls.Control control) { throw null; }
        public static Avalonia.Media.IBrush? GetForeground(Avalonia.Controls.Control control) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public static void SetFontFamily(Avalonia.Controls.Control control, Avalonia.Media.FontFamily value) { }
        public static void SetFontSize(Avalonia.Controls.Control control, double value) { }
        public static void SetFontStretch(Avalonia.Controls.Control control, Avalonia.Media.FontStretch value) { }
        public static void SetFontStyle(Avalonia.Controls.Control control, Avalonia.Media.FontStyle value) { }
        public static void SetFontWeight(Avalonia.Controls.Control control, Avalonia.Media.FontWeight value) { }
        public static void SetForeground(Avalonia.Controls.Control control, Avalonia.Media.IBrush? value) { }
    }
    public sealed partial class Underline : Avalonia.Controls.Documents.Span
    {
        public Underline() { }
    }
}
namespace Avalonia.Controls.Embedding
{
    public partial class EmbeddableControlRoot : Avalonia.Controls.TopLevel, Avalonia.INamed, Avalonia.Input.IFocusScope, Avalonia.Styling.IStyleable, System.IDisposable
    {
        public EmbeddableControlRoot() : base (default(Avalonia.Platform.ITopLevelImpl)) { }
        public EmbeddableControlRoot(Avalonia.Platform.ITopLevelImpl impl) : base (default(Avalonia.Platform.ITopLevelImpl)) { }
        System.Type Avalonia.Styling.IStyleable.StyleKey { get { throw null; } }
        protected bool EnforceClientSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public void Dispose() { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        public void Prepare() { }
    }
}
namespace Avalonia.Controls.Embedding.Offscreen
{
    [Avalonia.Metadata.UnstableAttribute]
    public abstract partial class OffscreenTopLevelImplBase : Avalonia.Platform.IOptionalFeatureProvider, Avalonia.Platform.ITopLevelImpl, System.IDisposable
    {
        protected OffscreenTopLevelImplBase() { }
        public Avalonia.Controls.AcrylicPlatformCompensationLevels AcrylicCompensationLevels { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Size ClientSize { get { throw null; } set { } }
        public System.Action? Closed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Size? FrameSize { get { throw null; } }
        public System.Action<Avalonia.Input.Raw.RawInputEventArgs>? Input { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Input.IInputRoot? InputRoot { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool IsDisposed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Action? LostFocus { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public abstract Avalonia.Input.IMouseDevice MouseDevice { get; }
        public System.Action<Avalonia.Rect>? Paint { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double RenderScaling { get { throw null; } set { } }
        public System.Action<Avalonia.Size, Avalonia.Controls.WindowResizeReason>? Resized { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Action<double>? ScalingChanged { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public abstract System.Collections.Generic.IEnumerable<object> Surfaces { get; }
        public Avalonia.Controls.WindowTransparencyLevel TransparencyLevel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Action<Avalonia.Controls.WindowTransparencyLevel>? TransparencyLevelChanged { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Platform.IPopupImpl? CreatePopup() { throw null; }
        public Avalonia.Rendering.IRenderer CreateRenderer(Avalonia.Rendering.IRenderRoot root) { throw null; }
        public virtual void Dispose() { }
        public virtual Avalonia.Point PointToClient(Avalonia.PixelPoint point) { throw null; }
        public virtual Avalonia.PixelPoint PointToScreen(Avalonia.Point point) { throw null; }
        public virtual void SetCursor(Avalonia.Platform.ICursorImpl? cursor) { }
        public void SetFrameThemeVariant(Avalonia.Platform.PlatformThemeVariant themeVariant) { }
        public void SetInputRoot(Avalonia.Input.IInputRoot inputRoot) { }
        public void SetTransparencyLevelHint(Avalonia.Controls.WindowTransparencyLevel transparencyLevel) { }
        public virtual object? TryGetFeature(System.Type featureType) { throw null; }
    }
}
namespace Avalonia.Controls.Generators
{
    public partial class ItemContainerGenerator
    {
        internal ItemContainerGenerator() { }
        public void ClearItemContainer(Avalonia.Controls.Control container) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use ItemsControl.ContainerFromIndex")]
        public Avalonia.Controls.Control? ContainerFromIndex(int index) { throw null; }
        public Avalonia.Controls.Control CreateContainer(object? item, int index, object? recycleKey) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use ItemsControl.IndexFromContainer")]
        public int IndexFromContainer(Avalonia.Controls.Control container) { throw null; }
        public void ItemContainerIndexChanged(Avalonia.Controls.Control container, int oldIndex, int newIndex) { }
        public void ItemContainerPrepared(Avalonia.Controls.Control container, object? item, int index) { }
        public bool NeedsContainer(object? item, int index, out object? recycleKey) { throw null; }
        public void PrepareItemContainer(Avalonia.Controls.Control container, object? item, int index) { }
    }
    public partial class TreeContainerIndex
    {
        internal TreeContainerIndex() { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use TreeView.GetRealizedTreeContainers")]
        public System.Collections.Generic.IEnumerable<Avalonia.Controls.Control> Containers { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use TreeView.TreeContainerFromItem")]
        public Avalonia.Controls.Control? ContainerFromItem(object item) { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use TreeView.TreeItemFromContainer")]
        public object? ItemFromContainer(Avalonia.Controls.Control container) { throw null; }
    }
    public partial class TreeItemContainerGenerator : Avalonia.Controls.Generators.ItemContainerGenerator
    {
        internal TreeItemContainerGenerator() { }
        public Avalonia.Controls.Generators.TreeContainerIndex Index { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
}
namespace Avalonia.Controls.Mixins
{
    public static partial class PressedMixin
    {
        public static void Attach<TControl>() where TControl : Avalonia.Controls.Control { }
    }
    public static partial class SelectableMixin
    {
        public static void Attach<TControl>(Avalonia.AvaloniaProperty<bool> isSelected) where TControl : Avalonia.Controls.Control { }
    }
}
namespace Avalonia.Controls.Notifications
{
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IManagedNotificationManager : Avalonia.Controls.Notifications.INotificationManager
    {
        void Show(object content);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface INotification
    {
        System.TimeSpan Expiration { get; }
        string? Message { get; }
        System.Action? OnClick { get; }
        System.Action? OnClose { get; }
        string? Title { get; }
        Avalonia.Controls.Notifications.NotificationType Type { get; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface INotificationManager
    {
        void Show(Avalonia.Controls.Notifications.INotification notification);
    }
    public partial class Notification : Avalonia.Controls.Notifications.INotification
    {
        public Notification(string? title, string? message, Avalonia.Controls.Notifications.NotificationType type = Avalonia.Controls.Notifications.NotificationType.Information, System.TimeSpan? expiration = default(System.TimeSpan?), System.Action? onClick = null, System.Action? onClose = null) { }
        public System.TimeSpan Expiration { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string? Message { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Action? OnClick { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Action? OnClose { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string? Title { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Notifications.NotificationType Type { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":error", ":information", ":success", ":warning"})]
    public partial class NotificationCard : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.AttachedProperty<bool> CloseOnClickProperty;
        public static readonly Avalonia.StyledProperty<bool> IsClosedProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Notifications.NotificationCard, bool> IsClosingProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> NotificationClosedEvent;
        public NotificationCard() { }
        public bool IsClosed { get { throw null; } set { } }
        public bool IsClosing { get { throw null; } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? NotificationClosed { add { } remove { } }
        public void Close() { }
        public static bool GetCloseOnClick(Avalonia.Controls.Button obj) { throw null; }
        public static void SetCloseOnClick(Avalonia.Controls.Button obj, bool value) { }
    }
    public enum NotificationPosition
    {
        TopLeft = 0,
        TopRight = 1,
        BottomLeft = 2,
        BottomRight = 3,
    }
    public enum NotificationType
    {
        Information = 0,
        Success = 1,
        Warning = 2,
        Error = 3,
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":topleft", ":topright", ":bottomleft", ":bottomright"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Items", typeof(Avalonia.Controls.Panel))]
    public partial class WindowNotificationManager : Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.Notifications.IManagedNotificationManager, Avalonia.Controls.Notifications.INotificationManager
    {
        public static readonly Avalonia.StyledProperty<int> MaxItemsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Notifications.NotificationPosition> PositionProperty;
        public WindowNotificationManager(Avalonia.Controls.TopLevel? host) { }
        public int MaxItems { get { throw null; } set { } }
        public Avalonia.Controls.Notifications.NotificationPosition Position { get { throw null; } set { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public void Show(Avalonia.Controls.Notifications.INotification content) { }
        public void Show(object content) { }
    }
}
namespace Avalonia.Controls.Platform
{
    [Avalonia.Metadata.UnstableAttribute]
    public partial class DefaultMenuInteractionHandler : Avalonia.Controls.Platform.IMenuInteractionHandler
    {
        public DefaultMenuInteractionHandler(bool isContextMenu) { }
        public DefaultMenuInteractionHandler(bool isContextMenu, Avalonia.Input.IInputManager? inputManager, System.Action<System.Action, System.TimeSpan> delayRun) { }
        protected System.Action<System.Action, System.TimeSpan> DelayRun { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected Avalonia.Input.IInputManager? InputManager { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected Avalonia.Controls.IMenu? Menu { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected static System.TimeSpan MenuShowDelay { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected internal virtual void AccessKeyPressed(object? sender, Avalonia.Interactivity.RoutedEventArgs e) { }
        public virtual void Attach(Avalonia.Controls.IMenu menu) { }
        protected void Click(Avalonia.Controls.IMenuItem item) { }
        protected void CloseMenu(Avalonia.Controls.IMenuItem item) { }
        protected void CloseWithDelay(Avalonia.Controls.IMenuItem item) { }
        public virtual void Detach(Avalonia.Controls.IMenu menu) { }
        protected static Avalonia.Controls.IMenuItem? GetMenuItem(Avalonia.StyledElement? item) { throw null; }
        protected internal virtual void GotFocus(object? sender, Avalonia.Input.GotFocusEventArgs e) { }
        protected internal virtual void KeyDown(Avalonia.Controls.IMenuItem? item, Avalonia.Input.KeyEventArgs e) { }
        protected internal virtual void KeyDown(object? sender, Avalonia.Input.KeyEventArgs e) { }
        protected internal virtual void LostFocus(object? sender, Avalonia.Interactivity.RoutedEventArgs e) { }
        protected internal virtual void MenuOpened(object? sender, Avalonia.Interactivity.RoutedEventArgs e) { }
        protected void Open(Avalonia.Controls.IMenuItem item, bool selectFirst) { }
        protected void OpenWithDelay(Avalonia.Controls.IMenuItem item) { }
        protected internal virtual void PointerEntered(object? sender, Avalonia.Interactivity.RoutedEventArgs e) { }
        protected internal virtual void PointerExited(object? sender, Avalonia.Interactivity.RoutedEventArgs e) { }
        protected internal virtual void PointerMoved(object? sender, Avalonia.Input.PointerEventArgs e) { }
        protected internal virtual void PointerPressed(object? sender, Avalonia.Input.PointerPressedEventArgs e) { }
        protected internal virtual void PointerReleased(object? sender, Avalonia.Input.PointerReleasedEventArgs e) { }
        protected internal virtual void RawInput(Avalonia.Input.Raw.RawInputEventArgs e) { }
        protected internal virtual void RootPointerPressed(object? sender, Avalonia.Input.PointerPressedEventArgs e) { }
        protected void SelectItemAndAncestors(Avalonia.Controls.IMenuItem item) { }
        protected internal virtual void WindowDeactivated(object? sender, System.EventArgs e) { }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IInsetsManager
    {
        bool DisplayEdgeToEdge { get; set; }
        bool? IsSystemBarVisible { get; set; }
        Avalonia.Thickness SafeAreaPadding { get; }
        Avalonia.Media.Color? SystemBarColor { get; set; }
        event System.EventHandler<Avalonia.Controls.Platform.SafeAreaChangedArgs>? SafeAreaChanged;
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IMenuInteractionHandler
    {
        void Attach(Avalonia.Controls.IMenu menu);
        void Detach(Avalonia.Controls.IMenu menu);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IMountedVolumeInfoProvider
    {
        System.IDisposable Listen(System.Collections.ObjectModel.ObservableCollection<Avalonia.Controls.Platform.MountedVolumeInfo> mountedDrives);
    }
    public partial interface INativeApplicationCommands
    {
        void HideApp();
        void HideOthers();
        void ShowAll();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface INativeControlHostControlTopLevelAttachment : System.IDisposable
    {
        Avalonia.Controls.Platform.INativeControlHostImpl? AttachedTo { get; set; }
        void HideWithSize(Avalonia.Size size);
        bool IsCompatibleWith(Avalonia.Controls.Platform.INativeControlHostImpl host);
        void ShowInBounds(Avalonia.Rect rect);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface INativeControlHostDestroyableControlHandle : Avalonia.Platform.IPlatformHandle
    {
        void Destroy();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface INativeControlHostImpl
    {
        Avalonia.Controls.Platform.INativeControlHostDestroyableControlHandle CreateDefaultChild(Avalonia.Platform.IPlatformHandle parent);
        Avalonia.Controls.Platform.INativeControlHostControlTopLevelAttachment CreateNewAttachment(Avalonia.Platform.IPlatformHandle handle);
        Avalonia.Controls.Platform.INativeControlHostControlTopLevelAttachment CreateNewAttachment(System.Func<Avalonia.Platform.IPlatformHandle, Avalonia.Platform.IPlatformHandle> create);
        bool IsCompatibleWith(Avalonia.Platform.IPlatformHandle handle);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface INativeMenuExporter
    {
        void SetNativeMenu(Avalonia.Controls.NativeMenu? menu);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface INativeMenuExporterProvider
    {
        Avalonia.Controls.Platform.INativeMenuExporter? NativeMenuExporter { get; }
    }
    public partial interface IStorageProviderFactory
    {
        Avalonia.Platform.Storage.IStorageProvider CreateProvider(Avalonia.Controls.TopLevel topLevel);
    }
    [Avalonia.Metadata.UnstableAttribute]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.ObsoleteAttribute("Use Window.StorageProvider API or TopLevel.StorageProvider API")]
    public partial interface ISystemDialogImpl
    {
        System.Threading.Tasks.Task<string[]?> ShowFileDialogAsync(Avalonia.Controls.FileDialog dialog, Avalonia.Controls.Window parent);
        System.Threading.Tasks.Task<string?> ShowFolderDialogAsync(Avalonia.Controls.OpenFolderDialog dialog, Avalonia.Controls.Window parent);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ITopLevelNativeMenuExporter : Avalonia.Controls.Platform.INativeMenuExporter
    {
        bool IsNativeMenuExported { get; }
        event System.EventHandler OnIsNativeMenuExportedChanged;
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class ManagedDispatcherImpl : Avalonia.Threading.IControlledDispatcherImpl, Avalonia.Threading.IDispatcherImpl, Avalonia.Threading.IDispatcherImplWithPendingInput
    {
        public ManagedDispatcherImpl(Avalonia.Controls.Platform.ManagedDispatcherImpl.IManagedDispatcherInputProvider? inputProvider) { }
        public bool CanQueryPendingInput { get { throw null; } }
        public bool CurrentThreadIsLoopThread { get { throw null; } }
        public bool HasPendingInput { get { throw null; } }
        public long Now { get { throw null; } }
        public event System.Action? Signaled { add { } remove { } }
        public event System.Action? Timer { add { } remove { } }
        public void RunLoop(System.Threading.CancellationToken token) { }
        public void Signal() { }
        public void UpdateTimer(long? dueTimeInMs) { }
        public partial interface IManagedDispatcherInputProvider
        {
            bool HasInput { get; }
            void DispatchNextInputEvent();
        }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial class MountedVolumeInfo : System.IEquatable<Avalonia.Controls.Platform.MountedVolumeInfo>
    {
        public MountedVolumeInfo() { }
        public string? VolumeLabel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string? VolumePath { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public ulong VolumeSizeBytes { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool Equals(Avalonia.Controls.Platform.MountedVolumeInfo? other) { throw null; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public static partial class PlatformManager
    {
        public static Avalonia.Platform.IWindowImpl CreateEmbeddableWindow() { throw null; }
        public static Avalonia.Platform.ITrayIconImpl? CreateTrayIcon() { throw null; }
        public static Avalonia.Platform.IWindowImpl CreateWindow() { throw null; }
        public static System.IDisposable DesignerMode() { throw null; }
        public static void SetDesignerScalingFactor(double factor) { }
    }
    public partial class SafeAreaChangedArgs : System.EventArgs
    {
        public SafeAreaChangedArgs(Avalonia.Thickness safeArePadding) { }
        public Avalonia.Thickness SafeAreaPadding { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum SystemBarTheme
    {
        Light = 0,
        Dark = 1,
    }
}
namespace Avalonia.Controls.Platform.Surfaces
{
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IFramebufferPlatformSurface
    {
        Avalonia.Platform.ILockedFramebuffer Lock();
    }
}
namespace Avalonia.Controls.Presenters
{
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":empty"})]
    public partial class ContentPresenter : Avalonia.Controls.Control, Avalonia.Controls.Presenters.IContentPresenter, Avalonia.Controls.Presenters.IPresenter, Avalonia.INamed
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BackgroundProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BorderBrushProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> BorderThicknessProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.BoxShadows> BoxShadowProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Presenters.ContentPresenter, Avalonia.Controls.Control?> ChildProperty;
        public static readonly Avalonia.StyledProperty<object?> ContentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> ContentTemplateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.CornerRadius> CornerRadiusProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontFamily> FontFamilyProperty;
        public static readonly Avalonia.StyledProperty<double> FontSizeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontStretch> FontStretchProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontStyle> FontStyleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontWeight> FontWeightProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> ForegroundProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.HorizontalAlignment> HorizontalContentAlignmentProperty;
        public static readonly Avalonia.StyledProperty<double> LineHeightProperty;
        public static readonly Avalonia.StyledProperty<int> MaxLinesProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> PaddingProperty;
        public static readonly Avalonia.StyledProperty<bool> RecognizesAccessKeyProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextAlignment> TextAlignmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextTrimming> TextTrimmingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextWrapping> TextWrappingProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.VerticalAlignment> VerticalContentAlignmentProperty;
        public ContentPresenter() { }
        public Avalonia.Media.IBrush? Background { get { throw null; } set { } }
        public Avalonia.Media.IBrush? BorderBrush { get { throw null; } set { } }
        public Avalonia.Thickness BorderThickness { get { throw null; } set { } }
        public Avalonia.Media.BoxShadows BoxShadow { get { throw null; } set { } }
        public Avalonia.Controls.Control? Child { get { throw null; } }
        [Avalonia.Metadata.DependsOnAttribute("ContentTemplate")]
        public object? Content { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate? ContentTemplate { get { throw null; } set { } }
        public Avalonia.CornerRadius CornerRadius { get { throw null; } set { } }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } set { } }
        public double FontSize { get { throw null; } set { } }
        public Avalonia.Media.FontStretch FontStretch { get { throw null; } set { } }
        public Avalonia.Media.FontStyle FontStyle { get { throw null; } set { } }
        public Avalonia.Media.FontWeight FontWeight { get { throw null; } set { } }
        public Avalonia.Media.IBrush? Foreground { get { throw null; } set { } }
        public Avalonia.Layout.HorizontalAlignment HorizontalContentAlignment { get { throw null; } set { } }
        public double LineHeight { get { throw null; } set { } }
        public int MaxLines { get { throw null; } set { } }
        public Avalonia.Thickness Padding { get { throw null; } set { } }
        public bool RecognizesAccessKey { get { throw null; } set { } }
        public Avalonia.Media.TextAlignment TextAlignment { get { throw null; } set { } }
        public Avalonia.Media.TextTrimming TextTrimming { get { throw null; } set { } }
        public Avalonia.Media.TextWrapping TextWrapping { get { throw null; } set { } }
        public Avalonia.Layout.VerticalAlignment VerticalContentAlignment { get { throw null; } set { } }
        public sealed override void ApplyTemplate() { }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected virtual Avalonia.Controls.Control? CreateChild() { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
        public void UpdateChild() { }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IContentPresenter : Avalonia.Controls.Presenters.IPresenter, Avalonia.INamed
    {
        Avalonia.Controls.Control? Child { get; }
        object? Content { get; set; }
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IContentPresenterHost
    {
        Avalonia.Collections.IAvaloniaList<Avalonia.LogicalTree.ILogical> LogicalChildren { get; }
        bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPresenter : Avalonia.INamed
    {
    }
    public partial class ItemsPresenter : Avalonia.Controls.Control, Avalonia.Controls.Primitives.ILogicalScrollable, Avalonia.Controls.Primitives.IScrollable, Avalonia.Controls.Primitives.IScrollSnapPointsInfo
    {
        public static readonly Avalonia.StyledProperty<bool> AreHorizontalSnapPointsRegularProperty;
        public static readonly Avalonia.StyledProperty<bool> AreVerticalSnapPointsRegularProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> HorizontalSnapPointsChangedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ITemplate<Avalonia.Controls.Panel?>> ItemsPanelProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> VerticalSnapPointsChangedEvent;
        public ItemsPresenter() { }
        public bool AreHorizontalSnapPointsRegular { get { throw null; } set { } }
        public bool AreVerticalSnapPointsRegular { get { throw null; } set { } }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.CanHorizontallyScroll { get { throw null; } set { } }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.CanVerticallyScroll { get { throw null; } set { } }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.IsLogicalScrollEnabled { get { throw null; } }
        Avalonia.Size Avalonia.Controls.Primitives.ILogicalScrollable.PageScrollSize { get { throw null; } }
        Avalonia.Size Avalonia.Controls.Primitives.ILogicalScrollable.ScrollSize { get { throw null; } }
        Avalonia.Size Avalonia.Controls.Primitives.IScrollable.Extent { get { throw null; } }
        Avalonia.Vector Avalonia.Controls.Primitives.IScrollable.Offset { get { throw null; } set { } }
        Avalonia.Size Avalonia.Controls.Primitives.IScrollable.Viewport { get { throw null; } }
        public Avalonia.Controls.ITemplate<Avalonia.Controls.Panel?> ItemsPanel { get { throw null; } set { } }
        public Avalonia.Controls.Panel? Panel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        event System.EventHandler? Avalonia.Controls.Primitives.ILogicalScrollable.ScrollInvalidated { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? HorizontalSnapPointsChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? VerticalSnapPointsChanged { add { } remove { } }
        public sealed override void ApplyTemplate() { }
        bool Avalonia.Controls.Primitives.ILogicalScrollable.BringIntoView(Avalonia.Controls.Control target, Avalonia.Rect targetRect) { throw null; }
        Avalonia.Controls.Control? Avalonia.Controls.Primitives.ILogicalScrollable.GetControlInDirection(Avalonia.Input.NavigationDirection direction, Avalonia.Controls.Control? from) { throw null; }
        void Avalonia.Controls.Primitives.ILogicalScrollable.RaiseScrollInvalidated(System.EventArgs e) { }
        public System.Collections.Generic.IReadOnlyList<double> GetIrregularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment) { throw null; }
        public double GetRegularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment, out double offset) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class ScrollContentPresenter : Avalonia.Controls.Presenters.ContentPresenter, Avalonia.Controls.IScrollAnchorProvider, Avalonia.Controls.Presenters.IPresenter, Avalonia.Controls.Primitives.IScrollable, Avalonia.INamed
    {
        public static readonly Avalonia.StyledProperty<bool> CanHorizontallyScrollProperty;
        public static readonly Avalonia.StyledProperty<bool> CanVerticallyScrollProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Presenters.ScrollContentPresenter, Avalonia.Size> ExtentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.SnapPointsAlignment> HorizontalSnapPointsAlignmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.SnapPointsType> HorizontalSnapPointsTypeProperty;
        public static readonly Avalonia.StyledProperty<bool> IsScrollChainingEnabledProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Vector> OffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.SnapPointsAlignment> VerticalSnapPointsAlignmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.SnapPointsType> VerticalSnapPointsTypeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Presenters.ScrollContentPresenter, Avalonia.Size> ViewportProperty;
        public ScrollContentPresenter() { }
        Avalonia.Controls.Control? Avalonia.Controls.IScrollAnchorProvider.CurrentAnchor { get { throw null; } }
        public bool CanHorizontallyScroll { get { throw null; } set { } }
        public bool CanVerticallyScroll { get { throw null; } set { } }
        public Avalonia.Size Extent { get { throw null; } }
        public Avalonia.Controls.Primitives.SnapPointsAlignment HorizontalSnapPointsAlignment { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SnapPointsType HorizontalSnapPointsType { get { throw null; } set { } }
        public bool IsScrollChainingEnabled { get { throw null; } set { } }
        public Avalonia.Vector Offset { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SnapPointsAlignment VerticalSnapPointsAlignment { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SnapPointsType VerticalSnapPointsType { get { throw null; } set { } }
        public Avalonia.Size Viewport { get { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected internal virtual void AttachToScrollViewer() { }
        void Avalonia.Controls.IScrollAnchorProvider.RegisterAnchorCandidate(Avalonia.Controls.Control element) { }
        void Avalonia.Controls.IScrollAnchorProvider.UnregisterAnchorCandidate(Avalonia.Controls.Control element) { }
        public bool BringDescendantIntoView(Avalonia.Visual target, Avalonia.Rect targetRect) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class TextPresenter : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BackgroundProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> CaretBrushProperty;
        public static readonly Avalonia.StyledProperty<int> CaretIndexProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Presenters.TextPresenter, Avalonia.Media.TextFormatting.TextRange?> CompositionRegionProperty;
        public static readonly Avalonia.StyledProperty<double> LetterSpacingProperty;
        public static readonly Avalonia.StyledProperty<double> LineHeightProperty;
        public static readonly Avalonia.StyledProperty<char> PasswordCharProperty;
        public static readonly Avalonia.StyledProperty<string?> PreeditTextProperty;
        public static readonly Avalonia.StyledProperty<bool> RevealPasswordProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> SelectionBrushProperty;
        public static readonly Avalonia.StyledProperty<int> SelectionEndProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> SelectionForegroundBrushProperty;
        public static readonly Avalonia.StyledProperty<int> SelectionStartProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextAlignment> TextAlignmentProperty;
        public static readonly Avalonia.StyledProperty<string?> TextProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.TextWrapping> TextWrappingProperty;
        public TextPresenter() { }
        public Avalonia.Media.IBrush? Background { get { throw null; } set { } }
        protected override bool BypassFlowDirectionPolicies { get { throw null; } }
        public Avalonia.Media.IBrush? CaretBrush { get { throw null; } set { } }
        public int CaretIndex { get { throw null; } set { } }
        public Avalonia.Media.TextFormatting.TextRange? CompositionRegion { get { throw null; } set { } }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } set { } }
        public double FontSize { get { throw null; } set { } }
        public Avalonia.Media.FontStretch FontStretch { get { throw null; } set { } }
        public Avalonia.Media.FontStyle FontStyle { get { throw null; } set { } }
        public Avalonia.Media.FontWeight FontWeight { get { throw null; } set { } }
        public Avalonia.Media.IBrush? Foreground { get { throw null; } set { } }
        public double LetterSpacing { get { throw null; } set { } }
        public double LineHeight { get { throw null; } set { } }
        public char PasswordChar { get { throw null; } set { } }
        public string? PreeditText { get { throw null; } set { } }
        public bool RevealPassword { get { throw null; } set { } }
        public Avalonia.Media.IBrush? SelectionBrush { get { throw null; } set { } }
        public int SelectionEnd { get { throw null; } set { } }
        public Avalonia.Media.IBrush? SelectionForegroundBrush { get { throw null; } set { } }
        public int SelectionStart { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        public string? Text { get { throw null; } set { } }
        public Avalonia.Media.TextAlignment TextAlignment { get { throw null; } set { } }
        public Avalonia.Media.TextFormatting.TextLayout TextLayout { get { throw null; } }
        public Avalonia.Media.TextWrapping TextWrapping { get { throw null; } set { } }
        public event System.EventHandler? CaretBoundsChanged { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected virtual Avalonia.Media.TextFormatting.TextLayout CreateTextLayout() { throw null; }
        public Avalonia.Media.CharacterHit GetNextCharacterHit(Avalonia.Media.TextFormatting.LogicalDirection direction = Avalonia.Media.TextFormatting.LogicalDirection.Forward) { throw null; }
        public void HideCaret() { }
        protected virtual void InvalidateTextLayout() { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        public void MoveCaretHorizontal(Avalonia.Media.TextFormatting.LogicalDirection direction = Avalonia.Media.TextFormatting.LogicalDirection.Forward) { }
        public void MoveCaretToPoint(Avalonia.Point point) { }
        public void MoveCaretToTextPosition(int textPosition, bool trailingEdge = false) { }
        public void MoveCaretVertical(Avalonia.Media.TextFormatting.LogicalDirection direction = Avalonia.Media.TextFormatting.LogicalDirection.Forward) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
        public void ShowCaret() { }
    }
}
namespace Avalonia.Controls.Primitives
{
    public partial class AccessText : Avalonia.Controls.TextBlock
    {
        public static readonly Avalonia.AttachedProperty<bool> ShowAccessKeyProperty;
        public AccessText() { }
        public char AccessKey { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool ShowAccessKey { get { throw null; } set { } }
        protected override Avalonia.Media.TextFormatting.TextLayout CreateTextLayout(string? text) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected internal override void RenderCore(Avalonia.Media.DrawingContext context) { }
    }
    public partial class AdornerLayer : Avalonia.Controls.Canvas
    {
        public static readonly Avalonia.AttachedProperty<Avalonia.Visual?> AdornedElementProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Control?> AdornerProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>?> DefaultFocusAdornerProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsClipEnabledProperty;
        public AdornerLayer() { }
        public Avalonia.Controls.ITemplate<Avalonia.Controls.Control>? DefaultFocusAdorner { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        public static Avalonia.Visual? GetAdornedElement(Avalonia.Visual adorner) { throw null; }
        public static Avalonia.Controls.Control? GetAdorner(Avalonia.Visual visual) { throw null; }
        public static Avalonia.Controls.Primitives.AdornerLayer? GetAdornerLayer(Avalonia.Visual visual) { throw null; }
        public static bool GetIsClipEnabled(Avalonia.Visual adorner) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        public static void SetAdornedElement(Avalonia.Visual adorner, Avalonia.Visual adorned) { }
        public static void SetAdorner(Avalonia.Visual visual, Avalonia.Controls.Control? adorner) { }
        public static void SetIsClipEnabled(Avalonia.Visual adorner, bool isClipEnabled) { }
    }
    public sealed partial class CalendarBlackoutDatesCollection : System.Collections.ObjectModel.ObservableCollection<Avalonia.Controls.CalendarDateRange>
    {
        public CalendarBlackoutDatesCollection(Avalonia.Controls.Calendar owner) { }
        public void AddDatesInPast() { }
        protected override void ClearItems() { }
        public bool Contains(System.DateTime date) { throw null; }
        public bool Contains(System.DateTime start, System.DateTime end) { throw null; }
        public bool ContainsAny(Avalonia.Controls.CalendarDateRange range) { throw null; }
        protected override void InsertItem(int index, Avalonia.Controls.CalendarDateRange item) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, Avalonia.Controls.CalendarDateRange item) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":selected", ":inactive", ":btnfocused"})]
    public sealed partial class CalendarButton : Avalonia.Controls.Button
    {
        public CalendarButton() { }
        public event System.EventHandler<Avalonia.Input.PointerPressedEventArgs>? CalendarLeftMouseButtonDown { add { } remove { } }
        public event System.EventHandler<Avalonia.Input.PointerReleasedEventArgs>? CalendarLeftMouseButtonUp { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":pressed", ":disabled", ":selected", ":inactive", ":today", ":blackout", ":dayfocused"})]
    public sealed partial class CalendarDayButton : Avalonia.Controls.Button
    {
        public CalendarDayButton() { }
        public event System.EventHandler<Avalonia.Input.PointerPressedEventArgs>? CalendarDayButtonMouseDown { add { } remove { } }
        public event System.EventHandler<Avalonia.Input.PointerReleasedEventArgs>? CalendarDayButtonMouseUp { add { } remove { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":calendardisabled"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HeaderButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_MonthView", typeof(Avalonia.Controls.Grid))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_NextButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PreviousButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_YearView", typeof(Avalonia.Controls.Grid))]
    public sealed partial class CalendarItem : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>?> DayTitleTemplateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> HeaderBackgroundProperty;
        public CalendarItem() { }
        public Avalonia.Controls.ITemplate<Avalonia.Controls.Control>? DayTitleTemplate { get { throw null; } set { } }
        public Avalonia.Media.IBrush? HeaderBackground { get { throw null; } set { } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
    }
    public partial class ChromeOverlayLayer : Avalonia.Controls.Panel
    {
        public ChromeOverlayLayer() { }
        public void Add(Avalonia.Controls.Control c) { }
        public static Avalonia.Controls.Panel? GetOverlayLayer(Avalonia.Visual visual) { throw null; }
    }
    public partial class DateTimePickerPanel : Avalonia.Controls.Panel, Avalonia.Controls.Primitives.ILogicalScrollable, Avalonia.Controls.Primitives.IScrollable
    {
        public static readonly Avalonia.StyledProperty<string> ItemFormatProperty;
        public static readonly Avalonia.StyledProperty<double> ItemHeightProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.DateTimePickerPanelType> PanelTypeProperty;
        public static readonly Avalonia.StyledProperty<bool> ShouldLoopProperty;
        public DateTimePickerPanel() { }
        public bool CanHorizontallyScroll { get { throw null; } set { } }
        public bool CanVerticallyScroll { get { throw null; } set { } }
        public Avalonia.Size Extent { get { throw null; } }
        public int Increment { get { throw null; } set { } }
        public bool IsLogicalScrollEnabled { get { throw null; } }
        public string ItemFormat { get { throw null; } set { } }
        public double ItemHeight { get { throw null; } set { } }
        public int MaximumValue { get { throw null; } set { } }
        public int MinimumValue { get { throw null; } set { } }
        public Avalonia.Vector Offset { get { throw null; } set { } }
        public Avalonia.Size PageScrollSize { get { throw null; } }
        public Avalonia.Controls.Primitives.DateTimePickerPanelType PanelType { get { throw null; } set { } }
        public Avalonia.Size ScrollSize { get { throw null; } }
        public int SelectedValue { get { throw null; } set { } }
        public bool ShouldLoop { get { throw null; } set { } }
        public Avalonia.Size Viewport { get { throw null; } }
        public event System.EventHandler? ScrollInvalidated { add { } remove { } }
        public event System.EventHandler? SelectionChanged { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        public bool BringIntoView(Avalonia.Controls.Control target, Avalonia.Rect targetRect) { throw null; }
        public Avalonia.Controls.Control? GetControlInDirection(Avalonia.Input.NavigationDirection direction, Avalonia.Controls.Control? from) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        public void RaiseScrollInvalidated(System.EventArgs e) { }
        public void RefreshItems() { }
        public void ScrollDown(int numItems = 1) { }
        public void ScrollUp(int numItems = 1) { }
    }
    public enum DateTimePickerPanelType
    {
        Year = 0,
        Month = 1,
        Day = 2,
        Hour = 3,
        Minute = 4,
        TimePeriod = 5,
    }
    public abstract partial class FlyoutBase : Avalonia.AvaloniaObject
    {
        public static readonly Avalonia.AttachedProperty<Avalonia.Controls.Primitives.FlyoutBase?> AttachedFlyoutProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.FlyoutBase, bool> IsOpenProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.FlyoutBase, Avalonia.Controls.Control?> TargetProperty;
        protected FlyoutBase() { }
        public bool IsOpen { get { throw null; } protected set { } }
        public Avalonia.Controls.Control? Target { get { throw null; } protected set { } }
        public event System.EventHandler? Closed { add { } remove { } }
        public event System.EventHandler? Opened { add { } remove { } }
        public static Avalonia.Controls.Primitives.FlyoutBase? GetAttachedFlyout(Avalonia.Controls.Control element) { throw null; }
        public abstract void Hide();
        protected virtual void OnClosed() { }
        protected virtual void OnOpened() { }
        public static void SetAttachedFlyout(Avalonia.Controls.Control element, Avalonia.Controls.Primitives.FlyoutBase? value) { }
        public abstract void ShowAt(Avalonia.Controls.Control placementTarget);
        public static void ShowAttachedFlyout(Avalonia.Controls.Control flyoutOwner) { }
    }
    public partial class HeaderedContentControl : Avalonia.Controls.ContentControl, Avalonia.Controls.IHeadered
    {
        public static readonly Avalonia.StyledProperty<object?> HeaderProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> HeaderTemplateProperty;
        public HeaderedContentControl() { }
        public object? Header { get { throw null; } set { } }
        public Avalonia.Controls.Presenters.IContentPresenter? HeaderPresenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Templates.IDataTemplate? HeaderTemplate { get { throw null; } set { } }
        protected override bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
    }
    public partial class HeaderedItemsControl : Avalonia.Controls.ItemsControl, Avalonia.Controls.Presenters.IContentPresenterHost
    {
        public static readonly Avalonia.StyledProperty<object?> HeaderProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> HeaderTemplateProperty;
        public HeaderedItemsControl() { }
        Avalonia.Collections.IAvaloniaList<Avalonia.LogicalTree.ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get { throw null; } }
        public object? Header { get { throw null; } set { } }
        public Avalonia.Controls.Presenters.IContentPresenter? HeaderPresenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Templates.IDataTemplate? HeaderTemplate { get { throw null; } set { } }
        bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected virtual bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
    }
    public partial class HeaderedSelectingItemsControl : Avalonia.Controls.Primitives.SelectingItemsControl, Avalonia.Controls.Presenters.IContentPresenterHost
    {
        public static readonly Avalonia.StyledProperty<object?> HeaderProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate?> HeaderTemplateProperty;
        public HeaderedSelectingItemsControl() { }
        Avalonia.Collections.IAvaloniaList<Avalonia.LogicalTree.ILogical> Avalonia.Controls.Presenters.IContentPresenterHost.LogicalChildren { get { throw null; } }
        public object? Header { get { throw null; } set { } }
        public Avalonia.Controls.Presenters.IContentPresenter? HeaderPresenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Templates.IDataTemplate? HeaderTemplate { get { throw null; } set { } }
        bool Avalonia.Controls.Presenters.IContentPresenterHost.RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected virtual bool RegisterContentPresenter(Avalonia.Controls.Presenters.IContentPresenter presenter) { throw null; }
    }
    public partial interface ILogicalScrollable : Avalonia.Controls.Primitives.IScrollable
    {
        bool CanHorizontallyScroll { get; set; }
        bool CanVerticallyScroll { get; set; }
        bool IsLogicalScrollEnabled { get; }
        Avalonia.Size PageScrollSize { get; }
        Avalonia.Size ScrollSize { get; }
        event System.EventHandler? ScrollInvalidated;
        bool BringIntoView(Avalonia.Controls.Control target, Avalonia.Rect targetRect);
        Avalonia.Controls.Control? GetControlInDirection(Avalonia.Input.NavigationDirection direction, Avalonia.Controls.Control? from);
        void RaiseScrollInvalidated(System.EventArgs e);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPopupHost : Avalonia.Input.IFocusScope, System.IDisposable
    {
        double Height { get; set; }
        Avalonia.Visual? HostedVisualTreeRoot { get; }
        double MaxHeight { get; set; }
        double MaxWidth { get; set; }
        double MinHeight { get; set; }
        double MinWidth { get; set; }
        Avalonia.Controls.Presenters.IContentPresenter? Presenter { get; }
        bool Topmost { get; set; }
        Avalonia.Media.Transform? Transform { get; set; }
        double Width { get; set; }
        event System.EventHandler<Avalonia.Controls.Primitives.TemplateAppliedEventArgs>? TemplateApplied;
        void ConfigurePosition(Avalonia.Visual target, Avalonia.Controls.PlacementMode placement, Avalonia.Point offset, Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor anchor = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.None, Avalonia.Controls.Primitives.PopupPositioning.PopupGravity gravity = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.None, Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment constraintAdjustment = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.All, Avalonia.Rect? rect = default(Avalonia.Rect?));
        void Hide();
        void SetChild(Avalonia.Controls.Control? control);
        void Show();
    }
    public partial interface IScrollable
    {
        Avalonia.Size Extent { get; }
        Avalonia.Vector Offset { get; set; }
        Avalonia.Size Viewport { get; }
    }
    public partial interface IScrollSnapPointsInfo
    {
        bool AreHorizontalSnapPointsRegular { get; set; }
        bool AreVerticalSnapPointsRegular { get; set; }
        event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> HorizontalSnapPointsChanged;
        event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs> VerticalSnapPointsChanged;
        System.Collections.Generic.IReadOnlyList<double> GetIrregularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment);
        double GetRegularSnapPoints(Avalonia.Layout.Orientation orientation, Avalonia.Controls.Primitives.SnapPointsAlignment snapPointsAlignment, out double offset);
    }
    public partial class LightDismissOverlayLayer : Avalonia.Controls.Border, Avalonia.Rendering.ICustomHitTest
    {
        public LightDismissOverlayLayer() { }
        public Avalonia.Input.IInputElement? InputPassThroughElement { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public static Avalonia.Controls.Primitives.LightDismissOverlayLayer? GetLightDismissOverlayLayer(Avalonia.Visual visual) { throw null; }
        public bool HitTest(Avalonia.Point point) { throw null; }
    }
    public partial class OverlayLayer : Avalonia.Controls.Canvas
    {
        public OverlayLayer() { }
        public Avalonia.Size AvailableSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        public static Avalonia.Controls.Primitives.OverlayLayer? GetOverlayLayer(Avalonia.Visual visual) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public partial class OverlayPopupHost : Avalonia.Controls.ContentControl, Avalonia.Controls.Primitives.IPopupHost, Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup, Avalonia.Input.IFocusScope, System.IDisposable
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Transform?> TransformProperty;
        public OverlayPopupHost(Avalonia.Controls.Primitives.OverlayLayer overlayLayer) { }
        bool Avalonia.Controls.Primitives.IPopupHost.Topmost { get { throw null; } set { } }
        Avalonia.Rect Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.ParentClientAreaScreenGeometry { get { throw null; } }
        double Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.Scaling { get { throw null; } }
        System.Collections.Generic.IReadOnlyList<Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositionerScreenInfo> Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.Screens { get { throw null; } }
        public Avalonia.Visual? HostedVisualTreeRoot { get { throw null; } }
        protected internal override Avalonia.Interactivity.Interactive? InteractiveParent { get { throw null; } }
        public Avalonia.Media.Transform? Transform { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_Height() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MaxHeight() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MaxWidth() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MinHeight() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MinWidth() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_Width() { throw null; }
        void Avalonia.Controls.Primitives.IPopupHost.set_Height(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MaxHeight(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MaxWidth(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MinHeight(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MinWidth(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_Width(double value) { }
        void Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup.MoveAndResize(Avalonia.Point devicePoint, Avalonia.Size virtualSize) { }
        public void ConfigurePosition(Avalonia.Visual target, Avalonia.Controls.PlacementMode placement, Avalonia.Point offset, Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor anchor = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.None, Avalonia.Controls.Primitives.PopupPositioning.PopupGravity gravity = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.None, Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment constraintAdjustment = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.All, Avalonia.Rect? rect = default(Avalonia.Rect?)) { }
        public static Avalonia.Controls.Primitives.IPopupHost CreatePopupHost(Avalonia.Visual target, Avalonia.IAvaloniaDependencyResolver? dependencyResolver) { throw null; }
        public void Dispose() { }
        public void Hide() { }
        public void SetChild(Avalonia.Controls.Control? control) { }
        public void Show() { }
    }
    public abstract partial class PickerPresenterBase : Avalonia.Controls.Primitives.TemplatedControl
    {
        protected PickerPresenterBase() { }
        public event System.EventHandler? Confirmed { add { } remove { } }
        public event System.EventHandler? Dismissed { add { } remove { } }
        protected virtual void OnConfirmed() { }
        protected virtual void OnDismiss() { }
    }
    public partial class Popup : Avalonia.Controls.Control, Avalonia.Controls.Diagnostics.IPopupHostProvider
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Control?> ChildProperty;
        public static readonly Avalonia.StyledProperty<double> HorizontalOffsetProperty;
        public static readonly Avalonia.StyledProperty<bool> InheritsTransformProperty;
        public static readonly Avalonia.StyledProperty<bool> IsLightDismissEnabledProperty;
        public static readonly Avalonia.StyledProperty<bool> IsOpenProperty;
        public static readonly Avalonia.StyledProperty<bool> OverlayDismissEventPassThroughProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.IInputElement?> OverlayInputPassThroughElementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor> PlacementAnchorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment> PlacementConstraintAdjustmentProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity> PlacementGravityProperty;
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use the Placement property instead.")]
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.PlacementMode> PlacementModeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.PlacementMode> PlacementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Rect?> PlacementRectProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Control?> PlacementTargetProperty;
        public static readonly Avalonia.StyledProperty<bool> TopmostProperty;
        public static readonly Avalonia.StyledProperty<double> VerticalOffsetProperty;
        public static readonly Avalonia.StyledProperty<bool> WindowManagerAddShadowHintProperty;
        public Popup() { }
        Avalonia.Controls.Primitives.IPopupHost? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get { throw null; } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Control? Child { get { throw null; } set { } }
        public Avalonia.IAvaloniaDependencyResolver? DependencyResolver { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public double HorizontalOffset { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.IPopupHost? Host { get { throw null; } }
        public bool InheritsTransform { get { throw null; } set { } }
        public bool IsLightDismissEnabled { get { throw null; } set { } }
        public bool IsOpen { get { throw null; } set { } }
        public bool IsPointerOverPopup { get { throw null; } }
        public bool OverlayDismissEventPassThrough { get { throw null; } set { } }
        public Avalonia.Input.IInputElement? OverlayInputPassThroughElement { get { throw null; } set { } }
        public Avalonia.Controls.PlacementMode Placement { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor PlacementAnchor { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment PlacementConstraintAdjustment { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupGravity PlacementGravity { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use the Placement property instead.")]
        public Avalonia.Controls.PlacementMode PlacementMode { get { throw null; } set { } }
        public Avalonia.Rect? PlacementRect { get { throw null; } set { } }
        [Avalonia.Controls.ResolveByNameAttribute]
        public Avalonia.Controls.Control? PlacementTarget { get { throw null; } set { } }
        public bool Topmost { get { throw null; } set { } }
        public double VerticalOffset { get { throw null; } set { } }
        public bool WindowManagerAddShadowHint { get { throw null; } set { } }
        event System.Action<Avalonia.Controls.Primitives.IPopupHost?>? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHostChanged { add { } remove { } }
        public event System.EventHandler<System.EventArgs>? Closed { add { } remove { } }
        public event System.EventHandler? Opened { add { } remove { } }
        public void Close() { }
        public bool IsInsidePopup(Avalonia.Visual visual) { throw null; }
        protected override Avalonia.Size MeasureCore(Avalonia.Size availableSize) { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public void Open() { }
    }
    public abstract partial class PopupFlyoutBase : Avalonia.Controls.Primitives.FlyoutBase, Avalonia.Controls.Diagnostics.IPopupHostProvider
    {
        public static readonly Avalonia.StyledProperty<double> HorizontalOffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Input.IInputElement?> OverlayInputPassThroughElementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor> PlacementAnchorProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity> PlacementGravityProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.PlacementMode> PlacementProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.FlyoutShowMode> ShowModeProperty;
        public static readonly Avalonia.StyledProperty<double> VerticalOffsetProperty;
        public PopupFlyoutBase() { }
        Avalonia.Controls.Primitives.IPopupHost? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHost { get { throw null; } }
        public double HorizontalOffset { get { throw null; } set { } }
        public Avalonia.Input.IInputElement? OverlayInputPassThroughElement { get { throw null; } set { } }
        public Avalonia.Controls.PlacementMode Placement { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor PlacementAnchor { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupGravity PlacementGravity { get { throw null; } set { } }
        protected Avalonia.Controls.Primitives.Popup Popup { get { throw null; } }
        public Avalonia.Controls.FlyoutShowMode ShowMode { get { throw null; } set { } }
        public double VerticalOffset { get { throw null; } set { } }
        event System.Action<Avalonia.Controls.Primitives.IPopupHost?>? Avalonia.Controls.Diagnostics.IPopupHostProvider.PopupHostChanged { add { } remove { } }
        public event System.EventHandler<System.ComponentModel.CancelEventArgs>? Closing { add { } remove { } }
        public event System.EventHandler? Opening { add { } remove { } }
        protected abstract Avalonia.Controls.Control CreatePresenter();
        public sealed override void Hide() { }
        protected virtual bool HideCore(bool canCancel = true) { throw null; }
        protected virtual void OnClosing(System.ComponentModel.CancelEventArgs args) { }
        protected virtual void OnOpening(System.ComponentModel.CancelEventArgs args) { }
        public sealed override void ShowAt(Avalonia.Controls.Control placementTarget) { }
        public void ShowAt(Avalonia.Controls.Control placementTarget, bool showAtPointer) { }
        protected virtual bool ShowAtCore(Avalonia.Controls.Control placementTarget, bool showAtPointer = false) { throw null; }
    }
    public sealed partial class PopupRoot : Avalonia.Controls.WindowBase, Avalonia.Controls.Primitives.IPopupHost, Avalonia.Input.IFocusScope, Avalonia.Styling.IStyleHost, Avalonia.VisualTree.IHostedVisualTreeRoot, System.IDisposable
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Transform?> TransformProperty;
        public PopupRoot(Avalonia.Controls.TopLevel parent, Avalonia.Platform.IPopupImpl impl) : base (default(Avalonia.Platform.IWindowBaseImpl)) { }
        public PopupRoot(Avalonia.Controls.TopLevel parent, Avalonia.Platform.IPopupImpl impl, Avalonia.IAvaloniaDependencyResolver? dependencyResolver) : base (default(Avalonia.Platform.IWindowBaseImpl)) { }
        Avalonia.Visual Avalonia.Controls.Primitives.IPopupHost.HostedVisualTreeRoot { get { throw null; } }
        Avalonia.Styling.IStyleHost? Avalonia.Styling.IStyleHost.StylingParent { get { throw null; } }
        Avalonia.Visual? Avalonia.VisualTree.IHostedVisualTreeRoot.Host { get { throw null; } }
        protected internal override Avalonia.Interactivity.Interactive? InteractiveParent { get { throw null; } }
        public Avalonia.Controls.TopLevel ParentTopLevel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public new Avalonia.Platform.IPopupImpl? PlatformImpl { get { throw null; } }
        public Avalonia.Media.Transform? Transform { get { throw null; } set { } }
        protected sealed override Avalonia.Size ArrangeSetBounds(Avalonia.Size size) { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_Height() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MaxHeight() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MaxWidth() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MinHeight() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_MinWidth() { throw null; }
        double Avalonia.Controls.Primitives.IPopupHost.get_Width() { throw null; }
        void Avalonia.Controls.Primitives.IPopupHost.set_Height(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MaxHeight(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MaxWidth(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MinHeight(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_MinWidth(double value) { }
        void Avalonia.Controls.Primitives.IPopupHost.set_Width(double value) { }
        public void ConfigurePosition(Avalonia.Visual target, Avalonia.Controls.PlacementMode placement, Avalonia.Point offset, Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor anchor = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.None, Avalonia.Controls.Primitives.PopupPositioning.PopupGravity gravity = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.None, Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment constraintAdjustment = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.All, Avalonia.Rect? rect = default(Avalonia.Rect?)) { }
        public void Dispose() { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        public void SetChild(Avalonia.Controls.Control? control) { }
    }
    public abstract partial class RangeBase : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<double> LargeChangeProperty;
        public static readonly Avalonia.StyledProperty<double> MaximumProperty;
        public static readonly Avalonia.StyledProperty<double> MinimumProperty;
        public static readonly Avalonia.StyledProperty<double> SmallChangeProperty;
        public static readonly Avalonia.StyledProperty<double> ValueProperty;
        protected RangeBase() { }
        public double LargeChange { get { throw null; } set { } }
        public double Maximum { get { throw null; } set { } }
        public double Minimum { get { throw null; } set { } }
        public double SmallChange { get { throw null; } set { } }
        public double Value { get { throw null; } set { } }
        protected override void OnInitialized() { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":vertical", ":horizontal"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_LineDownButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_LineUpButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PageDownButton", typeof(Avalonia.Controls.Button))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PageUpButton", typeof(Avalonia.Controls.Button))]
    public partial class ScrollBar : Avalonia.Controls.Primitives.RangeBase
    {
        public static readonly Avalonia.StyledProperty<bool> AllowAutoHideProperty;
        public static readonly Avalonia.StyledProperty<System.TimeSpan> HideDelayProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.ScrollBar, bool> IsExpandedProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<System.TimeSpan> ShowDelayProperty;
        public static readonly Avalonia.StyledProperty<double> ViewportSizeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.ScrollBarVisibility> VisibilityProperty;
        public ScrollBar() { }
        public bool AllowAutoHide { get { throw null; } set { } }
        public System.TimeSpan HideDelay { get { throw null; } set { } }
        public bool IsExpanded { get { throw null; } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        public System.TimeSpan ShowDelay { get { throw null; } set { } }
        public double ViewportSize { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.ScrollBarVisibility Visibility { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.Primitives.ScrollEventArgs>? Scroll { add { } remove { } }
        protected internal virtual void AttachToScrollViewer() { }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerExited(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected void OnScroll(Avalonia.Controls.Primitives.ScrollEventType scrollEventType) { }
    }
    public enum ScrollBarVisibility
    {
        Disabled = 0,
        Auto = 1,
        Hidden = 2,
        Visible = 3,
    }
    public partial class ScrollEventArgs : System.EventArgs
    {
        public ScrollEventArgs(Avalonia.Controls.Primitives.ScrollEventType eventType, double newValue) { }
        public double NewValue { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Primitives.ScrollEventType ScrollEventType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum ScrollEventType
    {
        SmallDecrement = 0,
        SmallIncrement = 1,
        LargeDecrement = 2,
        LargeIncrement = 3,
        ThumbTrack = 4,
        EndScroll = 5,
    }
    public sealed partial class SelectedDatesCollection : System.Collections.ObjectModel.ObservableCollection<System.DateTime>
    {
        public SelectedDatesCollection(Avalonia.Controls.Calendar owner) { }
        public void AddRange(System.DateTime start, System.DateTime end) { }
        protected override void ClearItems() { }
        protected override void InsertItem(int index, System.DateTime item) { }
        protected override void RemoveItem(int index) { }
        protected override void SetItem(int index, System.DateTime item) { }
    }
    public partial class SelectingItemsControl : Avalonia.Controls.ItemsControl
    {
        public static readonly Avalonia.StyledProperty<bool> AutoScrollToSelectedItemProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> IsSelectedChangedEvent;
        public static readonly Avalonia.StyledProperty<bool> IsSelectedProperty;
        public static readonly Avalonia.StyledProperty<bool> IsTextSearchEnabledProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.SelectingItemsControl, int> SelectedIndexProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.SelectingItemsControl, object?> SelectedItemProperty;
        protected static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.SelectingItemsControl, System.Collections.IList?> SelectedItemsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Data.IBinding?> SelectedValueBindingProperty;
        public static readonly Avalonia.StyledProperty<object?> SelectedValueProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.SelectionChangedEventArgs> SelectionChangedEvent;
        protected static readonly Avalonia.StyledProperty<Avalonia.Controls.SelectionMode> SelectionModeProperty;
        protected static readonly Avalonia.DirectProperty<Avalonia.Controls.Primitives.SelectingItemsControl, Avalonia.Controls.Selection.ISelectionModel> SelectionProperty;
        public static readonly Avalonia.StyledProperty<bool> WrapSelectionProperty;
        public SelectingItemsControl() { }
        protected bool AlwaysSelected { get { throw null; } }
        public bool AutoScrollToSelectedItem { get { throw null; } set { } }
        public bool IsTextSearchEnabled { get { throw null; } set { } }
        public int SelectedIndex { get { throw null; } set { } }
        public object? SelectedItem { get { throw null; } set { } }
        protected System.Collections.IList? SelectedItems { get { throw null; } set { } }
        public object? SelectedValue { get { throw null; } set { } }
        [Avalonia.Data.AssignBindingAttribute]
        [Avalonia.Metadata.InheritDataTypeFromItemsAttribute("ItemsSource")]
        public Avalonia.Data.IBinding? SelectedValueBinding { get { throw null; } set { } }
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute]
        protected Avalonia.Controls.Selection.ISelectionModel Selection { get { throw null; } set { } }
        protected Avalonia.Controls.SelectionMode SelectionMode { get { throw null; } set { } }
        public bool WrapSelection { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>? SelectionChanged { add { } remove { } }
        public override void BeginInit() { }
        protected internal override void ClearContainerForItemOverride(Avalonia.Controls.Control element) { }
        protected internal override void ContainerForItemPreparedOverride(Avalonia.Controls.Control container, object? item, int index) { }
        protected override void ContainerIndexChangedOverride(Avalonia.Controls.Control container, int oldIndex, int newIndex) { }
        public override void EndInit() { }
        protected Avalonia.Controls.Control? GetContainerFromEventSource(object? eventSource) { throw null; }
        public static bool GetIsSelected(Avalonia.Controls.Control control) { throw null; }
        protected bool MoveSelection(Avalonia.Controls.Control? from, Avalonia.Input.NavigationDirection direction, bool wrap) { throw null; }
        protected bool MoveSelection(Avalonia.Input.NavigationDirection direction, bool wrap) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDataContextBeginUpdate() { }
        protected override void OnDataContextEndUpdate() { }
        protected override void OnInitialized() { }
        protected override void OnKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override void OnTextInput(Avalonia.Input.TextInputEventArgs e) { }
        protected internal override void PrepareContainerForItemOverride(Avalonia.Controls.Control container, object? item, int index) { }
        public void ScrollIntoView(int index) { }
        public void ScrollIntoView(object item) { }
        public static void SetIsSelected(Avalonia.Controls.Control control, bool value) { }
        protected override void UpdateDataValidation(Avalonia.AvaloniaProperty property, Avalonia.Data.BindingValueType state, System.Exception? error) { }
        protected void UpdateSelection(Avalonia.Controls.Control container, bool select = true, bool rangeModifier = false, bool toggleModifier = false, bool rightButton = false, bool fromFocus = false) { }
        protected void UpdateSelection(int index, bool select = true, bool rangeModifier = false, bool toggleModifier = false, bool rightButton = false, bool fromFocus = false) { }
        protected bool UpdateSelectionFromEventSource(object? eventSource, bool select = true, bool rangeModifier = false, bool toggleModifier = false, bool rightButton = false, bool fromFocus = false) { throw null; }
    }
    public enum SnapPointsAlignment
    {
        Near = 0,
        Center = 1,
        Far = 2,
    }
    public enum SnapPointsType
    {
        None = 0,
        Mandatory = 1,
        MandatorySingle = 2,
    }
    public partial class SplitViewTemplateSettings : Avalonia.AvaloniaObject
    {
        internal SplitViewTemplateSettings() { }
        public static readonly Avalonia.StyledProperty<double> ClosedPaneWidthProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.GridLength> PaneColumnGridLengthProperty;
        public double ClosedPaneWidth { get { throw null; } }
        public Avalonia.Controls.GridLength PaneColumnGridLength { get { throw null; } }
    }
    public partial class TabStrip : Avalonia.Controls.Primitives.SelectingItemsControl
    {
        public TabStrip() { }
        protected internal override Avalonia.Controls.Control CreateContainerForItemOverride(object? item, int index, object? recycleKey) { throw null; }
        protected internal override bool NeedsContainerOverride(object? item, int index, out object? recycleKey) { throw null; }
        protected override void OnGotFocus(Avalonia.Input.GotFocusEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
    }
    public partial class TabStripItem : Avalonia.Controls.ListBoxItem
    {
        public TabStripItem() { }
    }
    public partial class TemplateAppliedEventArgs : Avalonia.Interactivity.RoutedEventArgs
    {
        public TemplateAppliedEventArgs(Avalonia.Controls.INameScope nameScope) { }
        public Avalonia.Controls.INameScope NameScope { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class TemplatedControl : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BackgroundProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> BorderBrushProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> BorderThicknessProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.CornerRadius> CornerRadiusProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontFamily> FontFamilyProperty;
        public static readonly Avalonia.StyledProperty<double> FontSizeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontStretch> FontStretchProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontStyle> FontStyleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.FontWeight> FontWeightProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> ForegroundProperty;
        public static readonly Avalonia.AttachedProperty<bool> IsTemplateFocusTargetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Thickness> PaddingProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.Primitives.TemplateAppliedEventArgs> TemplateAppliedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IControlTemplate?> TemplateProperty;
        public TemplatedControl() { }
        public Avalonia.Media.IBrush? Background { get { throw null; } set { } }
        public Avalonia.Media.IBrush? BorderBrush { get { throw null; } set { } }
        public Avalonia.Thickness BorderThickness { get { throw null; } set { } }
        public Avalonia.CornerRadius CornerRadius { get { throw null; } set { } }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } set { } }
        public double FontSize { get { throw null; } set { } }
        public Avalonia.Media.FontStretch FontStretch { get { throw null; } set { } }
        public Avalonia.Media.FontStyle FontStyle { get { throw null; } set { } }
        public Avalonia.Media.FontWeight FontWeight { get { throw null; } set { } }
        public Avalonia.Media.IBrush? Foreground { get { throw null; } set { } }
        public Avalonia.Thickness Padding { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IControlTemplate? Template { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.Primitives.TemplateAppliedEventArgs>? TemplateApplied { add { } remove { } }
        public sealed override void ApplyTemplate() { }
        public static bool GetIsTemplateFocusTarget(Avalonia.Controls.Control control) { throw null; }
        protected override Avalonia.Controls.Control GetTemplateFocusTarget() { throw null; }
        protected sealed override void NotifyChildResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs e) { }
        protected virtual void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected virtual void OnTemplateChanged(Avalonia.AvaloniaPropertyChangedEventArgs e) { }
        public static void SetIsTemplateFocusTarget(Avalonia.Controls.Control control, bool value) { }
    }
    public static partial class TextSearch
    {
        public static readonly Avalonia.AttachedProperty<string?> TextProperty;
        public static string? GetText(Avalonia.Controls.Control control) { throw null; }
        public static void SetText(Avalonia.Controls.Control control, string? text) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":pressed"})]
    public partial class Thumb : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs> DragCompletedEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs> DragDeltaEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Input.VectorEventArgs> DragStartedEvent;
        public Thumb() { }
        public event System.EventHandler<Avalonia.Input.VectorEventArgs>? DragCompleted { add { } remove { } }
        public event System.EventHandler<Avalonia.Input.VectorEventArgs>? DragDelta { add { } remove { } }
        public event System.EventHandler<Avalonia.Input.VectorEventArgs>? DragStarted { add { } remove { } }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        protected virtual void OnDragCompleted(Avalonia.Input.VectorEventArgs e) { }
        protected virtual void OnDragDelta(Avalonia.Input.VectorEventArgs e) { }
        protected virtual void OnDragStarted(Avalonia.Input.VectorEventArgs e) { }
        protected override void OnPointerCaptureLost(Avalonia.Input.PointerCaptureLostEventArgs e) { }
        protected override void OnPointerMoved(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerPressed(Avalonia.Input.PointerPressedEventArgs e) { }
        protected override void OnPointerReleased(Avalonia.Input.PointerReleasedEventArgs e) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":checked", ":unchecked", ":indeterminate"})]
    public partial class ToggleButton : Avalonia.Controls.Button
    {
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use IsCheckedChangedEvent instead.")]
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> CheckedEvent;
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use IsCheckedChangedEvent instead.")]
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> IndeterminateEvent;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> IsCheckedChangedEvent;
        public static readonly Avalonia.StyledProperty<bool?> IsCheckedProperty;
        public static readonly Avalonia.StyledProperty<bool> IsThreeStateProperty;
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use IsCheckedChangedEvent instead.")]
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Interactivity.RoutedEventArgs> UncheckedEvent;
        public ToggleButton() { }
        public bool? IsChecked { get { throw null; } set { } }
        public bool IsThreeState { get { throw null; } set { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use IsCheckedChanged instead.")]
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Checked { add { } remove { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use IsCheckedChanged instead.")]
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Indeterminate { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? IsCheckedChanged { add { } remove { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use IsCheckedChanged instead.")]
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Unchecked { add { } remove { } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use OnIsCheckedChanged instead.")]
        protected virtual void OnChecked(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnClick() { }
        protected override Avalonia.Automation.Peers.AutomationPeer OnCreateAutomationPeer() { throw null; }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use OnIsCheckedChanged instead.")]
        protected virtual void OnIndeterminate(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected virtual void OnIsCheckedChanged(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use OnIsCheckedChanged instead.")]
        protected virtual void OnUnchecked(Avalonia.Interactivity.RoutedEventArgs e) { }
        protected virtual void Toggle() { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":vertical", ":horizontal"})]
    public partial class Track : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Button?> DecreaseButtonProperty;
        public static readonly Avalonia.StyledProperty<bool> IgnoreThumbDragProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Button?> IncreaseButtonProperty;
        public static readonly Avalonia.StyledProperty<bool> IsDirectionReversedProperty;
        public static readonly Avalonia.StyledProperty<double> MaximumProperty;
        public static readonly Avalonia.StyledProperty<double> MinimumProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Layout.Orientation> OrientationProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.Thumb?> ThumbProperty;
        public static readonly Avalonia.StyledProperty<double> ValueProperty;
        public static readonly Avalonia.StyledProperty<double> ViewportSizeProperty;
        public Track() { }
        public Avalonia.Controls.Button? DecreaseButton { get { throw null; } set { } }
        public bool IgnoreThumbDrag { get { throw null; } set { } }
        public Avalonia.Controls.Button? IncreaseButton { get { throw null; } set { } }
        public bool IsDirectionReversed { get { throw null; } set { } }
        public double Maximum { get { throw null; } set { } }
        public double Minimum { get { throw null; } set { } }
        public Avalonia.Layout.Orientation Orientation { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        public Avalonia.Controls.Primitives.Thumb? Thumb { get { throw null; } set { } }
        public double Value { get { throw null; } set { } }
        public double ViewportSize { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size arrangeSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        public virtual double ValueFromDistance(double horizontal, double vertical) { throw null; }
        public virtual double ValueFromPoint(Avalonia.Point point) { throw null; }
    }
    public partial class UniformGrid : Avalonia.Controls.Panel
    {
        public static readonly Avalonia.StyledProperty<int> ColumnsProperty;
        public static readonly Avalonia.StyledProperty<int> FirstColumnProperty;
        public static readonly Avalonia.StyledProperty<int> RowsProperty;
        public UniformGrid() { }
        public int Columns { get { throw null; } set { } }
        public int FirstColumn { get { throw null; } set { } }
        public int Rows { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public partial class VisualLayerManager : Avalonia.Controls.Decorator
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.ChromeOverlayLayer?> ChromeOverlayLayerProperty;
        public VisualLayerManager() { }
        public Avalonia.Controls.Primitives.AdornerLayer AdornerLayer { get { throw null; } }
        public Avalonia.Controls.Primitives.ChromeOverlayLayer ChromeOverlayLayer { get { throw null; } }
        public bool IsPopup { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Primitives.LightDismissOverlayLayer LightDismissOverlayLayer { get { throw null; } }
        public Avalonia.Controls.Primitives.OverlayLayer? OverlayLayer { get { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void NotifyChildResourcesChanged(Avalonia.Controls.ResourcesChangedEventArgs e) { }
        protected override void OnAttachedToLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromLogicalTree(Avalonia.LogicalTree.LogicalTreeAttachmentEventArgs e) { }
    }
}
namespace Avalonia.Controls.Primitives.PopupPositioning
{
    public partial interface IManagedPopupPositionerPopup
    {
        Avalonia.Rect ParentClientAreaScreenGeometry { get; }
        double Scaling { get; }
        System.Collections.Generic.IReadOnlyList<Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositionerScreenInfo> Screens { get; }
        void MoveAndResize(Avalonia.Point devicePoint, Avalonia.Size virtualSize);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IPopupPositioner
    {
        void Update(Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters parameters);
    }
    public partial class ManagedPopupPositioner : Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner
    {
        public ManagedPopupPositioner(Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup popup) { }
        public void Update(Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters parameters) { }
    }
    public partial class ManagedPopupPositionerPopupImplHelper : Avalonia.Controls.Primitives.PopupPositioning.IManagedPopupPositionerPopup
    {
        public ManagedPopupPositionerPopupImplHelper(Avalonia.Platform.IWindowBaseImpl parent, Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositionerPopupImplHelper.MoveResizeDelegate moveResize) { }
        public Avalonia.Rect ParentClientAreaScreenGeometry { get { throw null; } }
        public virtual double Scaling { get { throw null; } }
        public System.Collections.Generic.IReadOnlyList<Avalonia.Controls.Primitives.PopupPositioning.ManagedPopupPositionerScreenInfo> Screens { get { throw null; } }
        public void MoveAndResize(Avalonia.Point devicePoint, Avalonia.Size virtualSize) { }
        public delegate void MoveResizeDelegate(Avalonia.PixelPoint position, Avalonia.Size size, double scaling);
    }
    public partial class ManagedPopupPositionerScreenInfo
    {
        public ManagedPopupPositionerScreenInfo(Avalonia.Rect bounds, Avalonia.Rect workingArea) { }
        public Avalonia.Rect Bounds { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Rect WorkingArea { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [System.FlagsAttribute]
    public enum PopupAnchor
    {
        None = 0,
        Top = 1,
        Bottom = 2,
        VerticalMask = 3,
        Left = 4,
        TopLeft = 5,
        BottomLeft = 6,
        Right = 8,
        TopRight = 9,
        BottomRight = 10,
        HorizontalMask = 12,
        AllMask = 15,
    }
    [System.FlagsAttribute]
    public enum PopupGravity
    {
        None = 0,
        Top = 1,
        Bottom = 2,
        Left = 4,
        TopLeft = 5,
        BottomLeft = 6,
        Right = 8,
        TopRight = 9,
        BottomRight = 10,
    }
    [System.FlagsAttribute]
    public enum PopupPositionerConstraintAdjustment
    {
        None = 0,
        SlideX = 1,
        SlideY = 2,
        FlipX = 4,
        FlipY = 8,
        ResizeX = 16,
        ResizeY = 16,
        All = 31,
    }
    [Avalonia.Metadata.UnstableAttribute]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct PopupPositionerParameters : System.IEquatable<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters>
    {
        private int _dummyPrimitive;
        public Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor Anchor { get { throw null; } set { } }
        public Avalonia.Rect AnchorRectangle { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment ConstraintAdjustment { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Primitives.PopupPositioning.PopupGravity Gravity { get { throw null; } set { } }
        public Avalonia.Point Offset { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Size Size { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public bool Equals(Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters other) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override bool Equals(object obj) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override int GetHashCode() { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static bool operator ==(Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters left, Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public static bool operator !=(Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters left, Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerParameters right) { throw null; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        public override string ToString() { throw null; }
    }
}
namespace Avalonia.Controls.Remote
{
    [Avalonia.Metadata.UnstableAttribute]
    public partial class RemoteServer
    {
        public RemoteServer(Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection transport) { }
        public object? Content { get { throw null; } set { } }
    }
    public partial class RemoteWidget : Avalonia.Controls.Control
    {
        public RemoteWidget(Avalonia.Remote.Protocol.IAvaloniaRemoteTransportConnection connection) { }
        public Avalonia.Controls.Remote.RemoteWidget.SizingMode Mode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        protected override void ArrangeCore(Avalonia.Rect finalRect) { }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
        public enum SizingMode
        {
            Local = 0,
            Remote = 1,
        }
    }
}
namespace Avalonia.Controls.Selection
{
    public partial interface ISelectionModel : System.ComponentModel.INotifyPropertyChanged
    {
        int AnchorIndex { get; set; }
        int Count { get; }
        int SelectedIndex { get; set; }
        System.Collections.Generic.IReadOnlyList<int> SelectedIndexes { get; }
        object? SelectedItem { get; set; }
        System.Collections.Generic.IReadOnlyList<object?> SelectedItems { get; }
        bool SingleSelect { get; set; }
        System.Collections.IEnumerable? Source { get; set; }
        event System.EventHandler<Avalonia.Controls.Selection.SelectionModelIndexesChangedEventArgs>? IndexesChanged;
        event System.EventHandler? LostSelection;
        event System.EventHandler<Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs>? SelectionChanged;
        event System.EventHandler? SourceReset;
        void BeginBatchUpdate();
        void Clear();
        void Deselect(int index);
        void DeselectRange(int start, int end);
        void EndBatchUpdate();
        bool IsSelected(int index);
        void Select(int index);
        void SelectAll();
        void SelectRange(int start, int end);
    }
    public static partial class SelectionModelExtensions
    {
        public static System.IDisposable BatchUpdate(this Avalonia.Controls.Selection.ISelectionModel model) { throw null; }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct BatchUpdateOperation : System.IDisposable, System.IEquatable<Avalonia.Controls.Selection.SelectionModelExtensions.BatchUpdateOperation>
        {
            private object _dummy;
            private int _dummyPrimitive;
            public BatchUpdateOperation(Avalonia.Controls.Selection.ISelectionModel owner) { throw null; }
            public void Dispose() { }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public bool Equals(Avalonia.Controls.Selection.SelectionModelExtensions.BatchUpdateOperation other) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override int GetHashCode() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public static bool operator ==(Avalonia.Controls.Selection.SelectionModelExtensions.BatchUpdateOperation left, Avalonia.Controls.Selection.SelectionModelExtensions.BatchUpdateOperation right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public static bool operator !=(Avalonia.Controls.Selection.SelectionModelExtensions.BatchUpdateOperation left, Avalonia.Controls.Selection.SelectionModelExtensions.BatchUpdateOperation right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override string ToString() { throw null; }
        }
    }
    public partial class SelectionModelIndexesChangedEventArgs : System.EventArgs
    {
        public SelectionModelIndexesChangedEventArgs(int startIndex, int delta) { }
        public int Delta { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int StartIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public abstract partial class SelectionModelSelectionChangedEventArgs : System.EventArgs
    {
        protected SelectionModelSelectionChangedEventArgs() { }
        public abstract System.Collections.Generic.IReadOnlyList<int> DeselectedIndexes { get; }
        public System.Collections.Generic.IReadOnlyList<object?> DeselectedItems { get { throw null; } }
        public abstract System.Collections.Generic.IReadOnlyList<int> SelectedIndexes { get; }
        public System.Collections.Generic.IReadOnlyList<object?> SelectedItems { get { throw null; } }
        protected abstract System.Collections.Generic.IReadOnlyList<object?> GetUntypedDeselectedItems();
        protected abstract System.Collections.Generic.IReadOnlyList<object?> GetUntypedSelectedItems();
    }
    public partial class SelectionModelSelectionChangedEventArgs<T> : Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs
    {
        public SelectionModelSelectionChangedEventArgs(System.Collections.Generic.IReadOnlyList<int>? deselectedIndices = null, System.Collections.Generic.IReadOnlyList<int>? selectedIndices = null, System.Collections.Generic.IReadOnlyList<T?>? deselectedItems = null, System.Collections.Generic.IReadOnlyList<T?>? selectedItems = null) { }
        public override System.Collections.Generic.IReadOnlyList<int> DeselectedIndexes { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public new System.Collections.Generic.IReadOnlyList<T?> DeselectedItems { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public override System.Collections.Generic.IReadOnlyList<int> SelectedIndexes { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public new System.Collections.Generic.IReadOnlyList<T?> SelectedItems { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected override System.Collections.Generic.IReadOnlyList<object?> GetUntypedDeselectedItems() { throw null; }
        protected override System.Collections.Generic.IReadOnlyList<object?> GetUntypedSelectedItems() { throw null; }
    }
    public partial class SelectionModel<T> : Avalonia.Controls.Selection.SelectionNodeBase<T>, Avalonia.Controls.Selection.ISelectionModel, System.ComponentModel.INotifyPropertyChanged
    {
        public SelectionModel() { }
        public SelectionModel(System.Collections.Generic.IEnumerable<T>? source) { }
        public int AnchorIndex { get { throw null; } set { } }
        object? Avalonia.Controls.Selection.ISelectionModel.SelectedItem { get { throw null; } set { } }
        System.Collections.Generic.IReadOnlyList<object?> Avalonia.Controls.Selection.ISelectionModel.SelectedItems { get { throw null; } }
        System.Collections.IEnumerable? Avalonia.Controls.Selection.ISelectionModel.Source { get { throw null; } set { } }
        public int Count { get { throw null; } }
        public int SelectedIndex { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<int> SelectedIndexes { get { throw null; } }
        public T? SelectedItem { get { throw null; } set { } }
        public System.Collections.Generic.IReadOnlyList<T?> SelectedItems { get { throw null; } }
        public bool SingleSelect { get { throw null; } set { } }
        public new System.Collections.IEnumerable? Source { get { throw null; } set { } }
        event System.EventHandler<Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs>? Avalonia.Controls.Selection.ISelectionModel.SelectionChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.Selection.SelectionModelIndexesChangedEventArgs>? IndexesChanged { add { } remove { } }
        public event System.EventHandler? LostSelection { add { } remove { } }
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.Selection.SelectionModelSelectionChangedEventArgs<T>>? SelectionChanged { add { } remove { } }
        public event System.EventHandler? SourceReset { add { } remove { } }
        public Avalonia.Controls.Selection.SelectionModel<T>.BatchUpdateOperation BatchUpdate() { throw null; }
        public void BeginBatchUpdate() { }
        public void Clear() { }
        public void Deselect(int index) { }
        public void DeselectRange(int start, int end) { }
        public void EndBatchUpdate() { }
        public bool IsSelected(int index) { throw null; }
        protected override void OnIndexesChanged(int shiftIndex, int shiftDelta) { }
        protected override Avalonia.Controls.Selection.SelectionNodeBase<T>.CollectionChangeState OnItemsAdded(int index, System.Collections.IList items) { throw null; }
        protected override void OnSelectionRemoved(int index, int count, System.Collections.Generic.IReadOnlyList<T> deselectedItems) { }
        protected override void OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected override void OnSourceCollectionChangeFinished() { }
        protected override void OnSourceCollectionChangeStarted() { }
        protected override void OnSourceReset() { }
        protected void RaisePropertyChanged(string propertyName) { }
        public void Select(int index) { }
        public void SelectAll() { }
        public void SelectRange(int start, int end) { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct BatchUpdateOperation : System.IDisposable, System.IEquatable<Avalonia.Controls.Selection.SelectionModel<T>.BatchUpdateOperation>
        {
            private object _dummy;
            private int _dummyPrimitive;
            public BatchUpdateOperation(Avalonia.Controls.Selection.SelectionModel<T> owner) { throw null; }
            public void Dispose() { }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public bool Equals(Avalonia.Controls.Selection.SelectionModel<T>.BatchUpdateOperation other) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override bool Equals(object obj) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override int GetHashCode() { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public static bool operator ==(Avalonia.Controls.Selection.SelectionModel<T>.BatchUpdateOperation left, Avalonia.Controls.Selection.SelectionModel<T>.BatchUpdateOperation right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public static bool operator !=(Avalonia.Controls.Selection.SelectionModel<T>.BatchUpdateOperation left, Avalonia.Controls.Selection.SelectionModel<T>.BatchUpdateOperation right) { throw null; }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            public override string ToString() { throw null; }
        }
    }
    public abstract partial class SelectionNodeBase<T>
    {
        protected SelectionNodeBase() { }
        protected internal Avalonia.Controls.ItemsSourceView<T>? ItemsView { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        protected bool RangesEnabled { get { throw null; } set { } }
        protected System.Collections.IEnumerable? Source { get { throw null; } set { } }
        protected int CommitDeselect(int begin, int end) { throw null; }
        protected int CommitSelect(int begin, int end) { throw null; }
        protected virtual void OnIndexesChanged(int shiftIndex, int shiftDelta) { }
        protected virtual Avalonia.Controls.Selection.SelectionNodeBase<T>.CollectionChangeState OnItemsAdded(int index, System.Collections.IList items) { throw null; }
        protected virtual void OnSelectionRemoved(int index, int count, System.Collections.Generic.IReadOnlyList<T> deselectedItems) { }
        protected virtual void OnSourceCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected virtual void OnSourceCollectionChangeFinished() { }
        protected virtual void OnSourceCollectionChangeStarted() { }
        protected abstract void OnSourceReset();
        protected partial class CollectionChangeState
        {
            public CollectionChangeState() { }
            public System.Collections.Generic.List<T>? RemovedItems { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
            public int ShiftDelta { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
            public int ShiftIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        }
    }
}
namespace Avalonia.Controls.Shapes
{
    public partial class Arc : Avalonia.Controls.Shapes.Shape
    {
        public static readonly Avalonia.StyledProperty<double> StartAngleProperty;
        public static readonly Avalonia.StyledProperty<double> SweepAngleProperty;
        public Arc() { }
        public double StartAngle { get { throw null; } set { } }
        public double SweepAngle { get { throw null; } set { } }
        protected override Avalonia.Media.Geometry CreateDefiningGeometry() { throw null; }
    }
    public partial class Ellipse : Avalonia.Controls.Shapes.Shape
    {
        public Ellipse() { }
        protected override Avalonia.Media.Geometry CreateDefiningGeometry() { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public partial class Line : Avalonia.Controls.Shapes.Shape
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Point> EndPointProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Point> StartPointProperty;
        public Line() { }
        public Avalonia.Point EndPoint { get { throw null; } set { } }
        public Avalonia.Point StartPoint { get { throw null; } set { } }
        protected override Avalonia.Media.Geometry CreateDefiningGeometry() { throw null; }
    }
    public partial class Path : Avalonia.Controls.Shapes.Shape
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Geometry> DataProperty;
        public Path() { }
        public Avalonia.Media.Geometry Data { get { throw null; } set { } }
        protected override Avalonia.Media.Geometry CreateDefiningGeometry() { throw null; }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
    }
    public partial class Polygon : Avalonia.Controls.Shapes.Shape
    {
        public static readonly Avalonia.StyledProperty<System.Collections.Generic.IList<Avalonia.Point>> PointsProperty;
        public Polygon() { }
        public System.Collections.Generic.IList<Avalonia.Point> Points { get { throw null; } set { } }
        protected override Avalonia.Media.Geometry CreateDefiningGeometry() { throw null; }
    }
    public partial class Polyline : Avalonia.Controls.Shapes.Shape
    {
        public static readonly Avalonia.StyledProperty<System.Collections.Generic.IList<Avalonia.Point>> PointsProperty;
        public Polyline() { }
        public System.Collections.Generic.IList<Avalonia.Point> Points { get { throw null; } set { } }
        protected override Avalonia.Media.Geometry CreateDefiningGeometry() { throw null; }
    }
    public partial class Rectangle : Avalonia.Controls.Shapes.Shape
    {
        public static readonly Avalonia.StyledProperty<double> RadiusXProperty;
        public static readonly Avalonia.StyledProperty<double> RadiusYProperty;
        public Rectangle() { }
        public double RadiusX { get { throw null; } set { } }
        public double RadiusY { get { throw null; } set { } }
        protected override Avalonia.Media.Geometry CreateDefiningGeometry() { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public partial class Sector : Avalonia.Controls.Shapes.Shape
    {
        public static readonly Avalonia.StyledProperty<double> StartAngleProperty;
        public static readonly Avalonia.StyledProperty<double> SweepAngleProperty;
        public Sector() { }
        public double StartAngle { get { throw null; } set { } }
        public double SweepAngle { get { throw null; } set { } }
        protected override Avalonia.Media.Geometry? CreateDefiningGeometry() { throw null; }
    }
    public abstract partial class Shape : Avalonia.Controls.Control
    {
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> FillProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.Stretch> StretchProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Collections.AvaloniaList<double>?> StrokeDashArrayProperty;
        public static readonly Avalonia.StyledProperty<double> StrokeDashOffsetProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.PenLineJoin> StrokeJoinProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.PenLineCap> StrokeLineCapProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush?> StrokeProperty;
        public static readonly Avalonia.StyledProperty<double> StrokeThicknessProperty;
        protected Shape() { }
        public Avalonia.Media.Geometry? DefiningGeometry { get { throw null; } }
        public Avalonia.Media.IBrush? Fill { get { throw null; } set { } }
        public Avalonia.Media.Geometry? RenderedGeometry { get { throw null; } }
        public Avalonia.Media.Stretch Stretch { get { throw null; } set { } }
        public Avalonia.Media.IBrush? Stroke { get { throw null; } set { } }
        public Avalonia.Collections.AvaloniaList<double>? StrokeDashArray { get { throw null; } set { } }
        public double StrokeDashOffset { get { throw null; } set { } }
        public Avalonia.Media.PenLineJoin StrokeJoin { get { throw null; } set { } }
        public Avalonia.Media.PenLineCap StrokeLineCap { get { throw null; } set { } }
        public double StrokeThickness { get { throw null; } set { } }
        protected static void AffectsGeometry<TShape>(params Avalonia.AvaloniaProperty[] properties) where TShape : Avalonia.Controls.Shapes.Shape { }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected abstract Avalonia.Media.Geometry? CreateDefiningGeometry();
        protected void InvalidateGeometry() { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        public sealed override void Render(Avalonia.Media.DrawingContext context) { }
    }
}
namespace Avalonia.Controls.Templates
{
    public static partial class DataTemplateExtensions
    {
        public static Avalonia.Controls.Templates.IDataTemplate? FindDataTemplate(this Avalonia.Controls.Control control, object? data, Avalonia.Controls.Templates.IDataTemplate? primary = null) { throw null; }
    }
    public partial class DataTemplates : Avalonia.Collections.AvaloniaList<Avalonia.Controls.Templates.IDataTemplate>
    {
        public DataTemplates() { }
    }
    public partial class FuncControlTemplate : Avalonia.Controls.Templates.FuncTemplate<Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.Control>, Avalonia.Controls.Templates.IControlTemplate, Avalonia.Controls.Templates.ITemplate<Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.Templates.TemplateResult<Avalonia.Controls.Control>?>
    {
        public FuncControlTemplate(System.Func<Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.INameScope, Avalonia.Controls.Control> build) : base (default(System.Func<Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.INameScope, Avalonia.Controls.Control>)) { }
        public new Avalonia.Controls.Templates.TemplateResult<Avalonia.Controls.Control> Build(Avalonia.Controls.Primitives.TemplatedControl param) { throw null; }
    }
    public partial class FuncControlTemplate<T> : Avalonia.Controls.Templates.FuncControlTemplate where T : Avalonia.Controls.Primitives.TemplatedControl
    {
        public FuncControlTemplate(System.Func<T, Avalonia.Controls.INameScope, Avalonia.Controls.Control> build) : base (default(System.Func<Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.INameScope, Avalonia.Controls.Control>)) { }
    }
    public partial class FuncDataTemplate : Avalonia.Controls.Templates.FuncTemplate<object?, Avalonia.Controls.Control?>, Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.IRecyclingDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>
    {
        public static readonly Avalonia.Controls.Templates.FuncDataTemplate Access;
        public static readonly Avalonia.Controls.Templates.FuncDataTemplate Default;
        public FuncDataTemplate(System.Func<object?, bool> match, System.Func<object?, Avalonia.Controls.INameScope, Avalonia.Controls.Control?> build, bool supportsRecycling = false) : base (default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>)) { }
        public FuncDataTemplate(System.Type type, System.Func<object?, Avalonia.Controls.INameScope, Avalonia.Controls.Control?> build, bool supportsRecycling = false) : base (default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>)) { }
        public Avalonia.Controls.Control? Build(object? data, Avalonia.Controls.Control? existing) { throw null; }
        public bool Match(object? data) { throw null; }
    }
    public partial class FuncDataTemplate<T> : Avalonia.Controls.Templates.FuncDataTemplate
    {
        public FuncDataTemplate(System.Func<T, Avalonia.Controls.INameScope, Avalonia.Controls.Control?> build, bool supportsRecycling = false) : base (default(System.Type), default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>), default(bool)) { }
        public FuncDataTemplate(System.Func<T, bool> match, System.Func<T, Avalonia.Controls.Control> build, bool supportsRecycling = false) : base (default(System.Type), default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>), default(bool)) { }
        public FuncDataTemplate(System.Func<T, bool> match, System.Func<T, Avalonia.Controls.INameScope, Avalonia.Controls.Control> build, bool supportsRecycling = false) : base (default(System.Type), default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>), default(bool)) { }
    }
    public static partial class FuncTemplateNameScopeExtensions
    {
        public static T RegisterInNameScope<T>(this T control, Avalonia.Controls.INameScope scope) where T : Avalonia.StyledElement { throw null; }
    }
    public partial class FuncTemplate<TControl> : Avalonia.Controls.ITemplate<TControl>, Avalonia.Styling.ITemplate where TControl : Avalonia.Controls.Control?
    {
        public FuncTemplate(System.Func<TControl> func) { }
        object? Avalonia.Styling.ITemplate.Build() { throw null; }
        public TControl Build() { throw null; }
    }
    public partial class FuncTemplate<TParam, TControl> : Avalonia.Controls.Templates.ITemplate<TParam, TControl> where TControl : Avalonia.Controls.Control?
    {
        public FuncTemplate(System.Func<TParam, Avalonia.Controls.INameScope, TControl> func) { }
        public TControl Build(TParam param) { throw null; }
        protected (TControl control, Avalonia.Controls.INameScope nameScope) BuildWithNameScope(TParam param) { throw null; }
    }
    public partial class FuncTreeDataTemplate : Avalonia.Controls.Templates.FuncDataTemplate, Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>, Avalonia.Controls.Templates.ITreeDataTemplate
    {
        public FuncTreeDataTemplate(System.Func<object?, bool> match, System.Func<object?, Avalonia.Controls.INameScope, Avalonia.Controls.Control?> build, System.Func<object?, System.Collections.IEnumerable> itemsSelector) : base (default(System.Type), default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>), default(bool)) { }
        public FuncTreeDataTemplate(System.Type type, System.Func<object?, Avalonia.Controls.INameScope, Avalonia.Controls.Control> build, System.Func<object?, System.Collections.IEnumerable> itemsSelector) : base (default(System.Type), default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>), default(bool)) { }
        public Avalonia.Data.InstancedBinding ItemsSelector(object item) { throw null; }
    }
    public partial class FuncTreeDataTemplate<T> : Avalonia.Controls.Templates.FuncTreeDataTemplate
    {
        public FuncTreeDataTemplate(System.Func<T, Avalonia.Controls.INameScope, Avalonia.Controls.Control> build, System.Func<T, System.Collections.IEnumerable> itemsSelector) : base (default(System.Type), default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>), default(System.Func<object, System.Collections.IEnumerable>)) { }
        public FuncTreeDataTemplate(System.Func<T, bool> match, System.Func<T, Avalonia.Controls.INameScope, Avalonia.Controls.Control> build, System.Func<T, System.Collections.IEnumerable> itemsSelector) : base (default(System.Type), default(System.Func<object, Avalonia.Controls.INameScope, Avalonia.Controls.Control>), default(System.Func<object, System.Collections.IEnumerable>)) { }
    }
    public partial interface IControlTemplate : Avalonia.Controls.Templates.ITemplate<Avalonia.Controls.Primitives.TemplatedControl, Avalonia.Controls.Templates.TemplateResult<Avalonia.Controls.Control>?>
    {
    }
    public partial interface IDataTemplate : Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>
    {
        bool Match(object? data);
    }
    [Avalonia.Metadata.NotClientImplementableAttribute]
    public partial interface IDataTemplateHost
    {
        Avalonia.Controls.Templates.DataTemplates DataTemplates { get; }
        bool IsDataTemplatesInitialized { get; }
    }
    public partial interface IRecyclingDataTemplate : Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>
    {
        Avalonia.Controls.Control? Build(object? data, Avalonia.Controls.Control? existing);
    }
    public partial interface ITemplate<TParam, TControl>
    {
        TControl Build(TParam param);
    }
    public partial interface ITreeDataTemplate : Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>
    {
        Avalonia.Data.InstancedBinding? ItemsSelector(object item);
    }
    public partial interface ITypedDataTemplate : Avalonia.Controls.Templates.IDataTemplate, Avalonia.Controls.Templates.ITemplate<object?, Avalonia.Controls.Control?>
    {
        [Avalonia.Metadata.DataTypeAttribute]
        System.Type? DataType { get; }
    }
    public static partial class TemplateExtensions
    {
        public static System.Collections.Generic.IEnumerable<Avalonia.Controls.Control> GetTemplateChildren(this Avalonia.Controls.Primitives.TemplatedControl control) { throw null; }
    }
}
namespace Avalonia.Controls.Utils
{
    public static partial class AncestorFinder
    {
        public static System.IObservable<Avalonia.StyledElement?> Create(Avalonia.StyledElement control, System.Type ancestorType) { throw null; }
        public static System.IObservable<T?> Create<T>(Avalonia.StyledElement control) where T : Avalonia.StyledElement { throw null; }
    }
    public partial interface ISelectionAdapter
    {
        System.Collections.IEnumerable? ItemsSource { get; set; }
        object? SelectedItem { get; set; }
        event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Cancel;
        event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Commit;
        event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>? SelectionChanged;
        void HandleKeyDown(Avalonia.Input.KeyEventArgs e);
    }
    public partial class SelectingItemsControlSelectionAdapter : Avalonia.Controls.Utils.ISelectionAdapter
    {
        public SelectingItemsControlSelectionAdapter() { }
        public SelectingItemsControlSelectionAdapter(Avalonia.Controls.Primitives.SelectingItemsControl selector) { }
        public System.Collections.IEnumerable? ItemsSource { get { throw null; } set { } }
        public object? SelectedItem { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.SelectingItemsControl? SelectorControl { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Cancel { add { } remove { } }
        public event System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>? Commit { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>? SelectionChanged { add { } remove { } }
        public void HandleKeyDown(Avalonia.Input.KeyEventArgs e) { }
        protected virtual void OnCancel() { }
        protected virtual void OnCommit() { }
        protected void SelectedIndexDecrement() { }
        protected void SelectedIndexIncrement() { }
    }
}
namespace Avalonia.Platform
{
    [System.AttributeUsageAttribute(System.AttributeTargets.Assembly, AllowMultiple=true)]
    public sealed partial class ExportAvaloniaModuleAttribute : System.Attribute
    {
        public ExportAvaloniaModuleAttribute(string name, System.Type moduleType) { }
        public string ForRenderingSubsystem { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string ForWindowingSubsystem { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public System.Type ModuleType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [System.FlagsAttribute]
    public enum ExtendClientAreaChromeHints
    {
        NoChrome = 0,
        SystemChrome = 1,
        Default = 2,
        PreferSystemChrome = 2,
        OSXThickTitleBar = 8,
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IApplicationPlatformEvents
    {
        void RaiseUrlsOpened(string[] urls);
    }
    [Avalonia.Metadata.PrivateApiAttribute]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformIconLoader
    {
        Avalonia.Platform.IWindowIconImpl LoadIcon(Avalonia.Platform.IBitmapImpl bitmap);
        Avalonia.Platform.IWindowIconImpl LoadIcon(System.IO.Stream stream);
        Avalonia.Platform.IWindowIconImpl LoadIcon(string fileName);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformLifetimeEventsImpl
    {
        event System.EventHandler<Avalonia.Controls.ApplicationLifetimes.ShutdownRequestedEventArgs>? ShutdownRequested;
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPlatformNativeSurfaceHandle : Avalonia.Platform.IPlatformHandle
    {
        double Scaling { get; }
        Avalonia.PixelSize Size { get; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IPopupImpl : Avalonia.Platform.IOptionalFeatureProvider, Avalonia.Platform.ITopLevelImpl, Avalonia.Platform.IWindowBaseImpl, System.IDisposable
    {
        Avalonia.Controls.Primitives.PopupPositioning.IPopupPositioner? PopupPositioner { get; }
        void SetWindowManagerAddShadowHint(bool enabled);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IScreenImpl
    {
        System.Collections.Generic.IReadOnlyList<Avalonia.Platform.Screen> AllScreens { get; }
        int ScreenCount { get; }
        Avalonia.Platform.Screen? ScreenFromPoint(Avalonia.PixelPoint point);
        Avalonia.Platform.Screen? ScreenFromRect(Avalonia.PixelRect rect);
        Avalonia.Platform.Screen? ScreenFromWindow(Avalonia.Platform.IWindowBaseImpl window);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ITopLevelImpl : Avalonia.Platform.IOptionalFeatureProvider, System.IDisposable
    {
        Avalonia.Controls.AcrylicPlatformCompensationLevels AcrylicCompensationLevels { get; }
        Avalonia.Size ClientSize { get; }
        System.Action? Closed { get; set; }
        Avalonia.Size? FrameSize { get; }
        System.Action<Avalonia.Input.Raw.RawInputEventArgs>? Input { get; set; }
        System.Action? LostFocus { get; set; }
        System.Action<Avalonia.Rect>? Paint { get; set; }
        double RenderScaling { get; }
        System.Action<Avalonia.Size, Avalonia.Controls.WindowResizeReason>? Resized { get; set; }
        System.Action<double>? ScalingChanged { get; set; }
        System.Collections.Generic.IEnumerable<object> Surfaces { get; }
        Avalonia.Controls.WindowTransparencyLevel TransparencyLevel { get; }
        System.Action<Avalonia.Controls.WindowTransparencyLevel>? TransparencyLevelChanged { get; set; }
        Avalonia.Platform.IPopupImpl? CreatePopup();
        Avalonia.Rendering.IRenderer CreateRenderer(Avalonia.Rendering.IRenderRoot root);
        Avalonia.Point PointToClient(Avalonia.PixelPoint point);
        Avalonia.PixelPoint PointToScreen(Avalonia.Point point);
        void SetCursor(Avalonia.Platform.ICursorImpl? cursor);
        void SetFrameThemeVariant(Avalonia.Platform.PlatformThemeVariant themeVariant);
        void SetInputRoot(Avalonia.Input.IInputRoot inputRoot);
        void SetTransparencyLevelHint(Avalonia.Controls.WindowTransparencyLevel transparencyLevel);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ITrayIconImpl : System.IDisposable
    {
        Avalonia.Controls.Platform.INativeMenuExporter? MenuExporter { get; }
        System.Action? OnClicked { get; set; }
        void SetIcon(Avalonia.Platform.IWindowIconImpl? icon);
        void SetIsVisible(bool visible);
        void SetToolTipText(string? text);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IWindowBaseImpl : Avalonia.Platform.IOptionalFeatureProvider, Avalonia.Platform.ITopLevelImpl, System.IDisposable
    {
        System.Action? Activated { get; set; }
        System.Action? Deactivated { get; set; }
        double DesktopScaling { get; }
        Avalonia.Platform.IPlatformHandle Handle { get; }
        Avalonia.Size MaxAutoSizeHint { get; }
        Avalonia.PixelPoint Position { get; }
        System.Action<Avalonia.PixelPoint>? PositionChanged { get; set; }
        Avalonia.Platform.IScreenImpl Screen { get; }
        void Activate();
        void Hide();
        void SetTopmost(bool value);
        void Show(bool activate, bool isDialog);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IWindowIconImpl
    {
        void Save(System.IO.Stream outputStream);
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IWindowImpl : Avalonia.Platform.IOptionalFeatureProvider, Avalonia.Platform.ITopLevelImpl, Avalonia.Platform.IWindowBaseImpl, System.IDisposable
    {
        System.Func<Avalonia.Controls.WindowCloseReason, bool>? Closing { get; set; }
        System.Action<bool>? ExtendClientAreaToDecorationsChanged { get; set; }
        Avalonia.Thickness ExtendedMargins { get; }
        System.Action? GotInputWhenDisabled { get; set; }
        bool IsClientAreaExtendedToDecorations { get; }
        bool NeedsManagedDecorations { get; }
        Avalonia.Thickness OffScreenMargin { get; }
        Avalonia.Controls.WindowState WindowState { get; set; }
        System.Action<Avalonia.Controls.WindowState>? WindowStateChanged { get; set; }
        void BeginMoveDrag(Avalonia.Input.PointerPressedEventArgs e);
        void BeginResizeDrag(Avalonia.Controls.WindowEdge edge, Avalonia.Input.PointerPressedEventArgs e);
        void CanResize(bool value);
        void Move(Avalonia.PixelPoint point);
        void Resize(Avalonia.Size clientSize, Avalonia.Controls.WindowResizeReason reason = Avalonia.Controls.WindowResizeReason.Application);
        void SetEnabled(bool enable);
        void SetExtendClientAreaChromeHints(Avalonia.Platform.ExtendClientAreaChromeHints hints);
        void SetExtendClientAreaTitleBarHeightHint(double titleBarHeight);
        void SetExtendClientAreaToDecorationsHint(bool extendIntoClientAreaHint);
        void SetIcon(Avalonia.Platform.IWindowIconImpl? icon);
        void SetMinMaxSize(Avalonia.Size minSize, Avalonia.Size maxSize);
        void SetParent(Avalonia.Platform.IWindowImpl parent);
        void SetSystemDecorations(Avalonia.Controls.SystemDecorations enabled);
        void SetTitle(string? title);
        void ShowTaskbarIcon(bool value);
    }
    [Avalonia.Metadata.PrivateApiAttribute]
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface IWindowingPlatform
    {
        Avalonia.Platform.IWindowImpl CreateEmbeddableWindow();
        Avalonia.Platform.ITrayIconImpl? CreateTrayIcon();
        Avalonia.Platform.IWindowImpl CreateWindow();
    }
    public partial class Screen
    {
        public Screen(double scaling, Avalonia.PixelRect bounds, Avalonia.PixelRect workingArea, bool isPrimary) { }
        public Avalonia.PixelRect Bounds { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool IsPrimary { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use the Scaling property instead.")]
        public double PixelDensity { get { throw null; } }
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ObsoleteAttribute("Use the IsPrimary property instead.")]
        public bool Primary { get { throw null; } }
        public double Scaling { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.PixelRect WorkingArea { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
}
