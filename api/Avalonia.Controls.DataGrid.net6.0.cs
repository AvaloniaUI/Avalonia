//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia.Collections
{
    public sealed partial class DataGridCollectionView : System.Collections.IEnumerable, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.INotifyPropertyChanged
    {
        public DataGridCollectionView(System.Collections.IEnumerable source) { }
        public DataGridCollectionView(System.Collections.IEnumerable source, bool isDataSorted, bool isDataInGroupOrder) { }
        public bool CanAddNew { get { throw null; } }
        public bool CanCancelEdit { get { throw null; } }
        public bool CanChangePage { get { throw null; } }
        public bool CanFilter { get { throw null; } }
        public bool CanGroup { get { throw null; } }
        public bool CanRemove { get { throw null; } }
        public bool CanSort { get { throw null; } }
        public int Count { get { throw null; } }
        public System.Globalization.CultureInfo Culture { get { throw null; } set { } }
        public object CurrentAddItem { get { throw null; } }
        public object CurrentEditItem { get { throw null; } }
        public object CurrentItem { get { throw null; } }
        public int CurrentPosition { get { throw null; } }
        public System.Func<object, bool> Filter { get { throw null; } set { } }
        public Avalonia.Collections.AvaloniaList<Avalonia.Collections.DataGridGroupDescription> GroupDescriptions { get { throw null; } }
        public Avalonia.Collections.IAvaloniaReadOnlyList<object> Groups { get { throw null; } }
        public bool IsAddingNew { get { throw null; } }
        public bool IsCurrentAfterLast { get { throw null; } }
        public bool IsCurrentBeforeFirst { get { throw null; } }
        public bool IsEditingItem { get { throw null; } }
        public bool IsEmpty { get { throw null; } }
        public bool IsPageChanging { get { throw null; } }
        public object this[int index] { get { throw null; } }
        public int ItemCount { get { throw null; } }
        public bool NeedsRefresh { get { throw null; } }
        public int PageIndex { get { throw null; } }
        public int PageSize { get { throw null; } set { } }
        public Avalonia.Collections.DataGridSortDescriptionCollection SortDescriptions { get { throw null; } }
        public System.Collections.IEnumerable SourceCollection { get { throw null; } }
        public int TotalItemCount { get { throw null; } }
        public event System.Collections.Specialized.NotifyCollectionChangedEventHandler CollectionChanged { add { } remove { } }
        public event System.EventHandler CurrentChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Collections.DataGridCurrentChangingEventArgs> CurrentChanging { add { } remove { } }
        public event System.EventHandler<System.EventArgs> PageChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Collections.PageChangingEventArgs> PageChanging { add { } remove { } }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
        event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged { add { } remove { } }
        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
        public object AddNew() { throw null; }
        public void CancelEdit() { }
        public void CancelNew() { }
        public void CommitEdit() { }
        public void CommitNew() { }
        public bool Contains(object item) { throw null; }
        public System.IDisposable DeferRefresh() { throw null; }
        public void EditItem(object item) { }
        public System.Collections.IEnumerator GetEnumerator() { throw null; }
        public object GetItemAt(int index) { throw null; }
        public int IndexOf(object item) { throw null; }
        public bool MoveCurrentTo(object item) { throw null; }
        public bool MoveCurrentToFirst() { throw null; }
        public bool MoveCurrentToLast() { throw null; }
        public bool MoveCurrentToNext() { throw null; }
        public bool MoveCurrentToPosition(int position) { throw null; }
        public bool MoveCurrentToPrevious() { throw null; }
        public bool MoveToFirstPage() { throw null; }
        public bool MoveToLastPage() { throw null; }
        public bool MoveToNextPage() { throw null; }
        public bool MoveToPage(int pageIndex) { throw null; }
        public bool MoveToPreviousPage() { throw null; }
        public bool PassesFilter(object item) { throw null; }
        public void Refresh() { }
        public void Remove(object item) { }
        public void RemoveAt(int index) { }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }
    }
    public abstract partial class DataGridCollectionViewGroup : System.ComponentModel.INotifyPropertyChanged
    {
        protected DataGridCollectionViewGroup(object key) { }
        public abstract bool IsBottomLevel { get; }
        public int ItemCount { get { throw null; } }
        public Avalonia.Collections.IAvaloniaReadOnlyList<object> Items { get { throw null; } }
        public object Key { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected int ProtectedItemCount { get { throw null; } set { } }
        protected Avalonia.Collections.AvaloniaList<object> ProtectedItems { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    }
    public partial class DataGridComparerSortDescription : Avalonia.Collections.DataGridSortDescription
    {
        public DataGridComparerSortDescription(System.Collections.IComparer comparer, System.ComponentModel.ListSortDirection direction) { }
        public override System.Collections.Generic.IComparer<object> Comparer { get { throw null; } }
        public override System.ComponentModel.ListSortDirection Direction { get { throw null; } }
        public System.Collections.IComparer SourceComparer { get { throw null; } }
        public override Avalonia.Collections.DataGridSortDescription SwitchSortDirection() { throw null; }
    }
    public partial class DataGridCurrentChangingEventArgs : System.EventArgs
    {
        public DataGridCurrentChangingEventArgs() { }
        public DataGridCurrentChangingEventArgs(bool isCancelable) { }
        public bool Cancel { get { throw null; } set { } }
        public bool IsCancelable { get { throw null; } }
    }
    public abstract partial class DataGridGroupDescription : System.ComponentModel.INotifyPropertyChanged
    {
        public DataGridGroupDescription() { }
        public Avalonia.Collections.AvaloniaList<object> GroupKeys { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public virtual string PropertyName { get { throw null; } }
        protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged { add { } remove { } }
        event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged { add { } remove { } }
        public abstract object GroupKeyFromItem(object item, int level, System.Globalization.CultureInfo culture);
        public virtual bool KeysMatch(object groupKey, object itemKey) { throw null; }
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e) { }
    }
    public partial class DataGridPathGroupDescription : Avalonia.Collections.DataGridGroupDescription
    {
        public DataGridPathGroupDescription(string propertyPath) { }
        public override string PropertyName { get { throw null; } }
        public Avalonia.Data.Converters.IValueConverter ValueConverter { get { throw null; } set { } }
        public override object GroupKeyFromItem(object item, int level, System.Globalization.CultureInfo culture) { throw null; }
        public override bool KeysMatch(object groupKey, object itemKey) { throw null; }
    }
    public abstract partial class DataGridSortDescription
    {
        protected DataGridSortDescription() { }
        public abstract System.Collections.Generic.IComparer<object> Comparer { get; }
        public virtual System.ComponentModel.ListSortDirection Direction { get { throw null; } }
        public bool HasPropertyPath { get { throw null; } }
        public virtual string PropertyPath { get { throw null; } }
        public static Avalonia.Collections.DataGridSortDescription FromComparer(System.Collections.IComparer comparer, System.ComponentModel.ListSortDirection direction = System.ComponentModel.ListSortDirection.Ascending) { throw null; }
        public static Avalonia.Collections.DataGridSortDescription FromPath(string propertyPath, System.ComponentModel.ListSortDirection direction, System.Collections.IComparer comparer) { throw null; }
        public static Avalonia.Collections.DataGridSortDescription FromPath(string propertyPath, System.ComponentModel.ListSortDirection direction = System.ComponentModel.ListSortDirection.Ascending, System.Globalization.CultureInfo culture = null) { throw null; }
        public virtual System.Linq.IOrderedEnumerable<object> OrderBy(System.Collections.Generic.IEnumerable<object> seq) { throw null; }
        public virtual Avalonia.Collections.DataGridSortDescription SwitchSortDirection() { throw null; }
        public virtual System.Linq.IOrderedEnumerable<object> ThenBy(System.Linq.IOrderedEnumerable<object> seq) { throw null; }
    }
    public partial class DataGridSortDescriptionCollection : Avalonia.Collections.AvaloniaList<Avalonia.Collections.DataGridSortDescription>
    {
        public DataGridSortDescriptionCollection() { }
    }
    public sealed partial class PageChangingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public PageChangingEventArgs(int newPageIndex) { }
        public int NewPageIndex { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
}
namespace Avalonia.Controls
{
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":invalid", ":empty-rows", ":empty-columns"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_BottomRightCorner", typeof(Avalonia.Visual))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ColumnHeadersPresenter", typeof(Avalonia.Controls.Primitives.DataGridColumnHeadersPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_FrozenColumnScrollBarSpacer", typeof(Avalonia.Controls.Control))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_HorizontalScrollbar", typeof(Avalonia.Controls.Primitives.ScrollBar))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_RowsPresenter", typeof(Avalonia.Controls.Primitives.DataGridRowsPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TopLeftCornerHeader", typeof(Avalonia.Controls.ContentControl))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_TopRightCornerHeader", typeof(Avalonia.Controls.ContentControl))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_VerticalScrollbar", typeof(Avalonia.Controls.Primitives.ScrollBar))]
    public partial class DataGrid : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<bool> AreRowDetailsFrozenProperty;
        public static readonly Avalonia.StyledProperty<bool> AreRowGroupHeadersFrozenProperty;
        public static readonly Avalonia.StyledProperty<bool> AutoGenerateColumnsProperty;
        public static readonly Avalonia.StyledProperty<bool> CanUserReorderColumnsProperty;
        public static readonly Avalonia.StyledProperty<bool> CanUserResizeColumnsProperty;
        public static readonly Avalonia.StyledProperty<bool> CanUserSortColumnsProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme> CellThemeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.DataGridClipboardCopyMode> ClipboardCopyModeProperty;
        public static readonly Avalonia.StyledProperty<double> ColumnHeaderHeightProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme> ColumnHeaderThemeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.DataGridLength> ColumnWidthProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>> DropLocationIndicatorTemplateProperty;
        public static readonly Avalonia.StyledProperty<int> FrozenColumnCountProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.DataGridGridLinesVisibility> GridLinesVisibilityProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.DataGridHeadersVisibility> HeadersVisibilityProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> HorizontalGridLinesBrushProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.ScrollBarVisibility> HorizontalScrollBarVisibilityProperty;
        public static readonly Avalonia.StyledProperty<bool> IsReadOnlyProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGrid, bool> IsValidProperty;
        public static readonly Avalonia.StyledProperty<System.Collections.IEnumerable> ItemsSourceProperty;
        public static readonly Avalonia.StyledProperty<double> MaxColumnWidthProperty;
        public static readonly Avalonia.StyledProperty<double> MinColumnWidthProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> RowBackgroundProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate> RowDetailsTemplateProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.DataGridRowDetailsVisibilityMode> RowDetailsVisibilityModeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme> RowGroupThemeProperty;
        public static readonly Avalonia.StyledProperty<double> RowHeaderWidthProperty;
        public static readonly Avalonia.StyledProperty<double> RowHeightProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Styling.ControlTheme> RowThemeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGrid, int> SelectedIndexProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGrid, object> SelectedItemProperty;
        public static readonly Avalonia.Interactivity.RoutedEvent<Avalonia.Controls.SelectionChangedEventArgs> SelectionChangedEvent;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.DataGridSelectionMode> SelectionModeProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> VerticalGridLinesBrushProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Primitives.ScrollBarVisibility> VerticalScrollBarVisibilityProperty;
        public DataGrid() { }
        public bool AreRowDetailsFrozen { get { throw null; } set { } }
        public bool AreRowGroupHeadersFrozen { get { throw null; } set { } }
        public bool AutoGenerateColumns { get { throw null; } set { } }
        public bool CanUserReorderColumns { get { throw null; } set { } }
        public bool CanUserResizeColumns { get { throw null; } set { } }
        public bool CanUserSortColumns { get { throw null; } set { } }
        public Avalonia.Styling.ControlTheme CellTheme { get { throw null; } set { } }
        public Avalonia.Controls.DataGridClipboardCopyMode ClipboardCopyMode { get { throw null; } set { } }
        public double ColumnHeaderHeight { get { throw null; } set { } }
        public Avalonia.Styling.ControlTheme ColumnHeaderTheme { get { throw null; } set { } }
        public System.Collections.ObjectModel.ObservableCollection<Avalonia.Controls.DataGridColumn> Columns { get { throw null; } }
        public Avalonia.Controls.DataGridLength ColumnWidth { get { throw null; } set { } }
        public Avalonia.Controls.DataGridColumn CurrentColumn { get { throw null; } set { } }
        protected object CurrentItem { get { throw null; } }
        public Avalonia.Controls.ITemplate<Avalonia.Controls.Control> DropLocationIndicatorTemplate { get { throw null; } set { } }
        public int FrozenColumnCount { get { throw null; } set { } }
        public Avalonia.Controls.DataGridGridLinesVisibility GridLinesVisibility { get { throw null; } set { } }
        public Avalonia.Controls.DataGridHeadersVisibility HeadersVisibility { get { throw null; } set { } }
        public Avalonia.Media.IBrush HorizontalGridLinesBrush { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.ScrollBarVisibility HorizontalScrollBarVisibility { get { throw null; } set { } }
        public bool IsReadOnly { get { throw null; } set { } }
        public bool IsValid { get { throw null; } }
        public System.Collections.IEnumerable ItemsSource { get { throw null; } set { } }
        public double MaxColumnWidth { get { throw null; } set { } }
        public double MinColumnWidth { get { throw null; } set { } }
        public Avalonia.Media.IBrush RowBackground { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate RowDetailsTemplate { get { throw null; } set { } }
        public Avalonia.Controls.DataGridRowDetailsVisibilityMode RowDetailsVisibilityMode { get { throw null; } set { } }
        public Avalonia.Styling.ControlTheme RowGroupTheme { get { throw null; } set { } }
        public double RowHeaderWidth { get { throw null; } set { } }
        public double RowHeight { get { throw null; } set { } }
        public Avalonia.Styling.ControlTheme RowTheme { get { throw null; } set { } }
        public int SelectedIndex { get { throw null; } set { } }
        public object SelectedItem { get { throw null; } set { } }
        public System.Collections.IList SelectedItems { get { throw null; } }
        public Avalonia.Controls.DataGridSelectionMode SelectionMode { get { throw null; } set { } }
        public Avalonia.Media.IBrush VerticalGridLinesBrush { get { throw null; } set { } }
        public Avalonia.Controls.Primitives.ScrollBarVisibility VerticalScrollBarVisibility { get { throw null; } set { } }
        public event System.EventHandler<Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs> AutoGeneratingColumn { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridBeginningEditEventArgs> BeginningEdit { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridCellEditEndedEventArgs> CellEditEnded { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridCellEditEndingEventArgs> CellEditEnding { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridCellPointerPressedEventArgs> CellPointerPressed { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs> ColumnDisplayIndexChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs> ColumnReordered { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridColumnReorderingEventArgs> ColumnReordering { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowClipboardEventArgs> CopyingRowClipboardContent { add { } remove { } }
        public event System.EventHandler<System.EventArgs> CurrentCellChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.Primitives.ScrollEventArgs> HorizontalScroll { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowEventArgs> LoadingRow { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs> LoadingRowDetails { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowGroupHeaderEventArgs> LoadingRowGroup { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridPreparingCellForEditEventArgs> PreparingCellForEdit { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs> RowDetailsVisibilityChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowEditEndedEventArgs> RowEditEnded { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowEditEndingEventArgs> RowEditEnding { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs> SelectionChanged { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs> Sorting { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowEventArgs> UnloadingRow { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs> UnloadingRowDetails { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.DataGridRowGroupHeaderEventArgs> UnloadingRowGroup { add { } remove { } }
        public event System.EventHandler<Avalonia.Controls.Primitives.ScrollEventArgs> VerticalScroll { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        public bool BeginEdit() { throw null; }
        public bool BeginEdit(Avalonia.Interactivity.RoutedEventArgs editingEventArgs) { throw null; }
        public bool CancelEdit() { throw null; }
        public bool CancelEdit(Avalonia.Controls.DataGridEditingUnit editingUnit) { throw null; }
        public void CollapseRowGroup(Avalonia.Collections.DataGridCollectionViewGroup collectionViewGroup, bool collapseAllSubgroups) { }
        public bool CommitEdit() { throw null; }
        public bool CommitEdit(Avalonia.Controls.DataGridEditingUnit editingUnit, bool exitEditingMode) { throw null; }
        public void ExpandRowGroup(Avalonia.Collections.DataGridCollectionViewGroup collectionViewGroup, bool expandAllSubgroups) { }
        public Avalonia.Collections.DataGridCollectionViewGroup GetGroupFromItem(object item, int groupLevel) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnAttachedToVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected virtual void OnAutoGeneratingColumn(Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs e) { }
        protected virtual void OnBeginningEdit(Avalonia.Controls.DataGridBeginningEditEventArgs e) { }
        protected virtual void OnCellEditEnded(Avalonia.Controls.DataGridCellEditEndedEventArgs e) { }
        protected virtual void OnCellEditEnding(Avalonia.Controls.DataGridCellEditEndingEventArgs e) { }
        protected virtual void OnColumnDisplayIndexChanged(Avalonia.Controls.DataGridColumnEventArgs e) { }
        protected internal virtual void OnColumnReordered(Avalonia.Controls.DataGridColumnEventArgs e) { }
        protected internal virtual void OnColumnReordering(Avalonia.Controls.DataGridColumnReorderingEventArgs e) { }
        protected internal virtual void OnColumnSorting(Avalonia.Controls.DataGridColumnEventArgs e) { }
        protected virtual void OnCopyingRowClipboardContent(Avalonia.Controls.DataGridRowClipboardEventArgs e) { }
        protected virtual void OnCurrentCellChanged(System.EventArgs e) { }
        protected override void OnDataContextBeginUpdate() { }
        protected override void OnDataContextEndUpdate() { }
        protected override void OnDetachedFromVisualTree(Avalonia.VisualTreeAttachmentEventArgs e) { }
        protected virtual void OnLoadingRow(Avalonia.Controls.DataGridRowEventArgs e) { }
        protected virtual void OnLoadingRowDetails(Avalonia.Controls.DataGridRowDetailsEventArgs e) { }
        protected virtual void OnLoadingRowGroup(Avalonia.Controls.DataGridRowGroupHeaderEventArgs e) { }
        protected override void OnPointerWheelChanged(Avalonia.Input.PointerWheelEventArgs e) { }
        protected virtual void OnPreparingCellForEdit(Avalonia.Controls.DataGridPreparingCellForEditEventArgs e) { }
        protected internal virtual void OnRowDetailsVisibilityChanged(Avalonia.Controls.DataGridRowDetailsEventArgs e) { }
        protected virtual void OnRowEditEnded(Avalonia.Controls.DataGridRowEditEndedEventArgs e) { }
        protected virtual void OnRowEditEnding(Avalonia.Controls.DataGridRowEditEndingEventArgs e) { }
        protected virtual void OnSelectionChanged(Avalonia.Controls.SelectionChangedEventArgs e) { }
        protected virtual void OnUnloadingRow(Avalonia.Controls.DataGridRowEventArgs e) { }
        protected virtual void OnUnloadingRowDetails(Avalonia.Controls.DataGridRowDetailsEventArgs e) { }
        protected virtual void OnUnloadingRowGroup(Avalonia.Controls.DataGridRowGroupHeaderEventArgs e) { }
        public void ScrollIntoView(object item, Avalonia.Controls.DataGridColumn column) { }
        public void SelectAll() { }
        public partial class DisplayIndexComparer : System.Collections.Generic.IComparer<Avalonia.Controls.DataGridColumn>
        {
            public DisplayIndexComparer() { }
            int System.Collections.Generic.IComparer<Avalonia.Controls.DataGridColumn>.Compare(Avalonia.Controls.DataGridColumn x, Avalonia.Controls.DataGridColumn y) { throw null; }
        }
    }
    public partial class DataGridAutoGeneratingColumnEventArgs : System.ComponentModel.CancelEventArgs
    {
        public DataGridAutoGeneratingColumnEventArgs(string propertyName, System.Type propertyType, Avalonia.Controls.DataGridColumn column) { }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public string PropertyName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.Type PropertyType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class DataGridBeginningEditEventArgs : System.ComponentModel.CancelEventArgs
    {
        public DataGridBeginningEditEventArgs(Avalonia.Controls.DataGridColumn column, Avalonia.Controls.DataGridRow row, Avalonia.Interactivity.RoutedEventArgs editingEventArgs) { }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Interactivity.RoutedEventArgs EditingEventArgs { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public abstract partial class DataGridBoundColumn : Avalonia.Controls.DataGridColumn
    {
        protected DataGridBoundColumn() { }
        [Avalonia.Data.AssignBindingAttribute]
        [Avalonia.Metadata.InheritDataTypeFromItemsAttribute("ItemsSource", AncestorType=typeof(Avalonia.Controls.DataGrid))]
        public virtual Avalonia.Data.IBinding Binding { get { throw null; } set { } }
        protected Avalonia.AvaloniaProperty BindingTarget { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public override Avalonia.Data.IBinding ClipboardContentBinding { get { throw null; } set { } }
        protected sealed override Avalonia.Controls.Control GenerateEditingElement(Avalonia.Controls.DataGridCell cell, object dataItem, out Avalonia.Controls.Utils.ICellEditBinding editBinding) { throw null; }
        protected abstract Avalonia.Controls.Control GenerateEditingElementDirect(Avalonia.Controls.DataGridCell cell, object dataItem);
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":selected", ":current", ":edited", ":invalid", ":focus"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_RightGridLine", typeof(Avalonia.Controls.Shapes.Rectangle))]
    public partial class DataGridCell : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGridCell, bool> IsValidProperty;
        public DataGridCell() { }
        public bool IsValid { get { throw null; } }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerExited(Avalonia.Input.PointerEventArgs e) { }
    }
    public partial class DataGridCellEditEndedEventArgs : System.EventArgs
    {
        public DataGridCellEditEndedEventArgs(Avalonia.Controls.DataGridColumn column, Avalonia.Controls.DataGridRow row, Avalonia.Controls.DataGridEditAction editAction) { }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridEditAction EditAction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class DataGridCellEditEndingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public DataGridCellEditEndingEventArgs(Avalonia.Controls.DataGridColumn column, Avalonia.Controls.DataGridRow row, Avalonia.Controls.Control editingElement, Avalonia.Controls.DataGridEditAction editAction) { }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridEditAction EditAction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Control EditingElement { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class DataGridCellPointerPressedEventArgs : System.EventArgs
    {
        public DataGridCellPointerPressedEventArgs(Avalonia.Controls.DataGridCell cell, Avalonia.Controls.DataGridRow row, Avalonia.Controls.DataGridColumn column, Avalonia.Input.PointerPressedEventArgs e) { }
        public Avalonia.Controls.DataGridCell Cell { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Input.PointerPressedEventArgs PointerPressedEventArgs { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class DataGridCheckBoxColumn : Avalonia.Controls.DataGridBoundColumn
    {
        public static readonly Avalonia.StyledProperty<bool> IsThreeStateProperty;
        public DataGridCheckBoxColumn() { }
        public bool IsThreeState { get { throw null; } set { } }
        protected override void CancelCellEdit(Avalonia.Controls.Control editingElement, object uneditedValue) { }
        protected override Avalonia.Controls.Control GenerateEditingElementDirect(Avalonia.Controls.DataGridCell cell, object dataItem) { throw null; }
        protected override Avalonia.Controls.Control GenerateElement(Avalonia.Controls.DataGridCell cell, object dataItem) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override object PrepareCellForEdit(Avalonia.Controls.Control editingElement, Avalonia.Interactivity.RoutedEventArgs editingEventArgs) { throw null; }
        protected internal override void RefreshCellContent(Avalonia.Controls.Control element, string propertyName) { }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct DataGridClipboardCellContent
    {
        private object _dummy;
        private int _dummyPrimitive;
        public DataGridClipboardCellContent(object item, Avalonia.Controls.DataGridColumn column, object content) { throw null; }
        public Avalonia.Controls.DataGridColumn Column { get { throw null; } }
        public object Content { get { throw null; } }
        public object Item { get { throw null; } }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Avalonia.Controls.DataGridClipboardCellContent clipboardCellContent1, Avalonia.Controls.DataGridClipboardCellContent clipboardCellContent2) { throw null; }
        public static bool operator !=(Avalonia.Controls.DataGridClipboardCellContent clipboardCellContent1, Avalonia.Controls.DataGridClipboardCellContent clipboardCellContent2) { throw null; }
    }
    public enum DataGridClipboardCopyMode
    {
        None = 0,
        ExcludeHeader = 1,
        IncludeHeader = 2,
    }
    public abstract partial class DataGridColumn : Avalonia.AvaloniaObject
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGridColumn, Avalonia.Styling.ControlTheme> CellThemeProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGridColumn, object> HeaderProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGridColumn, Avalonia.Controls.Templates.IDataTemplate> HeaderTemplateProperty;
        public static readonly Avalonia.StyledProperty<bool> IsVisibleProperty;
        protected internal DataGridColumn() { }
        public double ActualWidth { get { throw null; } }
        public bool CanUserReorder { get { throw null; } set { } }
        public bool CanUserResize { get { throw null; } set { } }
        public bool CanUserSort { get { throw null; } set { } }
        public Avalonia.Controls.Classes CellStyleClasses { get { throw null; } set { } }
        public Avalonia.Styling.ControlTheme CellTheme { get { throw null; } set { } }
        public virtual Avalonia.Data.IBinding ClipboardContentBinding { get { throw null; } set { } }
        public System.Collections.IComparer CustomSortComparer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public int DisplayIndex { get { throw null; } set { } }
        public object Header { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate HeaderTemplate { get { throw null; } set { } }
        public bool IsAutoGenerated { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public bool IsFrozen { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public virtual bool IsReadOnly { get { throw null; } set { } }
        public bool IsVisible { get { throw null; } set { } }
        public double MaxWidth { get { throw null; } set { } }
        public double MinWidth { get { throw null; } set { } }
        protected internal Avalonia.Controls.DataGrid OwningGrid { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string SortMemberPath { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.DataGridLength Width { get { throw null; } set { } }
        protected virtual void CancelCellEdit(Avalonia.Controls.Control editingElement, object uneditedValue) { }
        public void ClearSort() { }
        protected virtual void EndCellEdit() { }
        protected abstract Avalonia.Controls.Control GenerateEditingElement(Avalonia.Controls.DataGridCell cell, object dataItem, out Avalonia.Controls.Utils.ICellEditBinding binding);
        protected abstract Avalonia.Controls.Control GenerateElement(Avalonia.Controls.DataGridCell cell, object dataItem);
        public Avalonia.Controls.Control GetCellContent(Avalonia.Controls.DataGridRow dataGridRow) { throw null; }
        public Avalonia.Controls.Control GetCellContent(object dataItem) { throw null; }
        public static Avalonia.Controls.DataGridColumn GetColumnContainingElement(Avalonia.Controls.Control element) { throw null; }
        protected void NotifyPropertyChanged(string propertyName) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected abstract object PrepareCellForEdit(Avalonia.Controls.Control editingElement, Avalonia.Interactivity.RoutedEventArgs editingEventArgs);
        protected internal virtual void RefreshCellContent(Avalonia.Controls.Control element, string propertyName) { }
        public void Sort() { }
        public void Sort(System.ComponentModel.ListSortDirection direction) { }
    }
    public partial class DataGridColumnEventArgs : System.ComponentModel.HandledEventArgs
    {
        public DataGridColumnEventArgs(Avalonia.Controls.DataGridColumn column) { }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":dragIndicator", ":pressed", ":sortascending", ":sortdescending"})]
    public partial class DataGridColumnHeader : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.StyledProperty<bool> AreSeparatorsVisibleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> SeparatorBrushProperty;
        public DataGridColumnHeader() { }
        public bool AreSeparatorsVisible { get { throw null; } set { } }
        public Avalonia.Media.IBrush SeparatorBrush { get { throw null; } set { } }
    }
    public partial class DataGridColumnReorderingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public DataGridColumnReorderingEventArgs(Avalonia.Controls.DataGridColumn dataGridColumn) { }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Control DragIndicator { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public Avalonia.Controls.Control DropLocationIndicator { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
    public enum DataGridEditAction
    {
        Cancel = 0,
        Commit = 1,
    }
    public enum DataGridEditingUnit
    {
        Cell = 0,
        Row = 1,
    }
    [System.FlagsAttribute]
    public enum DataGridGridLinesVisibility
    {
        None = 0,
        Horizontal = 1,
        Vertical = 2,
        All = 3,
    }
    [System.FlagsAttribute]
    public enum DataGridHeadersVisibility
    {
        None = 0,
        Column = 1,
        Row = 2,
        All = 3,
    }
    [System.ComponentModel.TypeConverterAttribute(typeof(Avalonia.Controls.DataGridLengthConverter))]
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct DataGridLength : System.IEquatable<Avalonia.Controls.DataGridLength>
    {
        private int _dummyPrimitive;
        public DataGridLength(double value) { throw null; }
        public DataGridLength(double value, Avalonia.Controls.DataGridLengthUnitType type) { throw null; }
        public DataGridLength(double value, Avalonia.Controls.DataGridLengthUnitType type, double desiredValue, double displayValue) { throw null; }
        public static Avalonia.Controls.DataGridLength Auto { get { throw null; } }
        public double DesiredValue { get { throw null; } }
        public double DisplayValue { get { throw null; } }
        public bool IsAbsolute { get { throw null; } }
        public bool IsAuto { get { throw null; } }
        public bool IsSizeToCells { get { throw null; } }
        public bool IsSizeToHeader { get { throw null; } }
        public bool IsStar { get { throw null; } }
        public static Avalonia.Controls.DataGridLength SizeToCells { get { throw null; } }
        public static Avalonia.Controls.DataGridLength SizeToHeader { get { throw null; } }
        public Avalonia.Controls.DataGridLengthUnitType UnitType { get { throw null; } }
        public double Value { get { throw null; } }
        public bool Equals(Avalonia.Controls.DataGridLength other) { throw null; }
        public override bool Equals(object obj) { throw null; }
        public override int GetHashCode() { throw null; }
        public static bool operator ==(Avalonia.Controls.DataGridLength gl1, Avalonia.Controls.DataGridLength gl2) { throw null; }
        public static bool operator !=(Avalonia.Controls.DataGridLength gl1, Avalonia.Controls.DataGridLength gl2) { throw null; }
    }
    public partial class DataGridLengthConverter : System.ComponentModel.TypeConverter
    {
        public DataGridLengthConverter() { }
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType) { throw null; }
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) { throw null; }
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) { throw null; }
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) { throw null; }
    }
    public enum DataGridLengthUnitType
    {
        Auto = 0,
        Pixel = 1,
        SizeToCells = 2,
        SizeToHeader = 3,
        Star = 4,
    }
    public partial class DataGridPreparingCellForEditEventArgs : System.EventArgs
    {
        public DataGridPreparingCellForEditEventArgs(Avalonia.Controls.DataGridColumn column, Avalonia.Controls.DataGridRow row, Avalonia.Interactivity.RoutedEventArgs editingEventArgs, Avalonia.Controls.Control editingElement) { }
        public Avalonia.Controls.DataGridColumn Column { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.Control EditingElement { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Interactivity.RoutedEventArgs EditingEventArgs { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":selected", ":editing", ":invalid"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_BottomGridLine", typeof(Avalonia.Controls.Shapes.Rectangle))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_CellsPresenter", typeof(Avalonia.Controls.Primitives.DataGridCellsPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_DetailsPresenter", typeof(Avalonia.Controls.Primitives.DataGridDetailsPresenter))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Root", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_RowHeader", typeof(Avalonia.Controls.Primitives.DataGridRowHeader))]
    public partial class DataGridRow : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<bool> AreDetailsVisibleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Controls.Templates.IDataTemplate> DetailsTemplateProperty;
        public static readonly Avalonia.StyledProperty<object> HeaderProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGridRow, bool> IsValidProperty;
        public DataGridRow() { }
        public bool AreDetailsVisible { get { throw null; } set { } }
        public Avalonia.Controls.Templates.IDataTemplate DetailsTemplate { get { throw null; } set { } }
        public object Header { get { throw null; } set { } }
        public bool IsValid { get { throw null; } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        public int GetIndex() { throw null; }
        public static Avalonia.Controls.DataGridRow GetRowContainingElement(Avalonia.Controls.Control element) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerExited(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
    }
    public partial class DataGridRowClipboardEventArgs : System.EventArgs
    {
        internal DataGridRowClipboardEventArgs() { }
        public System.Collections.Generic.List<Avalonia.Controls.DataGridClipboardCellContent> ClipboardRowContent { get { throw null; } }
        public bool IsColumnHeadersRow { get { throw null; } }
        public object Item { get { throw null; } }
    }
    public partial class DataGridRowDetailsEventArgs : System.EventArgs
    {
        public DataGridRowDetailsEventArgs(Avalonia.Controls.DataGridRow row, Avalonia.Controls.Control detailsElement) { }
        public Avalonia.Controls.Control DetailsElement { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum DataGridRowDetailsVisibilityMode
    {
        VisibleWhenSelected = 0,
        Visible = 1,
        Collapsed = 2,
    }
    public partial class DataGridRowEditEndedEventArgs : System.EventArgs
    {
        public DataGridRowEditEndedEventArgs(Avalonia.Controls.DataGridRow row, Avalonia.Controls.DataGridEditAction editAction) { }
        public Avalonia.Controls.DataGridEditAction EditAction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class DataGridRowEditEndingEventArgs : System.ComponentModel.CancelEventArgs
    {
        public DataGridRowEditEndingEventArgs(Avalonia.Controls.DataGridRow row, Avalonia.Controls.DataGridEditAction editAction) { }
        public Avalonia.Controls.DataGridEditAction EditAction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public partial class DataGridRowEventArgs : System.EventArgs
    {
        public DataGridRowEventArgs(Avalonia.Controls.DataGridRow dataGridRow) { }
        public Avalonia.Controls.DataGridRow Row { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":pressed", ":current", ":expanded"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ExpanderButton", typeof(Avalonia.Controls.Primitives.ToggleButton))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_IndentSpacer", typeof(Avalonia.Controls.Control))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_ItemCountElement", typeof(Avalonia.Controls.TextBlock))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_PropertyNameElement", typeof(Avalonia.Controls.TextBlock))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Root", typeof(Avalonia.Controls.Panel))]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_RowHeader", typeof(Avalonia.Controls.Primitives.DataGridRowHeader))]
    public partial class DataGridRowGroupHeader : Avalonia.Controls.Primitives.TemplatedControl
    {
        public static readonly Avalonia.StyledProperty<bool> IsItemCountVisibleProperty;
        public static readonly Avalonia.StyledProperty<bool> IsPropertyNameVisibleProperty;
        public static readonly Avalonia.StyledProperty<string> PropertyNameProperty;
        public static readonly Avalonia.StyledProperty<double> SublevelIndentProperty;
        public DataGridRowGroupHeader() { }
        public bool IsItemCountVisible { get { throw null; } set { } }
        public bool IsPropertyNameVisible { get { throw null; } set { } }
        public string PropertyName { get { throw null; } set { } }
        public double SublevelIndent { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerExited(Avalonia.Input.PointerEventArgs e) { }
    }
    public partial class DataGridRowGroupHeaderEventArgs : System.EventArgs
    {
        public DataGridRowGroupHeaderEventArgs(Avalonia.Controls.DataGridRowGroupHeader rowGroupHeader) { }
        public Avalonia.Controls.DataGridRowGroupHeader RowGroupHeader { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
    }
    public enum DataGridSelectionMode
    {
        Extended = 0,
        Single = 1,
    }
    public partial class DataGridTemplateColumn : Avalonia.Controls.DataGridColumn
    {
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGridTemplateColumn, Avalonia.Controls.Templates.IDataTemplate> CellEditingTemplateProperty;
        public static readonly Avalonia.DirectProperty<Avalonia.Controls.DataGridTemplateColumn, Avalonia.Controls.Templates.IDataTemplate> CellTemplateProperty;
        public DataGridTemplateColumn() { }
        [Avalonia.Metadata.InheritDataTypeFromItemsAttribute("ItemsSource", AncestorType=typeof(Avalonia.Controls.DataGrid))]
        public Avalonia.Controls.Templates.IDataTemplate CellEditingTemplate { get { throw null; } set { } }
        [Avalonia.Metadata.ContentAttribute]
        [Avalonia.Metadata.InheritDataTypeFromItemsAttribute("ItemsSource", AncestorType=typeof(Avalonia.Controls.DataGrid))]
        public Avalonia.Controls.Templates.IDataTemplate CellTemplate { get { throw null; } set { } }
        public override bool IsReadOnly { get { throw null; } set { } }
        protected override void EndCellEdit() { }
        protected override Avalonia.Controls.Control GenerateEditingElement(Avalonia.Controls.DataGridCell cell, object dataItem, out Avalonia.Controls.Utils.ICellEditBinding binding) { throw null; }
        protected override Avalonia.Controls.Control GenerateElement(Avalonia.Controls.DataGridCell cell, object dataItem) { throw null; }
        protected override object PrepareCellForEdit(Avalonia.Controls.Control editingElement, Avalonia.Interactivity.RoutedEventArgs editingEventArgs) { throw null; }
        protected internal override void RefreshCellContent(Avalonia.Controls.Control element, string propertyName) { }
    }
    public partial class DataGridTextColumn : Avalonia.Controls.DataGridBoundColumn
    {
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontFamily> FontFamilyProperty;
        public static readonly Avalonia.AttachedProperty<double> FontSizeProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontStretch> FontStretchProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontStyle> FontStyleProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.FontWeight> FontWeightProperty;
        public static readonly Avalonia.AttachedProperty<Avalonia.Media.IBrush> ForegroundProperty;
        public DataGridTextColumn() { }
        public Avalonia.Media.FontFamily FontFamily { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(0.0 / 0.0)]
        public double FontSize { get { throw null; } set { } }
        public Avalonia.Media.FontStretch FontStretch { get { throw null; } set { } }
        public Avalonia.Media.FontStyle FontStyle { get { throw null; } set { } }
        public Avalonia.Media.FontWeight FontWeight { get { throw null; } set { } }
        public Avalonia.Media.IBrush Foreground { get { throw null; } set { } }
        protected override void CancelCellEdit(Avalonia.Controls.Control editingElement, object uneditedValue) { }
        protected override Avalonia.Controls.Control GenerateEditingElementDirect(Avalonia.Controls.DataGridCell cell, object dataItem) { throw null; }
        protected override Avalonia.Controls.Control GenerateElement(Avalonia.Controls.DataGridCell cell, object dataItem) { throw null; }
        protected override void OnPropertyChanged(Avalonia.AvaloniaPropertyChangedEventArgs change) { }
        protected override object PrepareCellForEdit(Avalonia.Controls.Control editingElement, Avalonia.Interactivity.RoutedEventArgs editingEventArgs) { throw null; }
        protected internal override void RefreshCellContent(Avalonia.Controls.Control element, string propertyName) { }
    }
}
namespace Avalonia.Controls.Primitives
{
    public sealed partial class DataGridCellsPresenter : Avalonia.Controls.Panel, Avalonia.LogicalTree.IChildIndexProvider
    {
        public DataGridCellsPresenter() { }
        event System.EventHandler<Avalonia.LogicalTree.ChildIndexChangedEventArgs> Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(Avalonia.LogicalTree.ILogical child) { throw null; }
        bool Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(out int count) { throw null; }
        protected override void ChildrenChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public sealed partial class DataGridColumnHeadersPresenter : Avalonia.Controls.Panel, Avalonia.LogicalTree.IChildIndexProvider
    {
        public DataGridColumnHeadersPresenter() { }
        event System.EventHandler<Avalonia.LogicalTree.ChildIndexChangedEventArgs> Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(Avalonia.LogicalTree.ILogical child) { throw null; }
        bool Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(out int count) { throw null; }
        protected override void ChildrenChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public sealed partial class DataGridDetailsPresenter : Avalonia.Controls.Panel
    {
        public static readonly Avalonia.StyledProperty<double> ContentHeightProperty;
        public DataGridDetailsPresenter() { }
        public double ContentHeight { get { throw null; } set { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
    public partial class DataGridFrozenGrid : Avalonia.Controls.Grid
    {
        public static readonly Avalonia.StyledProperty<bool> IsFrozenProperty;
        public DataGridFrozenGrid() { }
        public static bool GetIsFrozen(Avalonia.Controls.Control element) { throw null; }
        public static void SetIsFrozen(Avalonia.Controls.Control element, bool value) { }
    }
    [Avalonia.Controls.Metadata.PseudoClassesAttribute(new string[]{ ":invalid", ":selected", ":editing", ":current"})]
    [Avalonia.Controls.Metadata.TemplatePartAttribute("PART_Root", typeof(Avalonia.Controls.Control))]
    public partial class DataGridRowHeader : Avalonia.Controls.ContentControl
    {
        public static readonly Avalonia.StyledProperty<bool> AreSeparatorsVisibleProperty;
        public static readonly Avalonia.StyledProperty<Avalonia.Media.IBrush> SeparatorBrushProperty;
        public DataGridRowHeader() { }
        public bool AreSeparatorsVisible { get { throw null; } set { } }
        public Avalonia.Media.IBrush SeparatorBrush { get { throw null; } set { } }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
        protected override void OnApplyTemplate(Avalonia.Controls.Primitives.TemplateAppliedEventArgs e) { }
        protected override void OnPointerEntered(Avalonia.Input.PointerEventArgs e) { }
        protected override void OnPointerExited(Avalonia.Input.PointerEventArgs e) { }
    }
    public sealed partial class DataGridRowsPresenter : Avalonia.Controls.Panel, Avalonia.LogicalTree.IChildIndexProvider
    {
        public DataGridRowsPresenter() { }
        event System.EventHandler<Avalonia.LogicalTree.ChildIndexChangedEventArgs> Avalonia.LogicalTree.IChildIndexProvider.ChildIndexChanged { add { } remove { } }
        protected override Avalonia.Size ArrangeOverride(Avalonia.Size finalSize) { throw null; }
        int Avalonia.LogicalTree.IChildIndexProvider.GetChildIndex(Avalonia.LogicalTree.ILogical child) { throw null; }
        bool Avalonia.LogicalTree.IChildIndexProvider.TryGetTotalCount(out int count) { throw null; }
        protected override Avalonia.Size MeasureOverride(Avalonia.Size availableSize) { throw null; }
    }
}
namespace Avalonia.Controls.Utils
{
    public partial interface ICellEditBinding
    {
        bool IsValid { get; }
        System.IObservable<bool> ValidationChanged { get; }
        System.Collections.Generic.IEnumerable<System.Exception> ValidationErrors { get; }
        bool CommitEdit();
    }
}
namespace CompiledAvaloniaXaml
{
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class !AvaloniaResources
    {
        internal !AvaloniaResources() { }
        public static Avalonia.Styling.Styles Build:/Themes/Fluent.xaml(System.IServiceProvider ) { throw null; }
        public static Avalonia.Styling.Styles Build:/Themes/Simple.xaml(System.IServiceProvider ) { throw null; }
        public static void Populate:/Themes/Fluent.xaml(System.IServiceProvider , Avalonia.Styling.Styles ) { }
        public static void Populate:/Themes/Simple.xaml(System.IServiceProvider , Avalonia.Styling.Styles ) { }
        public partial class NamespaceInfo:/Themes/Fluent.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Fluent.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
        public partial class NamespaceInfo:/Themes/Simple.xaml : Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider
        {
            public static Avalonia.Markup.Xaml.XamlIl.Runtime.IAvaloniaXamlIlXmlNamespaceInfoProvider Singleton;
            public NamespaceInfo:/Themes/Simple.xaml() { }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> XmlNamespaces { get { throw null; } }
            public virtual System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyList<Avalonia.Markup.Xaml.XamlIl.Runtime.AvaloniaXamlIlXmlNamespaceInfo>> get_XmlNamespaces() { throw null; }
        }
    }
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    public partial class !XamlLoader
    {
        internal !XamlLoader() { }
        public static object TryLoad(System.IServiceProvider , string ) { throw null; }
        public static object TryLoad(string ) { throw null; }
    }
}
