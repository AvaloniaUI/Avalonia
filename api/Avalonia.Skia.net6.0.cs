//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 7.0.8.6004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Avalonia
{
    public static partial class SkiaApplicationExtensions
    {
        public static Avalonia.AppBuilder UseSkia(this Avalonia.AppBuilder builder) { throw null; }
    }
    public partial class SkiaOptions
    {
        public SkiaOptions() { }
        public long? MaxGpuResourceSizeBytes { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        public bool UseOpacitySaveLayer { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
    }
}
namespace Avalonia.Skia
{
    public partial interface ISkiaGpu : Avalonia.Platform.IOptionalFeatureProvider, Avalonia.Platform.IPlatformGraphicsContext, System.IDisposable
    {
        Avalonia.Skia.ISkiaGpuRenderTarget? TryCreateRenderTarget(System.Collections.Generic.IEnumerable<object> surfaces);
        Avalonia.Skia.ISkiaSurface? TryCreateSurface(Avalonia.PixelSize size, Avalonia.Skia.ISkiaGpuRenderSession? session);
    }
    public partial interface ISkiaGpuRenderSession : System.IDisposable
    {
        SkiaSharp.GRContext GrContext { get; }
        double ScaleFactor { get; }
        SkiaSharp.SKSurface SkSurface { get; }
        SkiaSharp.GRSurfaceOrigin SurfaceOrigin { get; }
    }
    public partial interface ISkiaGpuRenderTarget : System.IDisposable
    {
        bool IsCorrupted { get; }
        Avalonia.Skia.ISkiaGpuRenderSession BeginRenderingSession();
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ISkiaSharpApiLease : System.IDisposable
    {
        double CurrentOpacity { get; }
        SkiaSharp.GRContext? GrContext { get; }
        SkiaSharp.SKCanvas SkCanvas { get; }
        SkiaSharp.SKSurface? SkSurface { get; }
    }
    [Avalonia.Metadata.UnstableAttribute]
    public partial interface ISkiaSharpApiLeaseFeature
    {
        Avalonia.Skia.ISkiaSharpApiLease Lease();
    }
    public partial interface ISkiaSurface : System.IDisposable
    {
        bool CanBlit { get; }
        SkiaSharp.SKSurface Surface { get; }
        void Blit(SkiaSharp.SKCanvas canvas);
    }
    public static partial class SkiaPlatform
    {
        public static Avalonia.Vector DefaultDpi { get { throw null; } }
        public static void Initialize() { }
        public static void Initialize(Avalonia.SkiaOptions options) { }
    }
    public static partial class SkiaSharpExtensions
    {
        [return: System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute("src")]
        public static SkiaSharp.SKPath? Clone(this SkiaSharp.SKPath? src) { throw null; }
        public static Avalonia.Platform.AlphaFormat ToAlphaFormat(this SkiaSharp.SKAlphaType fmt) { throw null; }
        public static Avalonia.Platform.PixelFormat? ToAvalonia(this SkiaSharp.SKColorType colorType) { throw null; }
        public static Avalonia.Media.FontStyle ToAvalonia(this SkiaSharp.SKFontStyleSlant slant) { throw null; }
        public static Avalonia.Media.TextAlignment ToAvalonia(this SkiaSharp.SKTextAlign a) { throw null; }
        public static Avalonia.Rect ToAvaloniaRect(this SkiaSharp.SKRect r) { throw null; }
        public static Avalonia.Platform.PixelFormat ToPixelFormat(this SkiaSharp.SKColorType fmt) { throw null; }
        public static SkiaSharp.SKAlphaType ToSkAlphaType(this Avalonia.Platform.AlphaFormat fmt) { throw null; }
        public static SkiaSharp.SKBlendMode ToSKBlendMode(this Avalonia.Media.Imaging.BitmapBlendingMode blendingMode) { throw null; }
        public static SkiaSharp.SKColor ToSKColor(this Avalonia.Media.Color c) { throw null; }
        public static SkiaSharp.SKColorType ToSkColorType(this Avalonia.Platform.PixelFormat fmt) { throw null; }
        public static SkiaSharp.SKFilterQuality ToSKFilterQuality(this Avalonia.Media.Imaging.BitmapInterpolationMode interpolationMode) { throw null; }
        public static SkiaSharp.SKMatrix ToSKMatrix(this Avalonia.Matrix m) { throw null; }
        public static SkiaSharp.SKPoint ToSKPoint(this Avalonia.Point p) { throw null; }
        public static SkiaSharp.SKPoint ToSKPoint(this Avalonia.Vector p) { throw null; }
        public static SkiaSharp.SKRect ToSKRect(this Avalonia.Rect r) { throw null; }
        public static SkiaSharp.SKRoundRect ToSKRoundRect(this Avalonia.RoundedRect r) { throw null; }
        public static SkiaSharp.SKShaderTileMode ToSKShaderTileMode(this Avalonia.Media.GradientSpreadMethod m) { throw null; }
        public static SkiaSharp.SKTextAlign ToSKTextAlign(this Avalonia.Media.TextAlignment a) { throw null; }
    }
}
namespace Avalonia.Skia.Helpers
{
    public static partial class DrawingContextHelper
    {
        public static Avalonia.Platform.IDrawingContextImpl WrapSkiaCanvas(SkiaSharp.SKCanvas canvas, Avalonia.Vector dpi) { throw null; }
    }
    public static partial class ImageSavingHelper
    {
        public static void SaveImage(SkiaSharp.SKImage image, System.IO.Stream stream, int? quality = default(int?)) { }
        public static void SaveImage(SkiaSharp.SKImage image, string fileName, int? quality = default(int?)) { }
    }
    public static partial class PixelFormatHelper
    {
        public static SkiaSharp.SKColorType ResolveColorType(Avalonia.Platform.PixelFormat? format) { throw null; }
    }
}
