//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Notice: Use of the service proxies that accompany this notice is subject to
//            the terms and conditions of the license agreement located at
//            http://go.microsoft.com/fwlink/?LinkID=202740
//            If you do not agree to these terms you may not use this content.

namespace BingSearchApp.Bing {
    using System;
    using System.Data.Services.Client;

    public partial class BingSearchContainer : System.Data.Services.Client.DataServiceContext {
        
        public BingSearchContainer(Uri serviceRoot) : 
                base(serviceRoot) {
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Sources">Bing search sources Sample Values : web+image+video+news+spell</param>
        /// <param name="Query">Bing search query Sample Values : xbox</param>
        /// <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
        /// <param name="WebSearchOptions">Specify options for a request to the Web SourceType. Valid values are: DisableHostCollapsing, DisableQueryAlterations. Sample Values : DisableQueryAlterations</param>
        /// <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
        /// <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
        /// <param name="Latitude">Latitude Sample Values : 47.603450</param>
        /// <param name="Longitude">Longitude Sample Values : -122.329696</param>
        /// <param name="WebFileType">File extensions to return Sample Values : XLS</param>
        /// <param name="ImageFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Size:Small, Size:Medium, Size:Large, Size:Width:[Width], Size:Height:[Height], Aspect:Square, Aspect:Wide, Aspect:Tall, Color:Color, Color:Monochrome, Style:Photo, Style:Graphics, Face:Face, Face:Portrait, Face:Other. Sample Values : Size:Small+Aspect:Square</param>
        /// <param name="VideoFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Duration:Short, Duration:Medium, Duration:Long, Aspect:Standard, Aspect:Widescreen, Resolution:Low, Resolution:Medium, Resolution:High. Sample Values : Duration:Short+Resolution:High</param>
        /// <param name="VideoSortBy">The sort order of results returned Sample Values : Date</param>
        /// <param name="NewsLocationOverride">Overrides Bing location detection. This parameter is only applicable in en-US market. Sample Values : US.WA</param>
        /// <param name="NewsCategory">The category of news for which to provide results Sample Values : rt_Business</param>
        /// <param name="NewsSortBy">The sort order of results returned Sample Values : Date</param>
        public DataServiceQuery<ExpandableSearchResult> Composite(String Sources, String Query, String Options, String WebSearchOptions, String Market, String Adult, Double? Latitude, Double? Longitude, String WebFileType, String ImageFilters, String VideoFilters, String VideoSortBy, String NewsLocationOverride, String NewsCategory, String NewsSortBy) {
            if ((Sources == null)) {
                throw new System.ArgumentNullException("Sources", "Sources value cannot be null");
            }
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<ExpandableSearchResult> query;
            query = base.CreateQuery<ExpandableSearchResult>("Composite");
            if ((Sources != null)) {
                query = query.AddQueryOption("Sources", string.Concat("\'", System.Uri.EscapeDataString(Sources), "\'"));
            }
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            if ((Options != null)) {
                query = query.AddQueryOption("Options", string.Concat("\'", System.Uri.EscapeDataString(Options), "\'"));
            }
            if ((WebSearchOptions != null)) {
                query = query.AddQueryOption("WebSearchOptions", string.Concat("\'", System.Uri.EscapeDataString(WebSearchOptions), "\'"));
            }
            if ((Market != null)) {
                query = query.AddQueryOption("Market", string.Concat("\'", System.Uri.EscapeDataString(Market), "\'"));
            }
            if ((Adult != null)) {
                query = query.AddQueryOption("Adult", string.Concat("\'", System.Uri.EscapeDataString(Adult), "\'"));
            }
            if (((Latitude != null) 
                        && (Latitude.HasValue == true))) {
                query = query.AddQueryOption("Latitude", Latitude.Value);
            }
            if (((Longitude != null) 
                        && (Longitude.HasValue == true))) {
                query = query.AddQueryOption("Longitude", Longitude.Value);
            }
            if ((WebFileType != null)) {
                query = query.AddQueryOption("WebFileType", string.Concat("\'", System.Uri.EscapeDataString(WebFileType), "\'"));
            }
            if ((ImageFilters != null)) {
                query = query.AddQueryOption("ImageFilters", string.Concat("\'", System.Uri.EscapeDataString(ImageFilters), "\'"));
            }
            if ((VideoFilters != null)) {
                query = query.AddQueryOption("VideoFilters", string.Concat("\'", System.Uri.EscapeDataString(VideoFilters), "\'"));
            }
            if ((VideoSortBy != null)) {
                query = query.AddQueryOption("VideoSortBy", string.Concat("\'", System.Uri.EscapeDataString(VideoSortBy), "\'"));
            }
            if ((NewsLocationOverride != null)) {
                query = query.AddQueryOption("NewsLocationOverride", string.Concat("\'", System.Uri.EscapeDataString(NewsLocationOverride), "\'"));
            }
            if ((NewsCategory != null)) {
                query = query.AddQueryOption("NewsCategory", string.Concat("\'", System.Uri.EscapeDataString(NewsCategory), "\'"));
            }
            if ((NewsSortBy != null)) {
                query = query.AddQueryOption("NewsSortBy", string.Concat("\'", System.Uri.EscapeDataString(NewsSortBy), "\'"));
            }
            return query;
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Query">Bing search query Sample Values : xbox</param>
        /// <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
        /// <param name="WebSearchOptions">Specify options for a request to the Web SourceType. Valid values are: DisableHostCollapsing, DisableQueryAlterations. Sample Values : DisableQueryAlterations</param>
        /// <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
        /// <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
        /// <param name="Latitude">Latitude Sample Values : 47.603450</param>
        /// <param name="Longitude">Longitude Sample Values : -122.329696</param>
        /// <param name="WebFileType">File extensions to return Sample Values : XLS</param>
        public DataServiceQuery<WebResult> Web(String Query, String Options, String WebSearchOptions, String Market, String Adult, Double? Latitude, Double? Longitude, String WebFileType) {
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<WebResult> query;
            query = base.CreateQuery<WebResult>("Web");
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            if ((Options != null)) {
                query = query.AddQueryOption("Options", string.Concat("\'", System.Uri.EscapeDataString(Options), "\'"));
            }
            if ((WebSearchOptions != null)) {
                query = query.AddQueryOption("WebSearchOptions", string.Concat("\'", System.Uri.EscapeDataString(WebSearchOptions), "\'"));
            }
            if ((Market != null)) {
                query = query.AddQueryOption("Market", string.Concat("\'", System.Uri.EscapeDataString(Market), "\'"));
            }
            if ((Adult != null)) {
                query = query.AddQueryOption("Adult", string.Concat("\'", System.Uri.EscapeDataString(Adult), "\'"));
            }
            if (((Latitude != null) 
                        && (Latitude.HasValue == true))) {
                query = query.AddQueryOption("Latitude", Latitude.Value);
            }
            if (((Longitude != null) 
                        && (Longitude.HasValue == true))) {
                query = query.AddQueryOption("Longitude", Longitude.Value);
            }
            if ((WebFileType != null)) {
                query = query.AddQueryOption("WebFileType", string.Concat("\'", System.Uri.EscapeDataString(WebFileType), "\'"));
            }
            return query;
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Query">Bing search query Sample Values : xbox</param>
        /// <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
        /// <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
        /// <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
        /// <param name="Latitude">Latitude Sample Values : 47.603450</param>
        /// <param name="Longitude">Longitude Sample Values : -122.329696</param>
        /// <param name="ImageFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Size:Small, Size:Medium, Size:Large, Size:Width:[Width], Size:Height:[Height], Aspect:Square, Aspect:Wide, Aspect:Tall, Color:Color, Color:Monochrome, Style:Photo, Style:Graphics, Face:Face, Face:Portrait, Face:Other. Sample Values : Size:Small+Aspect:Square</param>
        public DataServiceQuery<ImageResult> Image(String Query, String Options, String Market, String Adult, Double? Latitude, Double? Longitude, String ImageFilters) {
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<ImageResult> query;
            query = base.CreateQuery<ImageResult>("Image");
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            if ((Options != null)) {
                query = query.AddQueryOption("Options", string.Concat("\'", System.Uri.EscapeDataString(Options), "\'"));
            }
            if ((Market != null)) {
                query = query.AddQueryOption("Market", string.Concat("\'", System.Uri.EscapeDataString(Market), "\'"));
            }
            if ((Adult != null)) {
                query = query.AddQueryOption("Adult", string.Concat("\'", System.Uri.EscapeDataString(Adult), "\'"));
            }
            if (((Latitude != null) 
                        && (Latitude.HasValue == true))) {
                query = query.AddQueryOption("Latitude", Latitude.Value);
            }
            if (((Longitude != null) 
                        && (Longitude.HasValue == true))) {
                query = query.AddQueryOption("Longitude", Longitude.Value);
            }
            if ((ImageFilters != null)) {
                query = query.AddQueryOption("ImageFilters", string.Concat("\'", System.Uri.EscapeDataString(ImageFilters), "\'"));
            }
            return query;
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Query">Bing search query Sample Values : xbox</param>
        /// <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
        /// <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
        /// <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
        /// <param name="Latitude">Latitude Sample Values : 47.603450</param>
        /// <param name="Longitude">Longitude Sample Values : -122.329696</param>
        /// <param name="VideoFilters">Array of strings that filter the response the API sends based on size, aspect, color, style, face or any combination thereof. Valid values are: Duration:Short, Duration:Medium, Duration:Long, Aspect:Standard, Aspect:Widescreen, Resolution:Low, Resolution:Medium, Resolution:High. Sample Values : Duration:Short+Resolution:High</param>
        /// <param name="VideoSortBy">The sort order of results returned Sample Values : Date</param>
        public DataServiceQuery<VideoResult> Video(String Query, String Options, String Market, String Adult, Double? Latitude, Double? Longitude, String VideoFilters, String VideoSortBy) {
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<VideoResult> query;
            query = base.CreateQuery<VideoResult>("Video");
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            if ((Options != null)) {
                query = query.AddQueryOption("Options", string.Concat("\'", System.Uri.EscapeDataString(Options), "\'"));
            }
            if ((Market != null)) {
                query = query.AddQueryOption("Market", string.Concat("\'", System.Uri.EscapeDataString(Market), "\'"));
            }
            if ((Adult != null)) {
                query = query.AddQueryOption("Adult", string.Concat("\'", System.Uri.EscapeDataString(Adult), "\'"));
            }
            if (((Latitude != null) 
                        && (Latitude.HasValue == true))) {
                query = query.AddQueryOption("Latitude", Latitude.Value);
            }
            if (((Longitude != null) 
                        && (Longitude.HasValue == true))) {
                query = query.AddQueryOption("Longitude", Longitude.Value);
            }
            if ((VideoFilters != null)) {
                query = query.AddQueryOption("VideoFilters", string.Concat("\'", System.Uri.EscapeDataString(VideoFilters), "\'"));
            }
            if ((VideoSortBy != null)) {
                query = query.AddQueryOption("VideoSortBy", string.Concat("\'", System.Uri.EscapeDataString(VideoSortBy), "\'"));
            }
            return query;
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Query">Bing search query Sample Values : xbox</param>
        /// <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
        /// <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
        /// <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
        /// <param name="Latitude">Latitude Sample Values : 47.603450</param>
        /// <param name="Longitude">Longitude Sample Values : -122.329696</param>
        /// <param name="NewsLocationOverride">Overrides Bing location detection. This parameter is only applicable in en-US market. Sample Values : US.WA</param>
        /// <param name="NewsCategory">The category of news for which to provide results Sample Values : rt_Business</param>
        /// <param name="NewsSortBy">The sort order of results returned Sample Values : Date</param>
        public DataServiceQuery<NewsResult> News(String Query, String Options, String Market, String Adult, Double? Latitude, Double? Longitude, String NewsLocationOverride, String NewsCategory, String NewsSortBy) {
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<NewsResult> query;
            query = base.CreateQuery<NewsResult>("News");
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            if ((Options != null)) {
                query = query.AddQueryOption("Options", string.Concat("\'", System.Uri.EscapeDataString(Options), "\'"));
            }
            if ((Market != null)) {
                query = query.AddQueryOption("Market", string.Concat("\'", System.Uri.EscapeDataString(Market), "\'"));
            }
            if ((Adult != null)) {
                query = query.AddQueryOption("Adult", string.Concat("\'", System.Uri.EscapeDataString(Adult), "\'"));
            }
            if (((Latitude != null) 
                        && (Latitude.HasValue == true))) {
                query = query.AddQueryOption("Latitude", Latitude.Value);
            }
            if (((Longitude != null) 
                        && (Longitude.HasValue == true))) {
                query = query.AddQueryOption("Longitude", Longitude.Value);
            }
            if ((NewsLocationOverride != null)) {
                query = query.AddQueryOption("NewsLocationOverride", string.Concat("\'", System.Uri.EscapeDataString(NewsLocationOverride), "\'"));
            }
            if ((NewsCategory != null)) {
                query = query.AddQueryOption("NewsCategory", string.Concat("\'", System.Uri.EscapeDataString(NewsCategory), "\'"));
            }
            if ((NewsSortBy != null)) {
                query = query.AddQueryOption("NewsSortBy", string.Concat("\'", System.Uri.EscapeDataString(NewsSortBy), "\'"));
            }
            return query;
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Query">Bing search query Sample Values : xbox</param>
        /// <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
        /// <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
        /// <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
        /// <param name="Latitude">Latitude Sample Values : 47.603450</param>
        /// <param name="Longitude">Longitude Sample Values : -122.329696</param>
        public DataServiceQuery<RelatedSearchResult> RelatedSearch(String Query, String Options, String Market, String Adult, Double? Latitude, Double? Longitude) {
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<RelatedSearchResult> query;
            query = base.CreateQuery<RelatedSearchResult>("RelatedSearch");
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            if ((Options != null)) {
                query = query.AddQueryOption("Options", string.Concat("\'", System.Uri.EscapeDataString(Options), "\'"));
            }
            if ((Market != null)) {
                query = query.AddQueryOption("Market", string.Concat("\'", System.Uri.EscapeDataString(Market), "\'"));
            }
            if ((Adult != null)) {
                query = query.AddQueryOption("Adult", string.Concat("\'", System.Uri.EscapeDataString(Adult), "\'"));
            }
            if (((Latitude != null) 
                        && (Latitude.HasValue == true))) {
                query = query.AddQueryOption("Latitude", Latitude.Value);
            }
            if (((Longitude != null) 
                        && (Longitude.HasValue == true))) {
                query = query.AddQueryOption("Longitude", Longitude.Value);
            }
            return query;
        }
        
        /// <summary>
        /// </summary>
        /// <param name="Query">Bing search query Sample Values : xblox</param>
        /// <param name="Options">Specifies options for this request for all Sources. Valid values are: DisableLocationDetection, EnableHighlighting. Sample Values : EnableHighlighting</param>
        /// <param name="Market">Market. Note: Not all Sources support all markets. Sample Values : en-US</param>
        /// <param name="Adult">Adult setting is used for filtering sexually explicit content Sample Values : Moderate</param>
        /// <param name="Latitude">Latitude Sample Values : 47.603450</param>
        /// <param name="Longitude">Longitude Sample Values : -122.329696</param>
        public DataServiceQuery<SpellResult> SpellingSuggestions(String Query, String Options, String Market, String Adult, Double? Latitude, Double? Longitude) {
            if ((Query == null)) {
                throw new System.ArgumentNullException("Query", "Query value cannot be null");
            }
            DataServiceQuery<SpellResult> query;
            query = base.CreateQuery<SpellResult>("SpellingSuggestions");
            if ((Query != null)) {
                query = query.AddQueryOption("Query", string.Concat("\'", System.Uri.EscapeDataString(Query), "\'"));
            }
            if ((Options != null)) {
                query = query.AddQueryOption("Options", string.Concat("\'", System.Uri.EscapeDataString(Options), "\'"));
            }
            if ((Market != null)) {
                query = query.AddQueryOption("Market", string.Concat("\'", System.Uri.EscapeDataString(Market), "\'"));
            }
            if ((Adult != null)) {
                query = query.AddQueryOption("Adult", string.Concat("\'", System.Uri.EscapeDataString(Adult), "\'"));
            }
            if (((Latitude != null) 
                        && (Latitude.HasValue == true))) {
                query = query.AddQueryOption("Latitude", Latitude.Value);
            }
            if (((Longitude != null) 
                        && (Longitude.HasValue == true))) {
                query = query.AddQueryOption("Longitude", Longitude.Value);
            }
            return query;
        }
    }
}
